"use strict";
var bitmask = function (bitsNumber) { return -1 >>> (32 - bitsNumber); };
var check = function (byteSize, value, isSigned) {
    var lowerBound;
    var upperBound;
    if (8 === byteSize) {
        if ('bigint' !== typeof value)
            throw new TypeError("\"value\" (".concat(value, ") has invalid type, expected BigInt"));
        lowerBound = isSigned ? -0x8000000000000000n : 0n;
        upperBound = isSigned ? 0x7fffffffffffffffn : 0xffffffffffffffffn;
    }
    else {
        if (!Number.isInteger(value))
            throw new RangeError("\"value\" (".concat(value, ") is not an integer"));
        // note: all expressions are tricky, they're used due to JS dumbness re 1<<32 == 0 and 1<<31 = min signed int
        lowerBound = isSigned ? -bitmask((8 * byteSize) - 1) - 1 : 0;
        upperBound = isSigned ? bitmask((8 * byteSize) - 1) : bitmask(8 * byteSize);
    }
    if (value < lowerBound || value > upperBound)
        throw RangeError("\"value\" (".concat(value, ") is outside of valid ").concat(8 * byteSize, "-bit range"));
    return value;
};
/**
 * Represents a base integer.
 */
var BaseValue = /** @class */ (function () {
    /**
     * Creates a base value.
     * @param {number} size Size of the integer.
     * @param {number|BigInt} value Value.
     * @param {boolean} isSigned Should the value be treated as signed.
     */
    function BaseValue(size, value, isSigned) {
        if (isSigned === void 0) { isSigned = false; }
        this.size = size;
        this.isSigned = isSigned;
        this.value = check(size, value, isSigned);
    }
    /**
     * Converts base value to string.
     * @returns {string} String representation.
     */
    BaseValue.prototype.toString = function () {
        var unsignedValue;
        if (!this.isSigned || 0 <= this.value) {
            unsignedValue = this.value;
        }
        else {
            var upperBoundPlusOne = (8 === this.size ? 0x10000000000000000n : bitmask(this.size * 8) + 1);
            unsignedValue = this.value + upperBoundPlusOne;
        }
        return "0x".concat(unsignedValue.toString(16).toUpperCase().padStart(this.size * 2, '0'));
    };
    return BaseValue;
}());
module.exports = { BaseValue: BaseValue };
