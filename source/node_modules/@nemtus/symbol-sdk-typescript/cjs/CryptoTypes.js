"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ByteArray = require('./ByteArray').ByteArray;
var crypto = require('crypto');
/**
 *  Represents a 256-bit hash.
 */
var Hash256 = /** @class */ (function (_super) {
    __extends(Hash256, _super);
    /**
     * Creates a hash from bytes or a hex string.
     * @param {Uint8Array|string} hash256 Input string or byte array.
     */
    function Hash256(hash256) {
        return _super.call(this, Hash256.SIZE, hash256) || this;
    }
    /**
     * Creates a zeroed hash.
     * @returns {Hash256} Zeroed hash.
     */
    Hash256.zero = function () {
        return new Hash256(new Uint8Array(Hash256.SIZE));
    };
    Hash256.SIZE = 32;
    return Hash256;
}(ByteArray));
/**
 *  Represents a private key.
 */
var PrivateKey = /** @class */ (function (_super) {
    __extends(PrivateKey, _super);
    /**
     * Creates a private key from bytes or a hex string.
     * @param {Uint8Array|string} privateKey Input string or byte array.
     */
    function PrivateKey(privateKey) {
        return _super.call(this, PrivateKey.SIZE, privateKey) || this;
    }
    /**
     * Creates a random private key.
     * @returns {PrivateKey} Random private key.
     */
    PrivateKey.random = function () {
        return new PrivateKey(crypto.randomBytes(PrivateKey.SIZE));
    };
    PrivateKey.SIZE = 32;
    return PrivateKey;
}(ByteArray));
/**
 *  Represents a public key.
 */
var PublicKey = /** @class */ (function (_super) {
    __extends(PublicKey, _super);
    /**
     * Creates a public key from bytes or a hex string.
     * @param {Uint8Array|string} publicKey Input string, byte array or public key.
     */
    function PublicKey(publicKey) {
        return _super.call(this, PublicKey.SIZE, publicKey instanceof PublicKey ? publicKey.bytes : publicKey) || this;
    }
    PublicKey.SIZE = 32;
    return PublicKey;
}(ByteArray));
/**
 *  Represents a signature.
 */
var Signature = /** @class */ (function (_super) {
    __extends(Signature, _super);
    /**
     * Creates a signature from bytes or a hex string.
     * @param {Uint8Array|string} signature Input string or byte array.
     */
    function Signature(signature) {
        return _super.call(this, Signature.SIZE, signature) || this;
    }
    /**
     * Creates a zeroed signature.
     * @returns {Signature} Zeroed signature.
     */
    Signature.zero = function () {
        return new Signature(new Uint8Array(Signature.SIZE));
    };
    Signature.SIZE = 64;
    return Signature;
}(ByteArray));
module.exports = {
    Hash256: Hash256,
    PrivateKey: PrivateKey,
    PublicKey: PublicKey,
    Signature: Signature
};
