"use strict";
/**
 * Processes and looks up transaction descriptor properties.
 */
var TransactionDescriptorProcessor = /** @class */ (function () {
    /**
     * Creates a transaction descriptor processor.
     * @param {object} transactionDescriptor Transaction descriptor.
     * @param {Map} typeParsingRules Type-dependent parsing rules.
     * @param {function} typeConverter Converts a generated type to an sdk type (optional).
     */
    function TransactionDescriptorProcessor(transactionDescriptor, typeParsingRules, typeConverter) {
        if (typeConverter === void 0) { typeConverter = undefined; }
        this.transactionDescriptor = transactionDescriptor;
        this.typeParsingRules = typeParsingRules;
        this.typeConverter = typeConverter || (function (value) { return value; });
        this.typeHints = {};
    }
    TransactionDescriptorProcessor.prototype._lookupValueAndApplyTypeHints = function (key) {
        if (undefined === this.transactionDescriptor[key])
            throw RangeError("transaction descriptor does not have attribute ".concat(key));
        var value = this.transactionDescriptor[key];
        var typeHint = this.typeHints[key];
        if (this.typeParsingRules.has(typeHint))
            value = this.typeParsingRules.get(typeHint)(value);
        return value;
    };
    /**
     * Looks up the value for key.
     * @param {string} key Key for which to retrieve value.
     * @returns {object} Value corresponding to key.
     */
    TransactionDescriptorProcessor.prototype.lookupValue = function (key) {
        var _this = this;
        var value = this._lookupValueAndApplyTypeHints(key);
        return Array.isArray(value)
            ? value.map(function (item) { return _this.typeConverter(item); })
            : this.typeConverter(value);
    };
    /**
     * Copies all descriptor information to a transaction.
     * @param {object} transaction Transaction to which to copy keys.
     * @param {array<string>} ignoreKeys Keys of descriptor values not to copy (optional).
     */
    TransactionDescriptorProcessor.prototype.copyTo = function (transaction, ignoreKeys) {
        var _this = this;
        if (ignoreKeys === void 0) { ignoreKeys = undefined; }
        Object.getOwnPropertyNames(this.transactionDescriptor).forEach(function (key) {
            if (ignoreKeys && -1 !== ignoreKeys.indexOf(key))
                return;
            if (undefined === transaction[key])
                throw RangeError("transaction does not have attribute ".concat(key));
            var value = _this.lookupValue(key);
            transaction[key] = value;
        });
    };
    /**
     * Sets type hints.
     * @param {object} typeHints New type hints.
     */
    TransactionDescriptorProcessor.prototype.setTypeHints = function (typeHints) {
        this.typeHints = typeHints || {};
    };
    return TransactionDescriptorProcessor;
}());
module.exports = { TransactionDescriptorProcessor: TransactionDescriptorProcessor };
