"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var ByteArray = require('../ByteArray').ByteArray;
var BasicNetwork = require('../Network').Network;
var BasicNetworkTimestamp = require('../NetworkTimestamp').NetworkTimestamp;
var NetworkTimestampDatetimeConverter = require('../NetworkTimestamp').NetworkTimestampDatetimeConverter;
var base32 = require('../utils/base32');
var keccak_256 = require('@noble/hashes/sha3').keccak_256;
/**
 * Represents a NEM network timestamp with millisecond resolution.
 */
var NetworkTimestamp = /** @class */ (function (_super) {
    __extends(NetworkTimestamp, _super);
    function NetworkTimestamp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a specified number of seconds to this timestamp.
     * @override
     * @param {number} count Number of seconds to add.
     * @returns {NetworkTimestamp} New timestamp that is the specified number of seconds past this timestamp.
     */
    NetworkTimestamp.prototype.addSeconds = function (count) {
        return new NetworkTimestamp(this.timestamp + BigInt(count));
    };
    return NetworkTimestamp;
}(BasicNetworkTimestamp));
/**
 * Represents a NEM address.
 */
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    /**
     * Creates a NEM address.
     * @param {Uint8Array|string|Address} address Input string, byte array or address.
     */
    function Address(address) {
        var rawBytes = address;
        if ('string' === typeof address)
            rawBytes = base32.decode(address);
        else if (address instanceof Address)
            rawBytes = address.bytes;
        return _super.call(this, Address.SIZE, rawBytes) || this;
    }
    /**
     * Returns string representation of this object.
     * @returns {string} String representation of this object
     */
    Address.prototype.toString = function () {
        return base32.encode(this.bytes);
    };
    Address.SIZE = 25;
    Address.ENCODED_SIZE = 40;
    return Address;
}(ByteArray));
/**
 * Represents a NEM network.
 */
var Network = /** @class */ (function (_super) {
    __extends(Network, _super);
    /**
     * Creates a new network with the specified name, identifier byte and generation hash seed.
     * @param {string} name Network name.
     * @param {number} identifier Network identifier byte.
     * @param {Date} epochTime Network epoch time.
     */
    function Network(name, identifier, epochTime) {
        return _super.call(this, name, identifier, new NetworkTimestampDatetimeConverter(epochTime, 'seconds'), function () { return keccak_256.create(); }, function (addressWithoutChecksum, checksum) { return new Address(new Uint8Array(__spreadArray(__spreadArray([], addressWithoutChecksum, true), checksum, true))); }, Address, NetworkTimestamp) || this;
    }
    return Network;
}(BasicNetwork));
Network.MAINNET = new Network('mainnet', 0x68, new Date(Date.UTC(2015, 2, 29, 0, 6, 25)));
Network.TESTNET = new Network('testnet', 0x98, new Date(Date.UTC(2015, 2, 29, 0, 6, 25)));
Network.NETWORKS = [Network.MAINNET, Network.TESTNET];
module.exports = { Address: Address, Network: Network, NetworkTimestamp: NetworkTimestamp };
