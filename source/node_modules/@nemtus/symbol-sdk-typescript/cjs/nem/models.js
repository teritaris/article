"use strict";
/* eslint-disable max-len, object-property-newline, no-underscore-dangle, no-use-before-define */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseValue = require('../BaseValue').BaseValue;
var ByteArray = require('../ByteArray').ByteArray;
var BufferView = require('../utils/BufferView').BufferView;
var Writer = require('../utils/Writer').Writer;
var arrayHelpers = require('../utils/arrayHelpers');
var converter = require('../utils/converter');
var Amount = /** @class */ (function (_super) {
    __extends(Amount, _super);
    function Amount(amount) {
        if (amount === void 0) { amount = 0n; }
        return _super.call(this, Amount.SIZE, amount) || this;
    }
    Amount.deserialize = function (payload) {
        var byteArray = payload;
        return new Amount(converter.bytesToInt(byteArray, 8, false));
    };
    Amount.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    Amount.SIZE = 8;
    return Amount;
}(BaseValue));
var Height = /** @class */ (function (_super) {
    __extends(Height, _super);
    function Height(height) {
        if (height === void 0) { height = 0n; }
        return _super.call(this, Height.SIZE, height) || this;
    }
    Height.deserialize = function (payload) {
        var byteArray = payload;
        return new Height(converter.bytesToInt(byteArray, 8, false));
    };
    Height.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    Height.SIZE = 8;
    return Height;
}(BaseValue));
var Timestamp = /** @class */ (function (_super) {
    __extends(Timestamp, _super);
    function Timestamp(timestamp) {
        if (timestamp === void 0) { timestamp = 0; }
        return _super.call(this, Timestamp.SIZE, timestamp) || this;
    }
    Timestamp.deserialize = function (payload) {
        var byteArray = payload;
        return new Timestamp(converter.bytesToInt(byteArray, 4, false));
    };
    Timestamp.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    Timestamp.SIZE = 4;
    return Timestamp;
}(BaseValue));
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    function Address(address) {
        if (address === void 0) { address = new Uint8Array(40); }
        return _super.call(this, Address.SIZE, address) || this;
    }
    Object.defineProperty(Address.prototype, "size", {
        get: function () {
            return 40;
        },
        enumerable: false,
        configurable: true
    });
    Address.deserialize = function (payload) {
        var byteArray = payload;
        return new Address(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 40));
    };
    Address.prototype.serialize = function () {
        return this.bytes;
    };
    Address.SIZE = 40;
    return Address;
}(ByteArray));
var Hash256 = /** @class */ (function (_super) {
    __extends(Hash256, _super);
    function Hash256(hash256) {
        if (hash256 === void 0) { hash256 = new Uint8Array(32); }
        return _super.call(this, Hash256.SIZE, hash256) || this;
    }
    Object.defineProperty(Hash256.prototype, "size", {
        get: function () {
            return 32;
        },
        enumerable: false,
        configurable: true
    });
    Hash256.deserialize = function (payload) {
        var byteArray = payload;
        return new Hash256(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 32));
    };
    Hash256.prototype.serialize = function () {
        return this.bytes;
    };
    Hash256.SIZE = 32;
    return Hash256;
}(ByteArray));
var PublicKey = /** @class */ (function (_super) {
    __extends(PublicKey, _super);
    function PublicKey(publicKey) {
        if (publicKey === void 0) { publicKey = new Uint8Array(32); }
        return _super.call(this, PublicKey.SIZE, publicKey) || this;
    }
    Object.defineProperty(PublicKey.prototype, "size", {
        get: function () {
            return 32;
        },
        enumerable: false,
        configurable: true
    });
    PublicKey.deserialize = function (payload) {
        var byteArray = payload;
        return new PublicKey(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 32));
    };
    PublicKey.prototype.serialize = function () {
        return this.bytes;
    };
    PublicKey.SIZE = 32;
    return PublicKey;
}(ByteArray));
var Signature = /** @class */ (function (_super) {
    __extends(Signature, _super);
    function Signature(signature) {
        if (signature === void 0) { signature = new Uint8Array(64); }
        return _super.call(this, Signature.SIZE, signature) || this;
    }
    Object.defineProperty(Signature.prototype, "size", {
        get: function () {
            return 64;
        },
        enumerable: false,
        configurable: true
    });
    Signature.deserialize = function (payload) {
        var byteArray = payload;
        return new Signature(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 64));
    };
    Signature.prototype.serialize = function () {
        return this.bytes;
    };
    Signature.SIZE = 64;
    return Signature;
}(ByteArray));
var NetworkType = /** @class */ (function () {
    function NetworkType(value) {
        this.value = value;
    }
    NetworkType.valueToKey = function (value) {
        var values = [
            104, 152
        ];
        var keys = [
            'MAINNET', 'TESTNET'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    NetworkType.fromValue = function (value) {
        return NetworkType[this.valueToKey(value)];
    };
    Object.defineProperty(NetworkType.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    NetworkType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    NetworkType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    NetworkType.prototype.toString = function () {
        return "NetworkType.".concat(NetworkType.valueToKey(this.value));
    };
    NetworkType.MAINNET = new NetworkType(104);
    NetworkType.TESTNET = new NetworkType(152);
    return NetworkType;
}());
var TransactionType = /** @class */ (function () {
    function TransactionType(value) {
        this.value = value;
    }
    TransactionType.valueToKey = function (value) {
        var values = [
            257, 2049, 4097, 4098, 4100, 8193, 16385, 16386
        ];
        var keys = [
            'TRANSFER', 'ACCOUNT_KEY_LINK', 'MULTISIG_ACCOUNT_MODIFICATION', 'MULTISIG_COSIGNATURE', 'MULTISIG_TRANSACTION',
            'NAMESPACE_REGISTRATION', 'MOSAIC_DEFINITION', 'MOSAIC_SUPPLY_CHANGE'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    TransactionType.fromValue = function (value) {
        return TransactionType[this.valueToKey(value)];
    };
    Object.defineProperty(TransactionType.prototype, "size", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    TransactionType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 4, false));
    };
    TransactionType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    TransactionType.prototype.toString = function () {
        return "TransactionType.".concat(TransactionType.valueToKey(this.value));
    };
    TransactionType.TRANSFER = new TransactionType(257);
    TransactionType.ACCOUNT_KEY_LINK = new TransactionType(2049);
    TransactionType.MULTISIG_ACCOUNT_MODIFICATION = new TransactionType(4097);
    TransactionType.MULTISIG_COSIGNATURE = new TransactionType(4098);
    TransactionType.MULTISIG_TRANSACTION = new TransactionType(4100);
    TransactionType.NAMESPACE_REGISTRATION = new TransactionType(8193);
    TransactionType.MOSAIC_DEFINITION = new TransactionType(16385);
    TransactionType.MOSAIC_SUPPLY_CHANGE = new TransactionType(16386);
    return TransactionType;
}());
var Transaction = /** @class */ (function () {
    function Transaction() {
        this._type = TransactionType.TRANSFER;
        this._version = 0;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
    }
    Object.defineProperty(Transaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Transaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var instance = new Transaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        return instance;
    };
    Transaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        return buffer.storage;
    };
    Transaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += ')';
        return result;
    };
    Transaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp'
    };
    return Transaction;
}());
var NonVerifiableTransaction = /** @class */ (function () {
    function NonVerifiableTransaction() {
        this._type = TransactionType.TRANSFER;
        this._version = 0;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
    }
    Object.defineProperty(NonVerifiableTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var instance = new NonVerifiableTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        return instance;
    };
    NonVerifiableTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        return buffer.storage;
    };
    NonVerifiableTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += ')';
        return result;
    };
    NonVerifiableTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp'
    };
    return NonVerifiableTransaction;
}());
var LinkAction = /** @class */ (function () {
    function LinkAction(value) {
        this.value = value;
    }
    LinkAction.valueToKey = function (value) {
        var values = [
            1, 2
        ];
        var keys = [
            'LINK', 'UNLINK'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    LinkAction.fromValue = function (value) {
        return LinkAction[this.valueToKey(value)];
    };
    Object.defineProperty(LinkAction.prototype, "size", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    LinkAction.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 4, false));
    };
    LinkAction.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    LinkAction.prototype.toString = function () {
        return "LinkAction.".concat(LinkAction.valueToKey(this.value));
    };
    LinkAction.LINK = new LinkAction(1);
    LinkAction.UNLINK = new LinkAction(2);
    return LinkAction;
}());
var AccountKeyLinkTransaction = /** @class */ (function () {
    function AccountKeyLinkTransaction() {
        this._type = AccountKeyLinkTransaction.TRANSACTION_TYPE;
        this._version = AccountKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._linkAction = LinkAction.LINK;
        this._remotePublicKey = new PublicKey();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
        this._remotePublicKeySize = 32; // reserved field
    }
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "remotePublicKey", {
        get: function () {
            return this._remotePublicKey;
        },
        set: function (value) {
            this._remotePublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.linkAction.size;
            size += 4;
            size += this.remotePublicKey.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AccountKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var remotePublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== remotePublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(remotePublicKeySize, ")"));
        var remotePublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(remotePublicKey.size);
        var instance = new AccountKeyLinkTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._linkAction = linkAction;
        instance._remotePublicKey = remotePublicKey;
        return instance;
    };
    AccountKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._linkAction.serialize());
        buffer.write(converter.intToBytes(this._remotePublicKeySize, 4, false));
        buffer.write(this._remotePublicKey.serialize());
        return buffer.storage;
    };
    AccountKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += "remotePublicKey: ".concat(this._remotePublicKey.toString(), ", ");
        result += ')';
        return result;
    };
    AccountKeyLinkTransaction.TRANSACTION_VERSION = 1;
    AccountKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_KEY_LINK;
    AccountKeyLinkTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        linkAction: 'enum:LinkAction',
        remotePublicKey: 'pod:PublicKey'
    };
    return AccountKeyLinkTransaction;
}());
var NonVerifiableAccountKeyLinkTransaction = /** @class */ (function () {
    function NonVerifiableAccountKeyLinkTransaction() {
        this._type = NonVerifiableAccountKeyLinkTransaction.TRANSACTION_TYPE;
        this._version = NonVerifiableAccountKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._linkAction = LinkAction.LINK;
        this._remotePublicKey = new PublicKey();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._remotePublicKeySize = 32; // reserved field
    }
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "remotePublicKey", {
        get: function () {
            return this._remotePublicKey;
        },
        set: function (value) {
            this._remotePublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableAccountKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.linkAction.size;
            size += 4;
            size += this.remotePublicKey.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableAccountKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var remotePublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== remotePublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(remotePublicKeySize, ")"));
        var remotePublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(remotePublicKey.size);
        var instance = new NonVerifiableAccountKeyLinkTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._linkAction = linkAction;
        instance._remotePublicKey = remotePublicKey;
        return instance;
    };
    NonVerifiableAccountKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._linkAction.serialize());
        buffer.write(converter.intToBytes(this._remotePublicKeySize, 4, false));
        buffer.write(this._remotePublicKey.serialize());
        return buffer.storage;
    };
    NonVerifiableAccountKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += "remotePublicKey: ".concat(this._remotePublicKey.toString(), ", ");
        result += ')';
        return result;
    };
    NonVerifiableAccountKeyLinkTransaction.TRANSACTION_VERSION = 1;
    NonVerifiableAccountKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_KEY_LINK;
    NonVerifiableAccountKeyLinkTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        linkAction: 'enum:LinkAction',
        remotePublicKey: 'pod:PublicKey'
    };
    return NonVerifiableAccountKeyLinkTransaction;
}());
var NamespaceId = /** @class */ (function () {
    function NamespaceId() {
        this._name = new Uint8Array();
    }
    Object.defineProperty(NamespaceId.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceId.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this._name.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceId.deserialize = function (payload) {
        var view = new BufferView(payload);
        var nameSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var name = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, nameSize);
        view.shiftRight(nameSize);
        var instance = new NamespaceId();
        instance._name = name;
        return instance;
    };
    NamespaceId.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this._name.length, 4, false)); // bound: name_size
        buffer.write(this._name);
        return buffer.storage;
    };
    NamespaceId.prototype.toString = function () {
        var result = '(';
        result += "name: hex(".concat(converter.uint8ToHex(this._name), "), ");
        result += ')';
        return result;
    };
    NamespaceId.TYPE_HINTS = {
        name: 'bytes_array'
    };
    return NamespaceId;
}());
var MosaicId = /** @class */ (function () {
    function MosaicId() {
        this._namespaceId = new NamespaceId();
        this._name = new Uint8Array();
    }
    Object.defineProperty(MosaicId.prototype, "namespaceId", {
        get: function () {
            return this._namespaceId;
        },
        set: function (value) {
            this._namespaceId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicId.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicId.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.namespaceId.size;
            size += 4;
            size += this._name.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicId.deserialize = function (payload) {
        var view = new BufferView(payload);
        var namespaceId = NamespaceId.deserialize(view.buffer);
        view.shiftRight(namespaceId.size);
        var nameSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var name = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, nameSize);
        view.shiftRight(nameSize);
        var instance = new MosaicId();
        instance._namespaceId = namespaceId;
        instance._name = name;
        return instance;
    };
    MosaicId.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._namespaceId.serialize());
        buffer.write(converter.intToBytes(this._name.length, 4, false)); // bound: name_size
        buffer.write(this._name);
        return buffer.storage;
    };
    MosaicId.prototype.toString = function () {
        var result = '(';
        result += "namespaceId: ".concat(this._namespaceId.toString(), ", ");
        result += "name: hex(".concat(converter.uint8ToHex(this._name), "), ");
        result += ')';
        return result;
    };
    MosaicId.TYPE_HINTS = {
        namespaceId: 'struct:NamespaceId',
        name: 'bytes_array'
    };
    return MosaicId;
}());
var Mosaic = /** @class */ (function () {
    function Mosaic() {
        this._mosaicId = new MosaicId();
        this._amount = new Amount();
    }
    Object.defineProperty(Mosaic.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mosaic.prototype, "amount", {
        get: function () {
            return this._amount;
        },
        set: function (value) {
            this._amount = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mosaic.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this.mosaicId.size;
            size += this.amount.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Mosaic.deserialize = function (payload) {
        var view = new BufferView(payload);
        var mosaicIdSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var mosaicId = MosaicId.deserialize(view.window(mosaicIdSize));
        view.shiftRight(mosaicId.size);
        var amount = Amount.deserialize(view.buffer);
        view.shiftRight(amount.size);
        var instance = new Mosaic();
        instance._mosaicId = mosaicId;
        instance._amount = amount;
        return instance;
    };
    Mosaic.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.mosaicId.size, 4, false)); // bound: mosaic_id_size
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._amount.serialize());
        return buffer.storage;
    };
    Mosaic.prototype.toString = function () {
        var result = '(';
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "amount: ".concat(this._amount.toString(), ", ");
        result += ')';
        return result;
    };
    Mosaic.TYPE_HINTS = {
        mosaicId: 'struct:MosaicId',
        amount: 'pod:Amount'
    };
    return Mosaic;
}());
var SizePrefixedMosaic = /** @class */ (function () {
    function SizePrefixedMosaic() {
        this._mosaic = new Mosaic();
    }
    Object.defineProperty(SizePrefixedMosaic.prototype, "mosaic", {
        get: function () {
            return this._mosaic;
        },
        set: function (value) {
            this._mosaic = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SizePrefixedMosaic.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this.mosaic.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    SizePrefixedMosaic.deserialize = function (payload) {
        var view = new BufferView(payload);
        var mosaicSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var mosaic = Mosaic.deserialize(view.window(mosaicSize));
        view.shiftRight(mosaic.size);
        var instance = new SizePrefixedMosaic();
        instance._mosaic = mosaic;
        return instance;
    };
    SizePrefixedMosaic.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.mosaic.size, 4, false)); // bound: mosaic_size
        buffer.write(this._mosaic.serialize());
        return buffer.storage;
    };
    SizePrefixedMosaic.prototype.toString = function () {
        var result = '(';
        result += "mosaic: ".concat(this._mosaic.toString(), ", ");
        result += ')';
        return result;
    };
    SizePrefixedMosaic.TYPE_HINTS = {
        mosaic: 'struct:Mosaic'
    };
    return SizePrefixedMosaic;
}());
var MosaicTransferFeeType = /** @class */ (function () {
    function MosaicTransferFeeType(value) {
        this.value = value;
    }
    MosaicTransferFeeType.valueToKey = function (value) {
        var values = [
            1, 2
        ];
        var keys = [
            'ABSOLUTE', 'PERCENTILE'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    MosaicTransferFeeType.fromValue = function (value) {
        return MosaicTransferFeeType[this.valueToKey(value)];
    };
    Object.defineProperty(MosaicTransferFeeType.prototype, "size", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    MosaicTransferFeeType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 4, false));
    };
    MosaicTransferFeeType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    MosaicTransferFeeType.prototype.toString = function () {
        return "MosaicTransferFeeType.".concat(MosaicTransferFeeType.valueToKey(this.value));
    };
    MosaicTransferFeeType.ABSOLUTE = new MosaicTransferFeeType(1);
    MosaicTransferFeeType.PERCENTILE = new MosaicTransferFeeType(2);
    return MosaicTransferFeeType;
}());
var MosaicLevy = /** @class */ (function () {
    function MosaicLevy() {
        this._transferFeeType = MosaicTransferFeeType.ABSOLUTE;
        this._recipientAddress = new Address();
        this._mosaicId = new MosaicId();
        this._fee = new Amount();
        this._recipientAddressSize = 40; // reserved field
    }
    Object.defineProperty(MosaicLevy.prototype, "transferFeeType", {
        get: function () {
            return this._transferFeeType;
        },
        set: function (value) {
            this._transferFeeType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicLevy.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicLevy.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicLevy.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicLevy.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.transferFeeType.size;
            size += 4;
            size += this.recipientAddress.size;
            size += 4;
            size += this.mosaicId.size;
            size += this.fee.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicLevy.deserialize = function (payload) {
        var view = new BufferView(payload);
        var transferFeeType = MosaicTransferFeeType.deserialize(view.buffer);
        view.shiftRight(transferFeeType.size);
        var recipientAddressSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== recipientAddressSize)
            throw RangeError("Invalid value of reserved field (".concat(recipientAddressSize, ")"));
        var recipientAddress = Address.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var mosaicIdSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var mosaicId = MosaicId.deserialize(view.window(mosaicIdSize));
        view.shiftRight(mosaicId.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var instance = new MosaicLevy();
        instance._transferFeeType = transferFeeType;
        instance._recipientAddress = recipientAddress;
        instance._mosaicId = mosaicId;
        instance._fee = fee;
        return instance;
    };
    MosaicLevy.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._transferFeeType.serialize());
        buffer.write(converter.intToBytes(this._recipientAddressSize, 4, false));
        buffer.write(this._recipientAddress.serialize());
        buffer.write(converter.intToBytes(this.mosaicId.size, 4, false)); // bound: mosaic_id_size
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._fee.serialize());
        return buffer.storage;
    };
    MosaicLevy.prototype.toString = function () {
        var result = '(';
        result += "transferFeeType: ".concat(this._transferFeeType.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicLevy.TYPE_HINTS = {
        transferFeeType: 'enum:MosaicTransferFeeType',
        recipientAddress: 'pod:Address',
        mosaicId: 'struct:MosaicId',
        fee: 'pod:Amount'
    };
    return MosaicLevy;
}());
var MosaicProperty = /** @class */ (function () {
    function MosaicProperty() {
        this._name = new Uint8Array();
        this._value = new Uint8Array();
    }
    Object.defineProperty(MosaicProperty.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicProperty.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicProperty.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this._name.length;
            size += 4;
            size += this._value.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicProperty.deserialize = function (payload) {
        var view = new BufferView(payload);
        var nameSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var name = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, nameSize);
        view.shiftRight(nameSize);
        var valueSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var value = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, valueSize);
        view.shiftRight(valueSize);
        var instance = new MosaicProperty();
        instance._name = name;
        instance._value = value;
        return instance;
    };
    MosaicProperty.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this._name.length, 4, false)); // bound: name_size
        buffer.write(this._name);
        buffer.write(converter.intToBytes(this._value.length, 4, false)); // bound: value_size
        buffer.write(this._value);
        return buffer.storage;
    };
    MosaicProperty.prototype.toString = function () {
        var result = '(';
        result += "name: hex(".concat(converter.uint8ToHex(this._name), "), ");
        result += "value: hex(".concat(converter.uint8ToHex(this._value), "), ");
        result += ')';
        return result;
    };
    MosaicProperty.TYPE_HINTS = {
        name: 'bytes_array',
        value: 'bytes_array'
    };
    return MosaicProperty;
}());
var SizePrefixedMosaicProperty = /** @class */ (function () {
    function SizePrefixedMosaicProperty() {
        this._property = new MosaicProperty();
    }
    Object.defineProperty(SizePrefixedMosaicProperty.prototype, "property", {
        get: function () {
            return this._property;
        },
        set: function (value) {
            this._property = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SizePrefixedMosaicProperty.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this.property.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    SizePrefixedMosaicProperty.deserialize = function (payload) {
        var view = new BufferView(payload);
        var propertySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var property = MosaicProperty.deserialize(view.window(propertySize));
        view.shiftRight(property.size);
        var instance = new SizePrefixedMosaicProperty();
        instance._property = property;
        return instance;
    };
    SizePrefixedMosaicProperty.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.property.size, 4, false)); // bound: property_size
        buffer.write(this._property.serialize());
        return buffer.storage;
    };
    SizePrefixedMosaicProperty.prototype.toString = function () {
        var result = '(';
        result += "property: ".concat(this._property.toString(), ", ");
        result += ')';
        return result;
    };
    SizePrefixedMosaicProperty.TYPE_HINTS = {
        property: 'struct:MosaicProperty'
    };
    return SizePrefixedMosaicProperty;
}());
var MosaicDefinition = /** @class */ (function () {
    function MosaicDefinition() {
        this._ownerPublicKey = new PublicKey();
        this._id = new MosaicId();
        this._description = new Uint8Array();
        this._properties = [];
        this._levySize = 0;
        this._levy = new MosaicLevy();
        this._ownerPublicKeySize = 32; // reserved field
    }
    Object.defineProperty(MosaicDefinition.prototype, "ownerPublicKey", {
        get: function () {
            return this._ownerPublicKey;
        },
        set: function (value) {
            this._ownerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinition.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinition.prototype, "description", {
        get: function () {
            return this._description;
        },
        set: function (value) {
            this._description = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinition.prototype, "properties", {
        get: function () {
            return this._properties;
        },
        set: function (value) {
            this._properties = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinition.prototype, "levySize", {
        get: function () {
            return this._levySize;
        },
        set: function (value) {
            this._levySize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinition.prototype, "levy", {
        get: function () {
            return this._levy;
        },
        set: function (value) {
            this._levy = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinition.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this.ownerPublicKey.size;
            size += 4;
            size += this.id.size;
            size += 4;
            size += this._description.length;
            size += 4;
            size += arrayHelpers.size(this.properties);
            size += 4;
            if (0 !== this.levySize)
                size += this.levy.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicDefinition.deserialize = function (payload) {
        var view = new BufferView(payload);
        var ownerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== ownerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(ownerPublicKeySize, ")"));
        var ownerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(ownerPublicKey.size);
        var idSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var id = MosaicId.deserialize(view.window(idSize));
        view.shiftRight(id.size);
        var descriptionSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var description = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, descriptionSize);
        view.shiftRight(descriptionSize);
        var propertiesCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var properties = arrayHelpers.readArrayCount(view.buffer, SizePrefixedMosaicProperty, propertiesCount);
        view.shiftRight(arrayHelpers.size(properties));
        var levySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var levy;
        if (0 !== levySize) {
            levy = MosaicLevy.deserialize(view.buffer);
            view.shiftRight(levy.size);
        }
        var instance = new MosaicDefinition();
        instance._ownerPublicKey = ownerPublicKey;
        instance._id = id;
        instance._description = description;
        instance._properties = properties;
        instance._levySize = levySize;
        instance._levy = levy;
        return instance;
    };
    MosaicDefinition.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this._ownerPublicKeySize, 4, false));
        buffer.write(this._ownerPublicKey.serialize());
        buffer.write(converter.intToBytes(this.id.size, 4, false)); // bound: id_size
        buffer.write(this._id.serialize());
        buffer.write(converter.intToBytes(this._description.length, 4, false)); // bound: description_size
        buffer.write(this._description);
        buffer.write(converter.intToBytes(this._properties.length, 4, false)); // bound: properties_count
        arrayHelpers.writeArray(buffer, this._properties);
        buffer.write(converter.intToBytes(this._levySize, 4, false));
        if (0 !== this.levySize)
            buffer.write(this._levy.serialize());
        return buffer.storage;
    };
    MosaicDefinition.prototype.toString = function () {
        var result = '(';
        result += "ownerPublicKey: ".concat(this._ownerPublicKey.toString(), ", ");
        result += "id: ".concat(this._id.toString(), ", ");
        result += "description: hex(".concat(converter.uint8ToHex(this._description), "), ");
        result += "properties: [".concat(this._properties.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "levySize: ".concat('0x'.concat(this._levySize.toString(16)), ", ");
        if (0 !== this.levySize)
            result += "levy: ".concat(this._levy.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicDefinition.TYPE_HINTS = {
        ownerPublicKey: 'pod:PublicKey',
        id: 'struct:MosaicId',
        description: 'bytes_array',
        properties: 'array[SizePrefixedMosaicProperty]',
        levy: 'struct:MosaicLevy'
    };
    return MosaicDefinition;
}());
var MosaicDefinitionTransaction = /** @class */ (function () {
    function MosaicDefinitionTransaction() {
        this._type = MosaicDefinitionTransaction.TRANSACTION_TYPE;
        this._version = MosaicDefinitionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaicDefinition = new MosaicDefinition();
        this._rentalFeeSink = new Address();
        this._rentalFee = new Amount();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
        this._rentalFeeSinkSize = 40; // reserved field
    }
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "mosaicDefinition", {
        get: function () {
            return this._mosaicDefinition;
        },
        set: function (value) {
            this._mosaicDefinition = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "rentalFeeSink", {
        get: function () {
            return this._rentalFeeSink;
        },
        set: function (value) {
            this._rentalFeeSink = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "rentalFee", {
        get: function () {
            return this._rentalFee;
        },
        set: function (value) {
            this._rentalFee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.mosaicDefinition.size;
            size += 4;
            size += this.rentalFeeSink.size;
            size += this.rentalFee.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicDefinitionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaicDefinitionSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var mosaicDefinition = MosaicDefinition.deserialize(view.window(mosaicDefinitionSize));
        view.shiftRight(mosaicDefinition.size);
        var rentalFeeSinkSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== rentalFeeSinkSize)
            throw RangeError("Invalid value of reserved field (".concat(rentalFeeSinkSize, ")"));
        var rentalFeeSink = Address.deserialize(view.buffer);
        view.shiftRight(rentalFeeSink.size);
        var rentalFee = Amount.deserialize(view.buffer);
        view.shiftRight(rentalFee.size);
        var instance = new MosaicDefinitionTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaicDefinition = mosaicDefinition;
        instance._rentalFeeSink = rentalFeeSink;
        instance._rentalFee = rentalFee;
        return instance;
    };
    MosaicDefinitionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this.mosaicDefinition.size, 4, false)); // bound: mosaic_definition_size
        buffer.write(this._mosaicDefinition.serialize());
        buffer.write(converter.intToBytes(this._rentalFeeSinkSize, 4, false));
        buffer.write(this._rentalFeeSink.serialize());
        buffer.write(this._rentalFee.serialize());
        return buffer.storage;
    };
    MosaicDefinitionTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaicDefinition: ".concat(this._mosaicDefinition.toString(), ", ");
        result += "rentalFeeSink: ".concat(this._rentalFeeSink.toString(), ", ");
        result += "rentalFee: ".concat(this._rentalFee.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicDefinitionTransaction.TRANSACTION_VERSION = 1;
    MosaicDefinitionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_DEFINITION;
    MosaicDefinitionTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaicDefinition: 'struct:MosaicDefinition',
        rentalFeeSink: 'pod:Address',
        rentalFee: 'pod:Amount'
    };
    return MosaicDefinitionTransaction;
}());
var NonVerifiableMosaicDefinitionTransaction = /** @class */ (function () {
    function NonVerifiableMosaicDefinitionTransaction() {
        this._type = NonVerifiableMosaicDefinitionTransaction.TRANSACTION_TYPE;
        this._version = NonVerifiableMosaicDefinitionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaicDefinition = new MosaicDefinition();
        this._rentalFeeSink = new Address();
        this._rentalFee = new Amount();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._rentalFeeSinkSize = 40; // reserved field
    }
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "mosaicDefinition", {
        get: function () {
            return this._mosaicDefinition;
        },
        set: function (value) {
            this._mosaicDefinition = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "rentalFeeSink", {
        get: function () {
            return this._rentalFeeSink;
        },
        set: function (value) {
            this._rentalFeeSink = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "rentalFee", {
        get: function () {
            return this._rentalFee;
        },
        set: function (value) {
            this._rentalFee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicDefinitionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.mosaicDefinition.size;
            size += 4;
            size += this.rentalFeeSink.size;
            size += this.rentalFee.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableMosaicDefinitionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaicDefinitionSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var mosaicDefinition = MosaicDefinition.deserialize(view.window(mosaicDefinitionSize));
        view.shiftRight(mosaicDefinition.size);
        var rentalFeeSinkSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== rentalFeeSinkSize)
            throw RangeError("Invalid value of reserved field (".concat(rentalFeeSinkSize, ")"));
        var rentalFeeSink = Address.deserialize(view.buffer);
        view.shiftRight(rentalFeeSink.size);
        var rentalFee = Amount.deserialize(view.buffer);
        view.shiftRight(rentalFee.size);
        var instance = new NonVerifiableMosaicDefinitionTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaicDefinition = mosaicDefinition;
        instance._rentalFeeSink = rentalFeeSink;
        instance._rentalFee = rentalFee;
        return instance;
    };
    NonVerifiableMosaicDefinitionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this.mosaicDefinition.size, 4, false)); // bound: mosaic_definition_size
        buffer.write(this._mosaicDefinition.serialize());
        buffer.write(converter.intToBytes(this._rentalFeeSinkSize, 4, false));
        buffer.write(this._rentalFeeSink.serialize());
        buffer.write(this._rentalFee.serialize());
        return buffer.storage;
    };
    NonVerifiableMosaicDefinitionTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaicDefinition: ".concat(this._mosaicDefinition.toString(), ", ");
        result += "rentalFeeSink: ".concat(this._rentalFeeSink.toString(), ", ");
        result += "rentalFee: ".concat(this._rentalFee.toString(), ", ");
        result += ')';
        return result;
    };
    NonVerifiableMosaicDefinitionTransaction.TRANSACTION_VERSION = 1;
    NonVerifiableMosaicDefinitionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_DEFINITION;
    NonVerifiableMosaicDefinitionTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaicDefinition: 'struct:MosaicDefinition',
        rentalFeeSink: 'pod:Address',
        rentalFee: 'pod:Amount'
    };
    return NonVerifiableMosaicDefinitionTransaction;
}());
var MosaicSupplyChangeAction = /** @class */ (function () {
    function MosaicSupplyChangeAction(value) {
        this.value = value;
    }
    MosaicSupplyChangeAction.valueToKey = function (value) {
        var values = [
            1, 2
        ];
        var keys = [
            'INCREASE', 'DECREASE'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    MosaicSupplyChangeAction.fromValue = function (value) {
        return MosaicSupplyChangeAction[this.valueToKey(value)];
    };
    Object.defineProperty(MosaicSupplyChangeAction.prototype, "size", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    MosaicSupplyChangeAction.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 4, false));
    };
    MosaicSupplyChangeAction.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    MosaicSupplyChangeAction.prototype.toString = function () {
        return "MosaicSupplyChangeAction.".concat(MosaicSupplyChangeAction.valueToKey(this.value));
    };
    MosaicSupplyChangeAction.INCREASE = new MosaicSupplyChangeAction(1);
    MosaicSupplyChangeAction.DECREASE = new MosaicSupplyChangeAction(2);
    return MosaicSupplyChangeAction;
}());
var MosaicSupplyChangeTransaction = /** @class */ (function () {
    function MosaicSupplyChangeTransaction() {
        this._type = MosaicSupplyChangeTransaction.TRANSACTION_TYPE;
        this._version = MosaicSupplyChangeTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaicId = new MosaicId();
        this._action = MosaicSupplyChangeAction.INCREASE;
        this._delta = new Amount();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
    }
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "action", {
        get: function () {
            return this._action;
        },
        set: function (value) {
            this._action = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "delta", {
        get: function () {
            return this._delta;
        },
        set: function (value) {
            this._delta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.mosaicId.size;
            size += this.action.size;
            size += this.delta.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicSupplyChangeTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaicIdSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var mosaicId = MosaicId.deserialize(view.window(mosaicIdSize));
        view.shiftRight(mosaicId.size);
        var action = MosaicSupplyChangeAction.deserialize(view.buffer);
        view.shiftRight(action.size);
        var delta = Amount.deserialize(view.buffer);
        view.shiftRight(delta.size);
        var instance = new MosaicSupplyChangeTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaicId = mosaicId;
        instance._action = action;
        instance._delta = delta;
        return instance;
    };
    MosaicSupplyChangeTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this.mosaicId.size, 4, false)); // bound: mosaic_id_size
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._action.serialize());
        buffer.write(this._delta.serialize());
        return buffer.storage;
    };
    MosaicSupplyChangeTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "action: ".concat(this._action.toString(), ", ");
        result += "delta: ".concat(this._delta.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicSupplyChangeTransaction.TRANSACTION_VERSION = 1;
    MosaicSupplyChangeTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_SUPPLY_CHANGE;
    MosaicSupplyChangeTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaicId: 'struct:MosaicId',
        action: 'enum:MosaicSupplyChangeAction',
        delta: 'pod:Amount'
    };
    return MosaicSupplyChangeTransaction;
}());
var NonVerifiableMosaicSupplyChangeTransaction = /** @class */ (function () {
    function NonVerifiableMosaicSupplyChangeTransaction() {
        this._type = NonVerifiableMosaicSupplyChangeTransaction.TRANSACTION_TYPE;
        this._version = NonVerifiableMosaicSupplyChangeTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaicId = new MosaicId();
        this._action = MosaicSupplyChangeAction.INCREASE;
        this._delta = new Amount();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
    }
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "action", {
        get: function () {
            return this._action;
        },
        set: function (value) {
            this._action = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "delta", {
        get: function () {
            return this._delta;
        },
        set: function (value) {
            this._delta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMosaicSupplyChangeTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.mosaicId.size;
            size += this.action.size;
            size += this.delta.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableMosaicSupplyChangeTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaicIdSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var mosaicId = MosaicId.deserialize(view.window(mosaicIdSize));
        view.shiftRight(mosaicId.size);
        var action = MosaicSupplyChangeAction.deserialize(view.buffer);
        view.shiftRight(action.size);
        var delta = Amount.deserialize(view.buffer);
        view.shiftRight(delta.size);
        var instance = new NonVerifiableMosaicSupplyChangeTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaicId = mosaicId;
        instance._action = action;
        instance._delta = delta;
        return instance;
    };
    NonVerifiableMosaicSupplyChangeTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this.mosaicId.size, 4, false)); // bound: mosaic_id_size
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._action.serialize());
        buffer.write(this._delta.serialize());
        return buffer.storage;
    };
    NonVerifiableMosaicSupplyChangeTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "action: ".concat(this._action.toString(), ", ");
        result += "delta: ".concat(this._delta.toString(), ", ");
        result += ')';
        return result;
    };
    NonVerifiableMosaicSupplyChangeTransaction.TRANSACTION_VERSION = 1;
    NonVerifiableMosaicSupplyChangeTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_SUPPLY_CHANGE;
    NonVerifiableMosaicSupplyChangeTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaicId: 'struct:MosaicId',
        action: 'enum:MosaicSupplyChangeAction',
        delta: 'pod:Amount'
    };
    return NonVerifiableMosaicSupplyChangeTransaction;
}());
var MultisigAccountModificationType = /** @class */ (function () {
    function MultisigAccountModificationType(value) {
        this.value = value;
    }
    MultisigAccountModificationType.valueToKey = function (value) {
        var values = [
            1, 2
        ];
        var keys = [
            'ADD_COSIGNATORY', 'DELETE_COSIGNATORY'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    MultisigAccountModificationType.fromValue = function (value) {
        return MultisigAccountModificationType[this.valueToKey(value)];
    };
    Object.defineProperty(MultisigAccountModificationType.prototype, "size", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    MultisigAccountModificationType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 4, false));
    };
    MultisigAccountModificationType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    MultisigAccountModificationType.prototype.toString = function () {
        return "MultisigAccountModificationType.".concat(MultisigAccountModificationType.valueToKey(this.value));
    };
    MultisigAccountModificationType.ADD_COSIGNATORY = new MultisigAccountModificationType(1);
    MultisigAccountModificationType.DELETE_COSIGNATORY = new MultisigAccountModificationType(2);
    return MultisigAccountModificationType;
}());
var MultisigAccountModification = /** @class */ (function () {
    function MultisigAccountModification() {
        this._modificationType = MultisigAccountModificationType.ADD_COSIGNATORY;
        this._cosignatoryPublicKey = new PublicKey();
        this._cosignatoryPublicKeySize = 32; // reserved field
    }
    Object.defineProperty(MultisigAccountModification.prototype, "modificationType", {
        get: function () {
            return this._modificationType;
        },
        set: function (value) {
            this._modificationType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModification.prototype, "cosignatoryPublicKey", {
        get: function () {
            return this._cosignatoryPublicKey;
        },
        set: function (value) {
            this._cosignatoryPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModification.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.modificationType.size;
            size += 4;
            size += this.cosignatoryPublicKey.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MultisigAccountModification.deserialize = function (payload) {
        var view = new BufferView(payload);
        var modificationType = MultisigAccountModificationType.deserialize(view.buffer);
        view.shiftRight(modificationType.size);
        var cosignatoryPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== cosignatoryPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(cosignatoryPublicKeySize, ")"));
        var cosignatoryPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(cosignatoryPublicKey.size);
        var instance = new MultisigAccountModification();
        instance._modificationType = modificationType;
        instance._cosignatoryPublicKey = cosignatoryPublicKey;
        return instance;
    };
    MultisigAccountModification.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._modificationType.serialize());
        buffer.write(converter.intToBytes(this._cosignatoryPublicKeySize, 4, false));
        buffer.write(this._cosignatoryPublicKey.serialize());
        return buffer.storage;
    };
    MultisigAccountModification.prototype.toString = function () {
        var result = '(';
        result += "modificationType: ".concat(this._modificationType.toString(), ", ");
        result += "cosignatoryPublicKey: ".concat(this._cosignatoryPublicKey.toString(), ", ");
        result += ')';
        return result;
    };
    MultisigAccountModification.TYPE_HINTS = {
        modificationType: 'enum:MultisigAccountModificationType',
        cosignatoryPublicKey: 'pod:PublicKey'
    };
    return MultisigAccountModification;
}());
var SizePrefixedMultisigAccountModification = /** @class */ (function () {
    function SizePrefixedMultisigAccountModification() {
        this._modification = new MultisigAccountModification();
    }
    Object.defineProperty(SizePrefixedMultisigAccountModification.prototype, "modification", {
        get: function () {
            return this._modification;
        },
        set: function (value) {
            this._modification = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SizePrefixedMultisigAccountModification.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this.modification.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    SizePrefixedMultisigAccountModification.deserialize = function (payload) {
        var view = new BufferView(payload);
        var modificationSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var modification = MultisigAccountModification.deserialize(view.window(modificationSize));
        view.shiftRight(modification.size);
        var instance = new SizePrefixedMultisigAccountModification();
        instance._modification = modification;
        return instance;
    };
    SizePrefixedMultisigAccountModification.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.modification.size, 4, false)); // bound: modification_size
        buffer.write(this._modification.serialize());
        return buffer.storage;
    };
    SizePrefixedMultisigAccountModification.prototype.toString = function () {
        var result = '(';
        result += "modification: ".concat(this._modification.toString(), ", ");
        result += ')';
        return result;
    };
    SizePrefixedMultisigAccountModification.TYPE_HINTS = {
        modification: 'struct:MultisigAccountModification'
    };
    return SizePrefixedMultisigAccountModification;
}());
var MultisigAccountModificationTransactionV1 = /** @class */ (function () {
    function MultisigAccountModificationTransactionV1() {
        this._type = MultisigAccountModificationTransactionV1.TRANSACTION_TYPE;
        this._version = MultisigAccountModificationTransactionV1.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._modifications = [];
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
    }
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "modifications", {
        get: function () {
            return this._modifications;
        },
        set: function (value) {
            this._modifications = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransactionV1.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += arrayHelpers.size(this.modifications);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MultisigAccountModificationTransactionV1.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var modificationsCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var modifications = arrayHelpers.readArrayCount(view.buffer, SizePrefixedMultisigAccountModification, modificationsCount);
        view.shiftRight(arrayHelpers.size(modifications));
        var instance = new MultisigAccountModificationTransactionV1();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._modifications = modifications;
        return instance;
    };
    MultisigAccountModificationTransactionV1.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._modifications.length, 4, false)); // bound: modifications_count
        arrayHelpers.writeArray(buffer, this._modifications);
        return buffer.storage;
    };
    MultisigAccountModificationTransactionV1.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "modifications: [".concat(this._modifications.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    MultisigAccountModificationTransactionV1.TRANSACTION_VERSION = 1;
    MultisigAccountModificationTransactionV1.TRANSACTION_TYPE = TransactionType.MULTISIG_ACCOUNT_MODIFICATION;
    MultisigAccountModificationTransactionV1.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        modifications: 'array[SizePrefixedMultisigAccountModification]'
    };
    return MultisigAccountModificationTransactionV1;
}());
var NonVerifiableMultisigAccountModificationTransactionV1 = /** @class */ (function () {
    function NonVerifiableMultisigAccountModificationTransactionV1() {
        this._type = NonVerifiableMultisigAccountModificationTransactionV1.TRANSACTION_TYPE;
        this._version = NonVerifiableMultisigAccountModificationTransactionV1.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._modifications = [];
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
    }
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "modifications", {
        get: function () {
            return this._modifications;
        },
        set: function (value) {
            this._modifications = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransactionV1.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += arrayHelpers.size(this.modifications);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableMultisigAccountModificationTransactionV1.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var modificationsCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var modifications = arrayHelpers.readArrayCount(view.buffer, SizePrefixedMultisigAccountModification, modificationsCount);
        view.shiftRight(arrayHelpers.size(modifications));
        var instance = new NonVerifiableMultisigAccountModificationTransactionV1();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._modifications = modifications;
        return instance;
    };
    NonVerifiableMultisigAccountModificationTransactionV1.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._modifications.length, 4, false)); // bound: modifications_count
        arrayHelpers.writeArray(buffer, this._modifications);
        return buffer.storage;
    };
    NonVerifiableMultisigAccountModificationTransactionV1.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "modifications: [".concat(this._modifications.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    NonVerifiableMultisigAccountModificationTransactionV1.TRANSACTION_VERSION = 1;
    NonVerifiableMultisigAccountModificationTransactionV1.TRANSACTION_TYPE = TransactionType.MULTISIG_ACCOUNT_MODIFICATION;
    NonVerifiableMultisigAccountModificationTransactionV1.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        modifications: 'array[SizePrefixedMultisigAccountModification]'
    };
    return NonVerifiableMultisigAccountModificationTransactionV1;
}());
var MultisigAccountModificationTransaction = /** @class */ (function () {
    function MultisigAccountModificationTransaction() {
        this._type = MultisigAccountModificationTransaction.TRANSACTION_TYPE;
        this._version = MultisigAccountModificationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._modifications = [];
        this._minApprovalDelta = 0;
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
        this._minApprovalDeltaSize = 4; // reserved field
    }
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "modifications", {
        get: function () {
            return this._modifications;
        },
        set: function (value) {
            this._modifications = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "minApprovalDelta", {
        get: function () {
            return this._minApprovalDelta;
        },
        set: function (value) {
            this._minApprovalDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += arrayHelpers.size(this.modifications);
            size += 4;
            size += 4;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MultisigAccountModificationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var modificationsCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var modifications = arrayHelpers.readArrayCount(view.buffer, SizePrefixedMultisigAccountModification, modificationsCount);
        view.shiftRight(arrayHelpers.size(modifications));
        var minApprovalDeltaSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (4 !== minApprovalDeltaSize)
            throw RangeError("Invalid value of reserved field (".concat(minApprovalDeltaSize, ")"));
        var minApprovalDelta = converter.bytesToInt(view.buffer, 4, true);
        view.shiftRight(4);
        var instance = new MultisigAccountModificationTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._modifications = modifications;
        instance._minApprovalDelta = minApprovalDelta;
        return instance;
    };
    MultisigAccountModificationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._modifications.length, 4, false)); // bound: modifications_count
        arrayHelpers.writeArray(buffer, this._modifications);
        buffer.write(converter.intToBytes(this._minApprovalDeltaSize, 4, false));
        buffer.write(converter.intToBytes(this._minApprovalDelta, 4, true));
        return buffer.storage;
    };
    MultisigAccountModificationTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "modifications: [".concat(this._modifications.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "minApprovalDelta: ".concat('0x'.concat(this._minApprovalDelta.toString(16)), ", ");
        result += ')';
        return result;
    };
    MultisigAccountModificationTransaction.TRANSACTION_VERSION = 2;
    MultisigAccountModificationTransaction.TRANSACTION_TYPE = TransactionType.MULTISIG_ACCOUNT_MODIFICATION;
    MultisigAccountModificationTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        modifications: 'array[SizePrefixedMultisigAccountModification]'
    };
    return MultisigAccountModificationTransaction;
}());
var NonVerifiableMultisigAccountModificationTransaction = /** @class */ (function () {
    function NonVerifiableMultisigAccountModificationTransaction() {
        this._type = NonVerifiableMultisigAccountModificationTransaction.TRANSACTION_TYPE;
        this._version = NonVerifiableMultisigAccountModificationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._modifications = [];
        this._minApprovalDelta = 0;
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._minApprovalDeltaSize = 4; // reserved field
    }
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "modifications", {
        get: function () {
            return this._modifications;
        },
        set: function (value) {
            this._modifications = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "minApprovalDelta", {
        get: function () {
            return this._minApprovalDelta;
        },
        set: function (value) {
            this._minApprovalDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableMultisigAccountModificationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += arrayHelpers.size(this.modifications);
            size += 4;
            size += 4;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableMultisigAccountModificationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var modificationsCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var modifications = arrayHelpers.readArrayCount(view.buffer, SizePrefixedMultisigAccountModification, modificationsCount);
        view.shiftRight(arrayHelpers.size(modifications));
        var minApprovalDeltaSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (4 !== minApprovalDeltaSize)
            throw RangeError("Invalid value of reserved field (".concat(minApprovalDeltaSize, ")"));
        var minApprovalDelta = converter.bytesToInt(view.buffer, 4, true);
        view.shiftRight(4);
        var instance = new NonVerifiableMultisigAccountModificationTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._modifications = modifications;
        instance._minApprovalDelta = minApprovalDelta;
        return instance;
    };
    NonVerifiableMultisigAccountModificationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._modifications.length, 4, false)); // bound: modifications_count
        arrayHelpers.writeArray(buffer, this._modifications);
        buffer.write(converter.intToBytes(this._minApprovalDeltaSize, 4, false));
        buffer.write(converter.intToBytes(this._minApprovalDelta, 4, true));
        return buffer.storage;
    };
    NonVerifiableMultisigAccountModificationTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "modifications: [".concat(this._modifications.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "minApprovalDelta: ".concat('0x'.concat(this._minApprovalDelta.toString(16)), ", ");
        result += ')';
        return result;
    };
    NonVerifiableMultisigAccountModificationTransaction.TRANSACTION_VERSION = 2;
    NonVerifiableMultisigAccountModificationTransaction.TRANSACTION_TYPE = TransactionType.MULTISIG_ACCOUNT_MODIFICATION;
    NonVerifiableMultisigAccountModificationTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        modifications: 'array[SizePrefixedMultisigAccountModification]'
    };
    return NonVerifiableMultisigAccountModificationTransaction;
}());
var Cosignature = /** @class */ (function () {
    function Cosignature() {
        this._type = Cosignature.TRANSACTION_TYPE;
        this._version = Cosignature.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._multisigTransactionHash = new Hash256();
        this._multisigAccountAddress = new Address();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
        this._multisigTransactionHashOuterSize = 36; // reserved field
        this._multisigTransactionHashSize = 32; // reserved field
        this._multisigAccountAddressSize = 40; // reserved field
    }
    Object.defineProperty(Cosignature.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "multisigTransactionHash", {
        get: function () {
            return this._multisigTransactionHash;
        },
        set: function (value) {
            this._multisigTransactionHash = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "multisigAccountAddress", {
        get: function () {
            return this._multisigAccountAddress;
        },
        set: function (value) {
            this._multisigAccountAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += 4;
            size += this.multisigTransactionHash.size;
            size += 4;
            size += this.multisigAccountAddress.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Cosignature.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var multisigTransactionHashOuterSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (36 !== multisigTransactionHashOuterSize)
            throw RangeError("Invalid value of reserved field (".concat(multisigTransactionHashOuterSize, ")"));
        var multisigTransactionHashSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== multisigTransactionHashSize)
            throw RangeError("Invalid value of reserved field (".concat(multisigTransactionHashSize, ")"));
        var multisigTransactionHash = Hash256.deserialize(view.buffer);
        view.shiftRight(multisigTransactionHash.size);
        var multisigAccountAddressSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== multisigAccountAddressSize)
            throw RangeError("Invalid value of reserved field (".concat(multisigAccountAddressSize, ")"));
        var multisigAccountAddress = Address.deserialize(view.buffer);
        view.shiftRight(multisigAccountAddress.size);
        var instance = new Cosignature();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._multisigTransactionHash = multisigTransactionHash;
        instance._multisigAccountAddress = multisigAccountAddress;
        return instance;
    };
    Cosignature.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._multisigTransactionHashOuterSize, 4, false));
        buffer.write(converter.intToBytes(this._multisigTransactionHashSize, 4, false));
        buffer.write(this._multisigTransactionHash.serialize());
        buffer.write(converter.intToBytes(this._multisigAccountAddressSize, 4, false));
        buffer.write(this._multisigAccountAddress.serialize());
        return buffer.storage;
    };
    Cosignature.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "multisigTransactionHash: ".concat(this._multisigTransactionHash.toString(), ", ");
        result += "multisigAccountAddress: ".concat(this._multisigAccountAddress.toString(), ", ");
        result += ')';
        return result;
    };
    Cosignature.TRANSACTION_VERSION = 1;
    Cosignature.TRANSACTION_TYPE = TransactionType.MULTISIG_COSIGNATURE;
    Cosignature.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        multisigTransactionHash: 'pod:Hash256',
        multisigAccountAddress: 'pod:Address'
    };
    return Cosignature;
}());
var SizePrefixedCosignature = /** @class */ (function () {
    function SizePrefixedCosignature() {
        this._cosignature = new Cosignature();
    }
    Object.defineProperty(SizePrefixedCosignature.prototype, "cosignature", {
        get: function () {
            return this._cosignature;
        },
        set: function (value) {
            this._cosignature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SizePrefixedCosignature.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += this.cosignature.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    SizePrefixedCosignature.deserialize = function (payload) {
        var view = new BufferView(payload);
        var cosignatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var cosignature = Cosignature.deserialize(view.window(cosignatureSize));
        view.shiftRight(cosignature.size);
        var instance = new SizePrefixedCosignature();
        instance._cosignature = cosignature;
        return instance;
    };
    SizePrefixedCosignature.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.cosignature.size, 4, false)); // bound: cosignature_size
        buffer.write(this._cosignature.serialize());
        return buffer.storage;
    };
    SizePrefixedCosignature.prototype.toString = function () {
        var result = '(';
        result += "cosignature: ".concat(this._cosignature.toString(), ", ");
        result += ')';
        return result;
    };
    SizePrefixedCosignature.TYPE_HINTS = {
        cosignature: 'struct:Cosignature'
    };
    return SizePrefixedCosignature;
}());
var MultisigTransaction = /** @class */ (function () {
    function MultisigTransaction() {
        this._type = MultisigTransaction.TRANSACTION_TYPE;
        this._version = MultisigTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._innerTransaction = new NonVerifiableTransaction();
        this._cosignatures = [];
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
    }
    Object.defineProperty(MultisigTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "innerTransaction", {
        get: function () {
            return this._innerTransaction;
        },
        set: function (value) {
            this._innerTransaction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "cosignatures", {
        get: function () {
            return this._cosignatures;
        },
        set: function (value) {
            this._cosignatures = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.innerTransaction.size;
            size += 4;
            size += arrayHelpers.size(this.cosignatures);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MultisigTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var innerTransactionSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        // marking sizeof field
        var innerTransaction = NonVerifiableTransactionFactory.deserialize(view.window(innerTransactionSize));
        view.shiftRight(innerTransaction.size);
        var cosignaturesCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var cosignatures = arrayHelpers.readArrayCount(view.buffer, SizePrefixedCosignature, cosignaturesCount);
        view.shiftRight(arrayHelpers.size(cosignatures));
        var instance = new MultisigTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._innerTransaction = innerTransaction;
        instance._cosignatures = cosignatures;
        return instance;
    };
    MultisigTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this.innerTransaction.size, 4, false)); // bound: inner_transaction_size
        buffer.write(this._innerTransaction.serialize());
        buffer.write(converter.intToBytes(this._cosignatures.length, 4, false)); // bound: cosignatures_count
        arrayHelpers.writeArray(buffer, this._cosignatures);
        return buffer.storage;
    };
    MultisigTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "innerTransaction: ".concat(this._innerTransaction.toString(), ", ");
        result += "cosignatures: [".concat(this._cosignatures.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    MultisigTransaction.TRANSACTION_VERSION = 1;
    MultisigTransaction.TRANSACTION_TYPE = TransactionType.MULTISIG_TRANSACTION;
    MultisigTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        innerTransaction: 'struct:NonVerifiableTransaction',
        cosignatures: 'array[SizePrefixedCosignature]'
    };
    return MultisigTransaction;
}());
var NamespaceRegistrationTransaction = /** @class */ (function () {
    function NamespaceRegistrationTransaction() {
        this._type = NamespaceRegistrationTransaction.TRANSACTION_TYPE;
        this._version = NamespaceRegistrationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._rentalFeeSink = new Address();
        this._rentalFee = new Amount();
        this._name = new Uint8Array();
        this._parentName = new Uint8Array();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
        this._rentalFeeSinkSize = 40; // reserved field
    }
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "rentalFeeSink", {
        get: function () {
            return this._rentalFeeSink;
        },
        set: function (value) {
            this._rentalFeeSink = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "rentalFee", {
        get: function () {
            return this._rentalFee;
        },
        set: function (value) {
            this._rentalFee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "parentName", {
        get: function () {
            return this._parentName;
        },
        set: function (value) {
            this._parentName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.rentalFeeSink.size;
            size += this.rentalFee.size;
            size += 4;
            size += this._name.length;
            size += 4;
            if (this.parentName)
                size += this._parentName.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceRegistrationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var rentalFeeSinkSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== rentalFeeSinkSize)
            throw RangeError("Invalid value of reserved field (".concat(rentalFeeSinkSize, ")"));
        var rentalFeeSink = Address.deserialize(view.buffer);
        view.shiftRight(rentalFeeSink.size);
        var rentalFee = Amount.deserialize(view.buffer);
        view.shiftRight(rentalFee.size);
        var nameSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var name = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, nameSize);
        view.shiftRight(nameSize);
        var parentNameSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var parentName;
        if (4294967295 !== parentNameSize) {
            parentName = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, parentNameSize);
            view.shiftRight(parentNameSize);
        }
        var instance = new NamespaceRegistrationTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._rentalFeeSink = rentalFeeSink;
        instance._rentalFee = rentalFee;
        instance._name = name;
        instance._parentName = parentName;
        return instance;
    };
    NamespaceRegistrationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._rentalFeeSinkSize, 4, false));
        buffer.write(this._rentalFeeSink.serialize());
        buffer.write(this._rentalFee.serialize());
        buffer.write(converter.intToBytes(this._name.length, 4, false)); // bound: name_size
        buffer.write(this._name);
        buffer.write(converter.intToBytes((this._parentName ? this._parentName.length : 4294967295), 4, false)); // bound: parent_name_size
        if (this.parentName)
            buffer.write(this._parentName);
        return buffer.storage;
    };
    NamespaceRegistrationTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "rentalFeeSink: ".concat(this._rentalFeeSink.toString(), ", ");
        result += "rentalFee: ".concat(this._rentalFee.toString(), ", ");
        result += "name: hex(".concat(converter.uint8ToHex(this._name), "), ");
        if (this.parentName)
            result += "parentName: hex(".concat(converter.uint8ToHex(this._parentName), "), ");
        result += ')';
        return result;
    };
    NamespaceRegistrationTransaction.TRANSACTION_VERSION = 1;
    NamespaceRegistrationTransaction.TRANSACTION_TYPE = TransactionType.NAMESPACE_REGISTRATION;
    NamespaceRegistrationTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        rentalFeeSink: 'pod:Address',
        rentalFee: 'pod:Amount',
        name: 'bytes_array',
        parentName: 'bytes_array'
    };
    return NamespaceRegistrationTransaction;
}());
var NonVerifiableNamespaceRegistrationTransaction = /** @class */ (function () {
    function NonVerifiableNamespaceRegistrationTransaction() {
        this._type = NonVerifiableNamespaceRegistrationTransaction.TRANSACTION_TYPE;
        this._version = NonVerifiableNamespaceRegistrationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._rentalFeeSink = new Address();
        this._rentalFee = new Amount();
        this._name = new Uint8Array();
        this._parentName = new Uint8Array();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._rentalFeeSinkSize = 40; // reserved field
    }
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "rentalFeeSink", {
        get: function () {
            return this._rentalFeeSink;
        },
        set: function (value) {
            this._rentalFeeSink = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "rentalFee", {
        get: function () {
            return this._rentalFee;
        },
        set: function (value) {
            this._rentalFee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "parentName", {
        get: function () {
            return this._parentName;
        },
        set: function (value) {
            this._parentName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableNamespaceRegistrationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.rentalFeeSink.size;
            size += this.rentalFee.size;
            size += 4;
            size += this._name.length;
            size += 4;
            if (this.parentName)
                size += this._parentName.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableNamespaceRegistrationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var rentalFeeSinkSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== rentalFeeSinkSize)
            throw RangeError("Invalid value of reserved field (".concat(rentalFeeSinkSize, ")"));
        var rentalFeeSink = Address.deserialize(view.buffer);
        view.shiftRight(rentalFeeSink.size);
        var rentalFee = Amount.deserialize(view.buffer);
        view.shiftRight(rentalFee.size);
        var nameSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var name = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, nameSize);
        view.shiftRight(nameSize);
        var parentNameSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var parentName;
        if (4294967295 !== parentNameSize) {
            parentName = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, parentNameSize);
            view.shiftRight(parentNameSize);
        }
        var instance = new NonVerifiableNamespaceRegistrationTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._rentalFeeSink = rentalFeeSink;
        instance._rentalFee = rentalFee;
        instance._name = name;
        instance._parentName = parentName;
        return instance;
    };
    NonVerifiableNamespaceRegistrationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._rentalFeeSinkSize, 4, false));
        buffer.write(this._rentalFeeSink.serialize());
        buffer.write(this._rentalFee.serialize());
        buffer.write(converter.intToBytes(this._name.length, 4, false)); // bound: name_size
        buffer.write(this._name);
        buffer.write(converter.intToBytes((this._parentName ? this._parentName.length : 4294967295), 4, false)); // bound: parent_name_size
        if (this.parentName)
            buffer.write(this._parentName);
        return buffer.storage;
    };
    NonVerifiableNamespaceRegistrationTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "rentalFeeSink: ".concat(this._rentalFeeSink.toString(), ", ");
        result += "rentalFee: ".concat(this._rentalFee.toString(), ", ");
        result += "name: hex(".concat(converter.uint8ToHex(this._name), "), ");
        if (this.parentName)
            result += "parentName: hex(".concat(converter.uint8ToHex(this._parentName), "), ");
        result += ')';
        return result;
    };
    NonVerifiableNamespaceRegistrationTransaction.TRANSACTION_VERSION = 1;
    NonVerifiableNamespaceRegistrationTransaction.TRANSACTION_TYPE = TransactionType.NAMESPACE_REGISTRATION;
    NonVerifiableNamespaceRegistrationTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        rentalFeeSink: 'pod:Address',
        rentalFee: 'pod:Amount',
        name: 'bytes_array',
        parentName: 'bytes_array'
    };
    return NonVerifiableNamespaceRegistrationTransaction;
}());
var MessageType = /** @class */ (function () {
    function MessageType(value) {
        this.value = value;
    }
    MessageType.valueToKey = function (value) {
        var values = [
            1, 2
        ];
        var keys = [
            'PLAIN', 'ENCRYPTED'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    MessageType.fromValue = function (value) {
        return MessageType[this.valueToKey(value)];
    };
    Object.defineProperty(MessageType.prototype, "size", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    MessageType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 4, false));
    };
    MessageType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    MessageType.prototype.toString = function () {
        return "MessageType.".concat(MessageType.valueToKey(this.value));
    };
    MessageType.PLAIN = new MessageType(1);
    MessageType.ENCRYPTED = new MessageType(2);
    return MessageType;
}());
var Message = /** @class */ (function () {
    function Message() {
        this._messageType = MessageType.PLAIN;
        this._message = new Uint8Array();
    }
    Object.defineProperty(Message.prototype, "messageType", {
        get: function () {
            return this._messageType;
        },
        set: function (value) {
            this._messageType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.messageType.size;
            size += 4;
            size += this._message.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Message.deserialize = function (payload) {
        var view = new BufferView(payload);
        var messageType = MessageType.deserialize(view.buffer);
        view.shiftRight(messageType.size);
        var messageSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var message = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, messageSize);
        view.shiftRight(messageSize);
        var instance = new Message();
        instance._messageType = messageType;
        instance._message = message;
        return instance;
    };
    Message.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._messageType.serialize());
        buffer.write(converter.intToBytes(this._message.length, 4, false)); // bound: message_size
        buffer.write(this._message);
        return buffer.storage;
    };
    Message.prototype.toString = function () {
        var result = '(';
        result += "messageType: ".concat(this._messageType.toString(), ", ");
        result += "message: hex(".concat(converter.uint8ToHex(this._message), "), ");
        result += ')';
        return result;
    };
    Message.TYPE_HINTS = {
        messageType: 'enum:MessageType',
        message: 'bytes_array'
    };
    return Message;
}());
var TransferTransactionV1 = /** @class */ (function () {
    function TransferTransactionV1() {
        this._type = TransferTransactionV1.TRANSACTION_TYPE;
        this._version = TransferTransactionV1.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._recipientAddress = new Address();
        this._amount = new Amount();
        this._messageEnvelopeSize = 0;
        this._message = new Message();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
        this._recipientAddressSize = 40; // reserved field
    }
    Object.defineProperty(TransferTransactionV1.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "amount", {
        get: function () {
            return this._amount;
        },
        set: function (value) {
            this._amount = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "messageEnvelopeSize", {
        get: function () {
            return this._messageEnvelopeSize;
        },
        set: function (value) {
            this._messageEnvelopeSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransactionV1.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.recipientAddress.size;
            size += this.amount.size;
            size += 4;
            if (0 !== this.messageEnvelopeSize)
                size += this.message.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    TransferTransactionV1.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var recipientAddressSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== recipientAddressSize)
            throw RangeError("Invalid value of reserved field (".concat(recipientAddressSize, ")"));
        var recipientAddress = Address.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var amount = Amount.deserialize(view.buffer);
        view.shiftRight(amount.size);
        var messageEnvelopeSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var message;
        if (0 !== messageEnvelopeSize) {
            message = Message.deserialize(view.buffer);
            view.shiftRight(message.size);
        }
        var instance = new TransferTransactionV1();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._recipientAddress = recipientAddress;
        instance._amount = amount;
        instance._messageEnvelopeSize = messageEnvelopeSize;
        instance._message = message;
        return instance;
    };
    TransferTransactionV1.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._recipientAddressSize, 4, false));
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._amount.serialize());
        buffer.write(converter.intToBytes(this._messageEnvelopeSize, 4, false));
        if (0 !== this.messageEnvelopeSize)
            buffer.write(this._message.serialize());
        return buffer.storage;
    };
    TransferTransactionV1.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "amount: ".concat(this._amount.toString(), ", ");
        result += "messageEnvelopeSize: ".concat('0x'.concat(this._messageEnvelopeSize.toString(16)), ", ");
        if (0 !== this.messageEnvelopeSize)
            result += "message: ".concat(this._message.toString(), ", ");
        result += ')';
        return result;
    };
    TransferTransactionV1.TRANSACTION_VERSION = 1;
    TransferTransactionV1.TRANSACTION_TYPE = TransactionType.TRANSFER;
    TransferTransactionV1.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        recipientAddress: 'pod:Address',
        amount: 'pod:Amount',
        message: 'struct:Message'
    };
    return TransferTransactionV1;
}());
var NonVerifiableTransferTransactionV1 = /** @class */ (function () {
    function NonVerifiableTransferTransactionV1() {
        this._type = NonVerifiableTransferTransactionV1.TRANSACTION_TYPE;
        this._version = NonVerifiableTransferTransactionV1.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._recipientAddress = new Address();
        this._amount = new Amount();
        this._messageEnvelopeSize = 0;
        this._message = new Message();
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._recipientAddressSize = 40; // reserved field
    }
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "amount", {
        get: function () {
            return this._amount;
        },
        set: function (value) {
            this._amount = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "messageEnvelopeSize", {
        get: function () {
            return this._messageEnvelopeSize;
        },
        set: function (value) {
            this._messageEnvelopeSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransactionV1.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.recipientAddress.size;
            size += this.amount.size;
            size += 4;
            if (0 !== this.messageEnvelopeSize)
                size += this.message.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableTransferTransactionV1.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var recipientAddressSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== recipientAddressSize)
            throw RangeError("Invalid value of reserved field (".concat(recipientAddressSize, ")"));
        var recipientAddress = Address.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var amount = Amount.deserialize(view.buffer);
        view.shiftRight(amount.size);
        var messageEnvelopeSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var message;
        if (0 !== messageEnvelopeSize) {
            message = Message.deserialize(view.buffer);
            view.shiftRight(message.size);
        }
        var instance = new NonVerifiableTransferTransactionV1();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._recipientAddress = recipientAddress;
        instance._amount = amount;
        instance._messageEnvelopeSize = messageEnvelopeSize;
        instance._message = message;
        return instance;
    };
    NonVerifiableTransferTransactionV1.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._recipientAddressSize, 4, false));
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._amount.serialize());
        buffer.write(converter.intToBytes(this._messageEnvelopeSize, 4, false));
        if (0 !== this.messageEnvelopeSize)
            buffer.write(this._message.serialize());
        return buffer.storage;
    };
    NonVerifiableTransferTransactionV1.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "amount: ".concat(this._amount.toString(), ", ");
        result += "messageEnvelopeSize: ".concat('0x'.concat(this._messageEnvelopeSize.toString(16)), ", ");
        if (0 !== this.messageEnvelopeSize)
            result += "message: ".concat(this._message.toString(), ", ");
        result += ')';
        return result;
    };
    NonVerifiableTransferTransactionV1.TRANSACTION_VERSION = 1;
    NonVerifiableTransferTransactionV1.TRANSACTION_TYPE = TransactionType.TRANSFER;
    NonVerifiableTransferTransactionV1.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        recipientAddress: 'pod:Address',
        amount: 'pod:Amount',
        message: 'struct:Message'
    };
    return NonVerifiableTransferTransactionV1;
}());
var TransferTransaction = /** @class */ (function () {
    function TransferTransaction() {
        this._type = TransferTransaction.TRANSACTION_TYPE;
        this._version = TransferTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._recipientAddress = new Address();
        this._amount = new Amount();
        this._messageEnvelopeSize = 0;
        this._message = new Message();
        this._mosaics = [];
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._signatureSize = 64; // reserved field
        this._recipientAddressSize = 40; // reserved field
    }
    Object.defineProperty(TransferTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "amount", {
        get: function () {
            return this._amount;
        },
        set: function (value) {
            this._amount = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "messageEnvelopeSize", {
        get: function () {
            return this._messageEnvelopeSize;
        },
        set: function (value) {
            this._messageEnvelopeSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "mosaics", {
        get: function () {
            return this._mosaics;
        },
        set: function (value) {
            this._mosaics = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += this.signature.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.recipientAddress.size;
            size += this.amount.size;
            size += 4;
            if (0 !== this.messageEnvelopeSize)
                size += this.message.size;
            size += 4;
            size += arrayHelpers.size(this.mosaics);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    TransferTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signatureSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (64 !== signatureSize)
            throw RangeError("Invalid value of reserved field (".concat(signatureSize, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var recipientAddressSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== recipientAddressSize)
            throw RangeError("Invalid value of reserved field (".concat(recipientAddressSize, ")"));
        var recipientAddress = Address.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var amount = Amount.deserialize(view.buffer);
        view.shiftRight(amount.size);
        var messageEnvelopeSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var message;
        if (0 !== messageEnvelopeSize) {
            message = Message.deserialize(view.buffer);
            view.shiftRight(message.size);
        }
        var mosaicsCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var mosaics = arrayHelpers.readArrayCount(view.buffer, SizePrefixedMosaic, mosaicsCount);
        view.shiftRight(arrayHelpers.size(mosaics));
        var instance = new TransferTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._recipientAddress = recipientAddress;
        instance._amount = amount;
        instance._messageEnvelopeSize = messageEnvelopeSize;
        instance._message = message;
        instance._mosaics = mosaics;
        return instance;
    };
    TransferTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._signatureSize, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._recipientAddressSize, 4, false));
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._amount.serialize());
        buffer.write(converter.intToBytes(this._messageEnvelopeSize, 4, false));
        if (0 !== this.messageEnvelopeSize)
            buffer.write(this._message.serialize());
        buffer.write(converter.intToBytes(this._mosaics.length, 4, false)); // bound: mosaics_count
        arrayHelpers.writeArray(buffer, this._mosaics);
        return buffer.storage;
    };
    TransferTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "amount: ".concat(this._amount.toString(), ", ");
        result += "messageEnvelopeSize: ".concat('0x'.concat(this._messageEnvelopeSize.toString(16)), ", ");
        if (0 !== this.messageEnvelopeSize)
            result += "message: ".concat(this._message.toString(), ", ");
        result += "mosaics: [".concat(this._mosaics.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    TransferTransaction.TRANSACTION_VERSION = 2;
    TransferTransaction.TRANSACTION_TYPE = TransactionType.TRANSFER;
    TransferTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        recipientAddress: 'pod:Address',
        amount: 'pod:Amount',
        message: 'struct:Message',
        mosaics: 'array[SizePrefixedMosaic]'
    };
    return TransferTransaction;
}());
var NonVerifiableTransferTransaction = /** @class */ (function () {
    function NonVerifiableTransferTransaction() {
        this._type = NonVerifiableTransferTransaction.TRANSACTION_TYPE;
        this._version = NonVerifiableTransferTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._timestamp = new Timestamp();
        this._signerPublicKey = new PublicKey();
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._recipientAddress = new Address();
        this._amount = new Amount();
        this._messageEnvelopeSize = 0;
        this._message = new Message();
        this._mosaics = [];
        this._entityBodyReserved_1 = 0; // reserved field
        this._signerPublicKeySize = 32; // reserved field
        this._recipientAddressSize = 40; // reserved field
    }
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "amount", {
        get: function () {
            return this._amount;
        },
        set: function (value) {
            this._amount = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "messageEnvelopeSize", {
        get: function () {
            return this._messageEnvelopeSize;
        },
        set: function (value) {
            this._messageEnvelopeSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "mosaics", {
        get: function () {
            return this._mosaics;
        },
        set: function (value) {
            this._mosaics = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NonVerifiableTransferTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.type.size;
            size += 1;
            size += 2;
            size += this.network.size;
            size += this.timestamp.size;
            size += 4;
            size += this.signerPublicKey.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 4;
            size += this.recipientAddress.size;
            size += this.amount.size;
            size += 4;
            if (0 !== this.messageEnvelopeSize)
                size += this.message.size;
            size += 4;
            size += arrayHelpers.size(this.mosaics);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NonVerifiableTransferTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var timestamp = Timestamp.deserialize(view.buffer);
        view.shiftRight(timestamp.size);
        var signerPublicKeySize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (32 !== signerPublicKeySize)
            throw RangeError("Invalid value of reserved field (".concat(signerPublicKeySize, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var recipientAddressSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (40 !== recipientAddressSize)
            throw RangeError("Invalid value of reserved field (".concat(recipientAddressSize, ")"));
        var recipientAddress = Address.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var amount = Amount.deserialize(view.buffer);
        view.shiftRight(amount.size);
        var messageEnvelopeSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var message;
        if (0 !== messageEnvelopeSize) {
            message = Message.deserialize(view.buffer);
            view.shiftRight(message.size);
        }
        var mosaicsCount = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var mosaics = arrayHelpers.readArrayCount(view.buffer, SizePrefixedMosaic, mosaicsCount);
        view.shiftRight(arrayHelpers.size(mosaics));
        var instance = new NonVerifiableTransferTransaction();
        instance._type = type;
        instance._version = version;
        instance._network = network;
        instance._timestamp = timestamp;
        instance._signerPublicKey = signerPublicKey;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._recipientAddress = recipientAddress;
        instance._amount = amount;
        instance._messageEnvelopeSize = messageEnvelopeSize;
        instance._message = message;
        instance._mosaics = mosaics;
        return instance;
    };
    NonVerifiableTransferTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 2, false));
        buffer.write(this._network.serialize());
        buffer.write(this._timestamp.serialize());
        buffer.write(converter.intToBytes(this._signerPublicKeySize, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._recipientAddressSize, 4, false));
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._amount.serialize());
        buffer.write(converter.intToBytes(this._messageEnvelopeSize, 4, false));
        if (0 !== this.messageEnvelopeSize)
            buffer.write(this._message.serialize());
        buffer.write(converter.intToBytes(this._mosaics.length, 4, false)); // bound: mosaics_count
        arrayHelpers.writeArray(buffer, this._mosaics);
        return buffer.storage;
    };
    NonVerifiableTransferTransaction.prototype.toString = function () {
        var result = '(';
        result += "type: ".concat(this._type.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "timestamp: ".concat(this._timestamp.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "amount: ".concat(this._amount.toString(), ", ");
        result += "messageEnvelopeSize: ".concat('0x'.concat(this._messageEnvelopeSize.toString(16)), ", ");
        if (0 !== this.messageEnvelopeSize)
            result += "message: ".concat(this._message.toString(), ", ");
        result += "mosaics: [".concat(this._mosaics.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    NonVerifiableTransferTransaction.TRANSACTION_VERSION = 2;
    NonVerifiableTransferTransaction.TRANSACTION_TYPE = TransactionType.TRANSFER;
    NonVerifiableTransferTransaction.TYPE_HINTS = {
        type: 'enum:TransactionType',
        network: 'enum:NetworkType',
        timestamp: 'pod:Timestamp',
        signerPublicKey: 'pod:PublicKey',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        recipientAddress: 'pod:Address',
        amount: 'pod:Amount',
        message: 'struct:Message',
        mosaics: 'array[SizePrefixedMosaic]'
    };
    return NonVerifiableTransferTransaction;
}());
var TransactionFactory = /** @class */ (function () {
    function TransactionFactory() {
    }
    TransactionFactory.toKey = function (values) {
        if (1 === values.length)
            return values[0];
        // assume each key is at most 32bits
        return values.map(function (n) { return BigInt(n); }).reduce(function (accumulator, value) { return (accumulator << 32n) + value; });
    };
    TransactionFactory.deserialize = function (payload) {
        var view = new BufferView(payload);
        var parent = Transaction.deserialize(view.buffer);
        var mapping = new Map([
            [TransactionFactory.toKey([AccountKeyLinkTransaction.TRANSACTION_TYPE.value, AccountKeyLinkTransaction.TRANSACTION_VERSION]), AccountKeyLinkTransaction],
            [TransactionFactory.toKey([MosaicDefinitionTransaction.TRANSACTION_TYPE.value, MosaicDefinitionTransaction.TRANSACTION_VERSION]), MosaicDefinitionTransaction],
            [TransactionFactory.toKey([MosaicSupplyChangeTransaction.TRANSACTION_TYPE.value, MosaicSupplyChangeTransaction.TRANSACTION_VERSION]), MosaicSupplyChangeTransaction],
            [TransactionFactory.toKey([MultisigAccountModificationTransactionV1.TRANSACTION_TYPE.value, MultisigAccountModificationTransactionV1.TRANSACTION_VERSION]), MultisigAccountModificationTransactionV1],
            [TransactionFactory.toKey([MultisigAccountModificationTransaction.TRANSACTION_TYPE.value, MultisigAccountModificationTransaction.TRANSACTION_VERSION]), MultisigAccountModificationTransaction],
            [TransactionFactory.toKey([Cosignature.TRANSACTION_TYPE.value, Cosignature.TRANSACTION_VERSION]), Cosignature],
            [TransactionFactory.toKey([MultisigTransaction.TRANSACTION_TYPE.value, MultisigTransaction.TRANSACTION_VERSION]), MultisigTransaction],
            [TransactionFactory.toKey([NamespaceRegistrationTransaction.TRANSACTION_TYPE.value, NamespaceRegistrationTransaction.TRANSACTION_VERSION]), NamespaceRegistrationTransaction],
            [TransactionFactory.toKey([TransferTransactionV1.TRANSACTION_TYPE.value, TransferTransactionV1.TRANSACTION_VERSION]), TransferTransactionV1],
            [TransactionFactory.toKey([TransferTransaction.TRANSACTION_TYPE.value, TransferTransaction.TRANSACTION_VERSION]), TransferTransaction]
        ]);
        var discriminator = TransactionFactory.toKey([parent.type.value, parent.version]);
        var factory_class = mapping.get(discriminator);
        return factory_class.deserialize(view.buffer);
    };
    TransactionFactory.createByName = function (entityName) {
        var mapping = {
            account_key_link_transaction: AccountKeyLinkTransaction,
            mosaic_definition_transaction: MosaicDefinitionTransaction,
            mosaic_supply_change_transaction: MosaicSupplyChangeTransaction,
            multisig_account_modification_transaction_v1: MultisigAccountModificationTransactionV1,
            multisig_account_modification_transaction: MultisigAccountModificationTransaction,
            cosignature: Cosignature,
            multisig_transaction: MultisigTransaction,
            namespace_registration_transaction: NamespaceRegistrationTransaction,
            transfer_transaction_v1: TransferTransactionV1,
            transfer_transaction: TransferTransaction
        };
        if (!Object.prototype.hasOwnProperty.call(mapping, entityName))
            throw RangeError('unknown Transaction type');
        return new mapping[entityName]();
    };
    return TransactionFactory;
}());
var NonVerifiableTransactionFactory = /** @class */ (function () {
    function NonVerifiableTransactionFactory() {
    }
    NonVerifiableTransactionFactory.toKey = function (values) {
        if (1 === values.length)
            return values[0];
        // assume each key is at most 32bits
        return values.map(function (n) { return BigInt(n); }).reduce(function (accumulator, value) { return (accumulator << 32n) + value; });
    };
    NonVerifiableTransactionFactory.deserialize = function (payload) {
        var view = new BufferView(payload);
        var parent = NonVerifiableTransaction.deserialize(view.buffer);
        var mapping = new Map([
            [NonVerifiableTransactionFactory.toKey([NonVerifiableAccountKeyLinkTransaction.TRANSACTION_TYPE.value, NonVerifiableAccountKeyLinkTransaction.TRANSACTION_VERSION]), NonVerifiableAccountKeyLinkTransaction],
            [NonVerifiableTransactionFactory.toKey([NonVerifiableMosaicDefinitionTransaction.TRANSACTION_TYPE.value, NonVerifiableMosaicDefinitionTransaction.TRANSACTION_VERSION]), NonVerifiableMosaicDefinitionTransaction],
            [NonVerifiableTransactionFactory.toKey([NonVerifiableMosaicSupplyChangeTransaction.TRANSACTION_TYPE.value, NonVerifiableMosaicSupplyChangeTransaction.TRANSACTION_VERSION]), NonVerifiableMosaicSupplyChangeTransaction],
            [NonVerifiableTransactionFactory.toKey([NonVerifiableMultisigAccountModificationTransactionV1.TRANSACTION_TYPE.value, NonVerifiableMultisigAccountModificationTransactionV1.TRANSACTION_VERSION]), NonVerifiableMultisigAccountModificationTransactionV1],
            [NonVerifiableTransactionFactory.toKey([NonVerifiableMultisigAccountModificationTransaction.TRANSACTION_TYPE.value, NonVerifiableMultisigAccountModificationTransaction.TRANSACTION_VERSION]), NonVerifiableMultisigAccountModificationTransaction],
            [NonVerifiableTransactionFactory.toKey([NonVerifiableNamespaceRegistrationTransaction.TRANSACTION_TYPE.value, NonVerifiableNamespaceRegistrationTransaction.TRANSACTION_VERSION]), NonVerifiableNamespaceRegistrationTransaction],
            [NonVerifiableTransactionFactory.toKey([NonVerifiableTransferTransactionV1.TRANSACTION_TYPE.value, NonVerifiableTransferTransactionV1.TRANSACTION_VERSION]), NonVerifiableTransferTransactionV1],
            [NonVerifiableTransactionFactory.toKey([NonVerifiableTransferTransaction.TRANSACTION_TYPE.value, NonVerifiableTransferTransaction.TRANSACTION_VERSION]), NonVerifiableTransferTransaction]
        ]);
        var discriminator = NonVerifiableTransactionFactory.toKey([parent.type.value, parent.version]);
        var factory_class = mapping.get(discriminator);
        return factory_class.deserialize(view.buffer);
    };
    NonVerifiableTransactionFactory.createByName = function (entityName) {
        var mapping = {
            non_verifiable_account_key_link_transaction: NonVerifiableAccountKeyLinkTransaction,
            non_verifiable_mosaic_definition_transaction: NonVerifiableMosaicDefinitionTransaction,
            non_verifiable_mosaic_supply_change_transaction: NonVerifiableMosaicSupplyChangeTransaction,
            non_verifiable_multisig_account_modification_transaction_v1: NonVerifiableMultisigAccountModificationTransactionV1,
            non_verifiable_multisig_account_modification_transaction: NonVerifiableMultisigAccountModificationTransaction,
            non_verifiable_namespace_registration_transaction: NonVerifiableNamespaceRegistrationTransaction,
            non_verifiable_transfer_transaction_v1: NonVerifiableTransferTransactionV1,
            non_verifiable_transfer_transaction: NonVerifiableTransferTransaction
        };
        if (!Object.prototype.hasOwnProperty.call(mapping, entityName))
            throw RangeError('unknown NonVerifiableTransaction type');
        return new mapping[entityName]();
    };
    return NonVerifiableTransactionFactory;
}());
module.exports = {
    Amount: Amount,
    Height: Height,
    Timestamp: Timestamp,
    Address: Address,
    Hash256: Hash256,
    PublicKey: PublicKey,
    Signature: Signature,
    NetworkType: NetworkType,
    TransactionType: TransactionType,
    Transaction: Transaction,
    NonVerifiableTransaction: NonVerifiableTransaction,
    LinkAction: LinkAction,
    AccountKeyLinkTransaction: AccountKeyLinkTransaction,
    NonVerifiableAccountKeyLinkTransaction: NonVerifiableAccountKeyLinkTransaction,
    NamespaceId: NamespaceId,
    MosaicId: MosaicId,
    Mosaic: Mosaic,
    SizePrefixedMosaic: SizePrefixedMosaic,
    MosaicTransferFeeType: MosaicTransferFeeType,
    MosaicLevy: MosaicLevy,
    MosaicProperty: MosaicProperty,
    SizePrefixedMosaicProperty: SizePrefixedMosaicProperty,
    MosaicDefinition: MosaicDefinition,
    MosaicDefinitionTransaction: MosaicDefinitionTransaction,
    NonVerifiableMosaicDefinitionTransaction: NonVerifiableMosaicDefinitionTransaction,
    MosaicSupplyChangeAction: MosaicSupplyChangeAction,
    MosaicSupplyChangeTransaction: MosaicSupplyChangeTransaction,
    NonVerifiableMosaicSupplyChangeTransaction: NonVerifiableMosaicSupplyChangeTransaction,
    MultisigAccountModificationType: MultisigAccountModificationType,
    MultisigAccountModification: MultisigAccountModification,
    SizePrefixedMultisigAccountModification: SizePrefixedMultisigAccountModification,
    MultisigAccountModificationTransactionV1: MultisigAccountModificationTransactionV1,
    NonVerifiableMultisigAccountModificationTransactionV1: NonVerifiableMultisigAccountModificationTransactionV1,
    MultisigAccountModificationTransaction: MultisigAccountModificationTransaction,
    NonVerifiableMultisigAccountModificationTransaction: NonVerifiableMultisigAccountModificationTransaction,
    Cosignature: Cosignature,
    SizePrefixedCosignature: SizePrefixedCosignature,
    MultisigTransaction: MultisigTransaction,
    NamespaceRegistrationTransaction: NamespaceRegistrationTransaction,
    NonVerifiableNamespaceRegistrationTransaction: NonVerifiableNamespaceRegistrationTransaction,
    MessageType: MessageType,
    Message: Message,
    TransferTransactionV1: TransferTransactionV1,
    NonVerifiableTransferTransactionV1: NonVerifiableTransferTransactionV1,
    TransferTransaction: TransferTransaction,
    NonVerifiableTransferTransaction: NonVerifiableTransferTransaction,
    TransactionFactory: TransactionFactory,
    NonVerifiableTransactionFactory: NonVerifiableTransactionFactory
};
