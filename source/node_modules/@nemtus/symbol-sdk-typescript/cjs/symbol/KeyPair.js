"use strict";
var _a = require('../CryptoTypes'), PrivateKey = _a.PrivateKey, PublicKey = _a.PublicKey, Signature = _a.Signature;
var tweetnacl = require('tweetnacl');
/**
 * Represents an ED25519 private and public key.
 */
var KeyPair = /** @class */ (function () {
    /**
     * Creates a key pair from a private key.
     * @param {PrivateKey} privateKey Private key.
     */
    function KeyPair(privateKey) {
        this._privateKey = privateKey;
        this._keyPair = tweetnacl.sign.keyPair.fromSeed(this._privateKey.bytes);
    }
    Object.defineProperty(KeyPair.prototype, "publicKey", {
        /**
         * Gets the public key.
         * @returns {PublicKey} Public key.
         */
        get: function () {
            return new PublicKey(this._keyPair.publicKey);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KeyPair.prototype, "privateKey", {
        /**
         * Gets the private key.
         * @returns {PrivateKey} Private key.
         */
        get: function () {
            return new PrivateKey(this._privateKey.bytes);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Signs a message with the private key.
     * @param {Uint8Array} message Message to sign.
     * @returns {Signature} Message signature.
     */
    KeyPair.prototype.sign = function (message) {
        return new Signature(tweetnacl.sign.detached(message, this._keyPair.secretKey));
    };
    return KeyPair;
}());
/**
 * Verifies signatures signed by a single key pair.
 */
var Verifier = /** @class */ (function () {
    /**
     * Creates a verifier from a public key.
     * @param {PublicKey} publicKey Public key.
     */
    function Verifier(publicKey) {
        this.publicKey = publicKey;
    }
    /**
     * Verifies a message signature.
     * @param {Uint8Array} message Message to verify.
     * @param {Signature} signature Signature to verify.
     * @returns {boolean} true if the message signature verifies.
     */
    Verifier.prototype.verify = function (message, signature) {
        return tweetnacl.sign.detached.verify(message, signature.bytes, this.publicKey.bytes);
    };
    return Verifier;
}());
module.exports = { KeyPair: KeyPair, Verifier: Verifier };
