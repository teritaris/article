"use strict";
var Hash256 = require('../CryptoTypes').Hash256;
var sha3_256 = require('@noble/hashes/sha3').sha3_256;
/**
 * Builder for creating a merkle hash.
 */
var MerkleHashBuilder = /** @class */ (function () {
    /**
     * Creates a merkle hash builder.
     */
    function MerkleHashBuilder() {
        this.hashes = [];
    }
    /**
     * Adds a hash to the merkle hash.""
     * @param {Hash256} componentHash Hash to add.
     */
    MerkleHashBuilder.prototype.update = function (componentHash) {
        this.hashes.push(componentHash.bytes);
    };
    /**
     * Calculates the merkle hash.
     * @returns {Hash256} Merkle hash.
     */
    MerkleHashBuilder.prototype.final = function () {
        if (0 === this.hashes.length)
            return Hash256.zero();
        var numRemainingHashes = this.hashes.length;
        while (1 < numRemainingHashes) {
            var i = 0;
            while (i < numRemainingHashes) {
                var hasher = sha3_256.create();
                hasher.update(this.hashes[i]);
                if (i + 1 < numRemainingHashes) {
                    hasher.update(this.hashes[i + 1]);
                }
                else {
                    // if there is an odd number of hashes, duplicate the last one
                    hasher.update(this.hashes[i]);
                    numRemainingHashes += 1;
                }
                this.hashes[Math.trunc(i / 2)] = hasher.digest();
                i += 2;
            }
            numRemainingHashes = Math.trunc(numRemainingHashes / 2);
        }
        return new Hash256(this.hashes[0]);
    };
    return MerkleHashBuilder;
}());
module.exports = { MerkleHashBuilder: MerkleHashBuilder };
