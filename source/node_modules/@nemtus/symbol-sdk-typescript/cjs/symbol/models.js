"use strict";
/* eslint-disable max-len, object-property-newline, no-underscore-dangle, no-use-before-define */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseValue = require('../BaseValue').BaseValue;
var ByteArray = require('../ByteArray').ByteArray;
var BufferView = require('../utils/BufferView').BufferView;
var Writer = require('../utils/Writer').Writer;
var arrayHelpers = require('../utils/arrayHelpers');
var converter = require('../utils/converter');
var Amount = /** @class */ (function (_super) {
    __extends(Amount, _super);
    function Amount(amount) {
        if (amount === void 0) { amount = 0n; }
        return _super.call(this, Amount.SIZE, amount) || this;
    }
    Amount.deserialize = function (payload) {
        var byteArray = payload;
        return new Amount(converter.bytesToInt(byteArray, 8, false));
    };
    Amount.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    Amount.SIZE = 8;
    return Amount;
}(BaseValue));
var BlockDuration = /** @class */ (function (_super) {
    __extends(BlockDuration, _super);
    function BlockDuration(blockDuration) {
        if (blockDuration === void 0) { blockDuration = 0n; }
        return _super.call(this, BlockDuration.SIZE, blockDuration) || this;
    }
    BlockDuration.deserialize = function (payload) {
        var byteArray = payload;
        return new BlockDuration(converter.bytesToInt(byteArray, 8, false));
    };
    BlockDuration.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    BlockDuration.SIZE = 8;
    return BlockDuration;
}(BaseValue));
var BlockFeeMultiplier = /** @class */ (function (_super) {
    __extends(BlockFeeMultiplier, _super);
    function BlockFeeMultiplier(blockFeeMultiplier) {
        if (blockFeeMultiplier === void 0) { blockFeeMultiplier = 0; }
        return _super.call(this, BlockFeeMultiplier.SIZE, blockFeeMultiplier) || this;
    }
    BlockFeeMultiplier.deserialize = function (payload) {
        var byteArray = payload;
        return new BlockFeeMultiplier(converter.bytesToInt(byteArray, 4, false));
    };
    BlockFeeMultiplier.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    BlockFeeMultiplier.SIZE = 4;
    return BlockFeeMultiplier;
}(BaseValue));
var Difficulty = /** @class */ (function (_super) {
    __extends(Difficulty, _super);
    function Difficulty(difficulty) {
        if (difficulty === void 0) { difficulty = 0n; }
        return _super.call(this, Difficulty.SIZE, difficulty) || this;
    }
    Difficulty.deserialize = function (payload) {
        var byteArray = payload;
        return new Difficulty(converter.bytesToInt(byteArray, 8, false));
    };
    Difficulty.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    Difficulty.SIZE = 8;
    return Difficulty;
}(BaseValue));
var FinalizationEpoch = /** @class */ (function (_super) {
    __extends(FinalizationEpoch, _super);
    function FinalizationEpoch(finalizationEpoch) {
        if (finalizationEpoch === void 0) { finalizationEpoch = 0; }
        return _super.call(this, FinalizationEpoch.SIZE, finalizationEpoch) || this;
    }
    FinalizationEpoch.deserialize = function (payload) {
        var byteArray = payload;
        return new FinalizationEpoch(converter.bytesToInt(byteArray, 4, false));
    };
    FinalizationEpoch.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    FinalizationEpoch.SIZE = 4;
    return FinalizationEpoch;
}(BaseValue));
var FinalizationPoint = /** @class */ (function (_super) {
    __extends(FinalizationPoint, _super);
    function FinalizationPoint(finalizationPoint) {
        if (finalizationPoint === void 0) { finalizationPoint = 0; }
        return _super.call(this, FinalizationPoint.SIZE, finalizationPoint) || this;
    }
    FinalizationPoint.deserialize = function (payload) {
        var byteArray = payload;
        return new FinalizationPoint(converter.bytesToInt(byteArray, 4, false));
    };
    FinalizationPoint.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    FinalizationPoint.SIZE = 4;
    return FinalizationPoint;
}(BaseValue));
var Height = /** @class */ (function (_super) {
    __extends(Height, _super);
    function Height(height) {
        if (height === void 0) { height = 0n; }
        return _super.call(this, Height.SIZE, height) || this;
    }
    Height.deserialize = function (payload) {
        var byteArray = payload;
        return new Height(converter.bytesToInt(byteArray, 8, false));
    };
    Height.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    Height.SIZE = 8;
    return Height;
}(BaseValue));
var Importance = /** @class */ (function (_super) {
    __extends(Importance, _super);
    function Importance(importance) {
        if (importance === void 0) { importance = 0n; }
        return _super.call(this, Importance.SIZE, importance) || this;
    }
    Importance.deserialize = function (payload) {
        var byteArray = payload;
        return new Importance(converter.bytesToInt(byteArray, 8, false));
    };
    Importance.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    Importance.SIZE = 8;
    return Importance;
}(BaseValue));
var ImportanceHeight = /** @class */ (function (_super) {
    __extends(ImportanceHeight, _super);
    function ImportanceHeight(importanceHeight) {
        if (importanceHeight === void 0) { importanceHeight = 0n; }
        return _super.call(this, ImportanceHeight.SIZE, importanceHeight) || this;
    }
    ImportanceHeight.deserialize = function (payload) {
        var byteArray = payload;
        return new ImportanceHeight(converter.bytesToInt(byteArray, 8, false));
    };
    ImportanceHeight.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    ImportanceHeight.SIZE = 8;
    return ImportanceHeight;
}(BaseValue));
var UnresolvedMosaicId = /** @class */ (function (_super) {
    __extends(UnresolvedMosaicId, _super);
    function UnresolvedMosaicId(unresolvedMosaicId) {
        if (unresolvedMosaicId === void 0) { unresolvedMosaicId = 0n; }
        return _super.call(this, UnresolvedMosaicId.SIZE, unresolvedMosaicId) || this;
    }
    UnresolvedMosaicId.deserialize = function (payload) {
        var byteArray = payload;
        return new UnresolvedMosaicId(converter.bytesToInt(byteArray, 8, false));
    };
    UnresolvedMosaicId.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    UnresolvedMosaicId.SIZE = 8;
    return UnresolvedMosaicId;
}(BaseValue));
var MosaicId = /** @class */ (function (_super) {
    __extends(MosaicId, _super);
    function MosaicId(mosaicId) {
        if (mosaicId === void 0) { mosaicId = 0n; }
        return _super.call(this, MosaicId.SIZE, mosaicId) || this;
    }
    MosaicId.deserialize = function (payload) {
        var byteArray = payload;
        return new MosaicId(converter.bytesToInt(byteArray, 8, false));
    };
    MosaicId.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    MosaicId.SIZE = 8;
    return MosaicId;
}(BaseValue));
var Timestamp = /** @class */ (function (_super) {
    __extends(Timestamp, _super);
    function Timestamp(timestamp) {
        if (timestamp === void 0) { timestamp = 0n; }
        return _super.call(this, Timestamp.SIZE, timestamp) || this;
    }
    Timestamp.deserialize = function (payload) {
        var byteArray = payload;
        return new Timestamp(converter.bytesToInt(byteArray, 8, false));
    };
    Timestamp.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    Timestamp.SIZE = 8;
    return Timestamp;
}(BaseValue));
var UnresolvedAddress = /** @class */ (function (_super) {
    __extends(UnresolvedAddress, _super);
    function UnresolvedAddress(unresolvedAddress) {
        if (unresolvedAddress === void 0) { unresolvedAddress = new Uint8Array(24); }
        return _super.call(this, UnresolvedAddress.SIZE, unresolvedAddress) || this;
    }
    Object.defineProperty(UnresolvedAddress.prototype, "size", {
        get: function () {
            return 24;
        },
        enumerable: false,
        configurable: true
    });
    UnresolvedAddress.deserialize = function (payload) {
        var byteArray = payload;
        return new UnresolvedAddress(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 24));
    };
    UnresolvedAddress.prototype.serialize = function () {
        return this.bytes;
    };
    UnresolvedAddress.SIZE = 24;
    return UnresolvedAddress;
}(ByteArray));
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    function Address(address) {
        if (address === void 0) { address = new Uint8Array(24); }
        return _super.call(this, Address.SIZE, address) || this;
    }
    Object.defineProperty(Address.prototype, "size", {
        get: function () {
            return 24;
        },
        enumerable: false,
        configurable: true
    });
    Address.deserialize = function (payload) {
        var byteArray = payload;
        return new Address(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 24));
    };
    Address.prototype.serialize = function () {
        return this.bytes;
    };
    Address.SIZE = 24;
    return Address;
}(ByteArray));
var Hash256 = /** @class */ (function (_super) {
    __extends(Hash256, _super);
    function Hash256(hash256) {
        if (hash256 === void 0) { hash256 = new Uint8Array(32); }
        return _super.call(this, Hash256.SIZE, hash256) || this;
    }
    Object.defineProperty(Hash256.prototype, "size", {
        get: function () {
            return 32;
        },
        enumerable: false,
        configurable: true
    });
    Hash256.deserialize = function (payload) {
        var byteArray = payload;
        return new Hash256(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 32));
    };
    Hash256.prototype.serialize = function () {
        return this.bytes;
    };
    Hash256.SIZE = 32;
    return Hash256;
}(ByteArray));
var Hash512 = /** @class */ (function (_super) {
    __extends(Hash512, _super);
    function Hash512(hash512) {
        if (hash512 === void 0) { hash512 = new Uint8Array(64); }
        return _super.call(this, Hash512.SIZE, hash512) || this;
    }
    Object.defineProperty(Hash512.prototype, "size", {
        get: function () {
            return 64;
        },
        enumerable: false,
        configurable: true
    });
    Hash512.deserialize = function (payload) {
        var byteArray = payload;
        return new Hash512(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 64));
    };
    Hash512.prototype.serialize = function () {
        return this.bytes;
    };
    Hash512.SIZE = 64;
    return Hash512;
}(ByteArray));
var PublicKey = /** @class */ (function (_super) {
    __extends(PublicKey, _super);
    function PublicKey(publicKey) {
        if (publicKey === void 0) { publicKey = new Uint8Array(32); }
        return _super.call(this, PublicKey.SIZE, publicKey) || this;
    }
    Object.defineProperty(PublicKey.prototype, "size", {
        get: function () {
            return 32;
        },
        enumerable: false,
        configurable: true
    });
    PublicKey.deserialize = function (payload) {
        var byteArray = payload;
        return new PublicKey(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 32));
    };
    PublicKey.prototype.serialize = function () {
        return this.bytes;
    };
    PublicKey.SIZE = 32;
    return PublicKey;
}(ByteArray));
var VotingPublicKey = /** @class */ (function (_super) {
    __extends(VotingPublicKey, _super);
    function VotingPublicKey(votingPublicKey) {
        if (votingPublicKey === void 0) { votingPublicKey = new Uint8Array(32); }
        return _super.call(this, VotingPublicKey.SIZE, votingPublicKey) || this;
    }
    Object.defineProperty(VotingPublicKey.prototype, "size", {
        get: function () {
            return 32;
        },
        enumerable: false,
        configurable: true
    });
    VotingPublicKey.deserialize = function (payload) {
        var byteArray = payload;
        return new VotingPublicKey(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 32));
    };
    VotingPublicKey.prototype.serialize = function () {
        return this.bytes;
    };
    VotingPublicKey.SIZE = 32;
    return VotingPublicKey;
}(ByteArray));
var Signature = /** @class */ (function (_super) {
    __extends(Signature, _super);
    function Signature(signature) {
        if (signature === void 0) { signature = new Uint8Array(64); }
        return _super.call(this, Signature.SIZE, signature) || this;
    }
    Object.defineProperty(Signature.prototype, "size", {
        get: function () {
            return 64;
        },
        enumerable: false,
        configurable: true
    });
    Signature.deserialize = function (payload) {
        var byteArray = payload;
        return new Signature(new Uint8Array(byteArray.buffer, byteArray.byteOffset, 64));
    };
    Signature.prototype.serialize = function () {
        return this.bytes;
    };
    Signature.SIZE = 64;
    return Signature;
}(ByteArray));
var Mosaic = /** @class */ (function () {
    function Mosaic() {
        this._mosaicId = new MosaicId();
        this._amount = new Amount();
    }
    Object.defineProperty(Mosaic.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mosaic.prototype, "amount", {
        get: function () {
            return this._amount;
        },
        set: function (value) {
            this._amount = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Mosaic.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.mosaicId.size;
            size += this.amount.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Mosaic.deserialize = function (payload) {
        var view = new BufferView(payload);
        var mosaicId = MosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var amount = Amount.deserialize(view.buffer);
        view.shiftRight(amount.size);
        var instance = new Mosaic();
        instance._mosaicId = mosaicId;
        instance._amount = amount;
        return instance;
    };
    Mosaic.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._amount.serialize());
        return buffer.storage;
    };
    Mosaic.prototype.toString = function () {
        var result = '(';
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "amount: ".concat(this._amount.toString(), ", ");
        result += ')';
        return result;
    };
    Mosaic.TYPE_HINTS = {
        mosaicId: 'pod:MosaicId',
        amount: 'pod:Amount'
    };
    return Mosaic;
}());
var UnresolvedMosaic = /** @class */ (function () {
    function UnresolvedMosaic() {
        this._mosaicId = new UnresolvedMosaicId();
        this._amount = new Amount();
    }
    Object.defineProperty(UnresolvedMosaic.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnresolvedMosaic.prototype, "amount", {
        get: function () {
            return this._amount;
        },
        set: function (value) {
            this._amount = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnresolvedMosaic.prototype, "size", {
        get: function () {
            var size = 0;
            size += this.mosaicId.size;
            size += this.amount.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    UnresolvedMosaic.deserialize = function (payload) {
        var view = new BufferView(payload);
        var mosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var amount = Amount.deserialize(view.buffer);
        view.shiftRight(amount.size);
        var instance = new UnresolvedMosaic();
        instance._mosaicId = mosaicId;
        instance._amount = amount;
        return instance;
    };
    UnresolvedMosaic.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._amount.serialize());
        return buffer.storage;
    };
    UnresolvedMosaic.prototype.toString = function () {
        var result = '(';
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "amount: ".concat(this._amount.toString(), ", ");
        result += ')';
        return result;
    };
    UnresolvedMosaic.TYPE_HINTS = {
        mosaicId: 'pod:UnresolvedMosaicId',
        amount: 'pod:Amount'
    };
    return UnresolvedMosaic;
}());
var LinkAction = /** @class */ (function () {
    function LinkAction(value) {
        this.value = value;
    }
    LinkAction.valueToKey = function (value) {
        var values = [
            0, 1
        ];
        var keys = [
            'UNLINK', 'LINK'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    LinkAction.fromValue = function (value) {
        return LinkAction[this.valueToKey(value)];
    };
    Object.defineProperty(LinkAction.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    LinkAction.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    LinkAction.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    LinkAction.prototype.toString = function () {
        return "LinkAction.".concat(LinkAction.valueToKey(this.value));
    };
    LinkAction.UNLINK = new LinkAction(0);
    LinkAction.LINK = new LinkAction(1);
    return LinkAction;
}());
var NetworkType = /** @class */ (function () {
    function NetworkType(value) {
        this.value = value;
    }
    NetworkType.valueToKey = function (value) {
        var values = [
            104, 152
        ];
        var keys = [
            'MAINNET', 'TESTNET'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    NetworkType.fromValue = function (value) {
        return NetworkType[this.valueToKey(value)];
    };
    Object.defineProperty(NetworkType.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    NetworkType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    NetworkType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    NetworkType.prototype.toString = function () {
        return "NetworkType.".concat(NetworkType.valueToKey(this.value));
    };
    NetworkType.MAINNET = new NetworkType(104);
    NetworkType.TESTNET = new NetworkType(152);
    return NetworkType;
}());
var TransactionType = /** @class */ (function () {
    function TransactionType(value) {
        this.value = value;
    }
    TransactionType.valueToKey = function (value) {
        var values = [
            16716, 16972, 16705, 16961, 16707, 16963, 16712, 16722, 16978, 16708, 16964, 17220, 16717, 16973, 17229, 16725, 16974, 17230,
            16718, 16720, 16976, 17232, 16977, 16721, 16724
        ];
        var keys = [
            'ACCOUNT_KEY_LINK', 'NODE_KEY_LINK', 'AGGREGATE_COMPLETE', 'AGGREGATE_BONDED', 'VOTING_KEY_LINK', 'VRF_KEY_LINK', 'HASH_LOCK',
            'SECRET_LOCK', 'SECRET_PROOF', 'ACCOUNT_METADATA', 'MOSAIC_METADATA', 'NAMESPACE_METADATA', 'MOSAIC_DEFINITION',
            'MOSAIC_SUPPLY_CHANGE', 'MOSAIC_SUPPLY_REVOCATION', 'MULTISIG_ACCOUNT_MODIFICATION', 'ADDRESS_ALIAS', 'MOSAIC_ALIAS',
            'NAMESPACE_REGISTRATION', 'ACCOUNT_ADDRESS_RESTRICTION', 'ACCOUNT_MOSAIC_RESTRICTION', 'ACCOUNT_OPERATION_RESTRICTION',
            'MOSAIC_ADDRESS_RESTRICTION', 'MOSAIC_GLOBAL_RESTRICTION', 'TRANSFER'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    TransactionType.fromValue = function (value) {
        return TransactionType[this.valueToKey(value)];
    };
    Object.defineProperty(TransactionType.prototype, "size", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    TransactionType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 2, false));
    };
    TransactionType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 2, false);
    };
    TransactionType.prototype.toString = function () {
        return "TransactionType.".concat(TransactionType.valueToKey(this.value));
    };
    TransactionType.ACCOUNT_KEY_LINK = new TransactionType(16716);
    TransactionType.NODE_KEY_LINK = new TransactionType(16972);
    TransactionType.AGGREGATE_COMPLETE = new TransactionType(16705);
    TransactionType.AGGREGATE_BONDED = new TransactionType(16961);
    TransactionType.VOTING_KEY_LINK = new TransactionType(16707);
    TransactionType.VRF_KEY_LINK = new TransactionType(16963);
    TransactionType.HASH_LOCK = new TransactionType(16712);
    TransactionType.SECRET_LOCK = new TransactionType(16722);
    TransactionType.SECRET_PROOF = new TransactionType(16978);
    TransactionType.ACCOUNT_METADATA = new TransactionType(16708);
    TransactionType.MOSAIC_METADATA = new TransactionType(16964);
    TransactionType.NAMESPACE_METADATA = new TransactionType(17220);
    TransactionType.MOSAIC_DEFINITION = new TransactionType(16717);
    TransactionType.MOSAIC_SUPPLY_CHANGE = new TransactionType(16973);
    TransactionType.MOSAIC_SUPPLY_REVOCATION = new TransactionType(17229);
    TransactionType.MULTISIG_ACCOUNT_MODIFICATION = new TransactionType(16725);
    TransactionType.ADDRESS_ALIAS = new TransactionType(16974);
    TransactionType.MOSAIC_ALIAS = new TransactionType(17230);
    TransactionType.NAMESPACE_REGISTRATION = new TransactionType(16718);
    TransactionType.ACCOUNT_ADDRESS_RESTRICTION = new TransactionType(16720);
    TransactionType.ACCOUNT_MOSAIC_RESTRICTION = new TransactionType(16976);
    TransactionType.ACCOUNT_OPERATION_RESTRICTION = new TransactionType(17232);
    TransactionType.MOSAIC_ADDRESS_RESTRICTION = new TransactionType(16977);
    TransactionType.MOSAIC_GLOBAL_RESTRICTION = new TransactionType(16721);
    TransactionType.TRANSFER = new TransactionType(16724);
    return TransactionType;
}());
var Transaction = /** @class */ (function () {
    function Transaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = 0;
        this._network = NetworkType.MAINNET;
        this._type = TransactionType.ACCOUNT_KEY_LINK;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(Transaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Transaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var instance = new Transaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        return instance;
    };
    Transaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        return buffer.storage;
    };
    Transaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += ')';
        return result;
    };
    Transaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp'
    };
    return Transaction;
}());
var EmbeddedTransaction = /** @class */ (function () {
    function EmbeddedTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = 0;
        this._network = NetworkType.MAINNET;
        this._type = TransactionType.ACCOUNT_KEY_LINK;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var instance = new EmbeddedTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        return instance;
    };
    EmbeddedTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        return buffer.storage;
    };
    EmbeddedTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType'
    };
    return EmbeddedTransaction;
}());
var AccountKeyLinkTransaction = /** @class */ (function () {
    function AccountKeyLinkTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AccountKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AccountKeyLinkTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._linkedPublicKey = new PublicKey();
        this._linkAction = LinkAction.UNLINK;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.linkedPublicKey.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AccountKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var linkedPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new AccountKeyLinkTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._linkedPublicKey = linkedPublicKey;
        instance._linkAction = linkAction;
        return instance;
    };
    AccountKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    AccountKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    AccountKeyLinkTransaction.TRANSACTION_VERSION = 1;
    AccountKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_KEY_LINK;
    AccountKeyLinkTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        linkedPublicKey: 'pod:PublicKey',
        linkAction: 'enum:LinkAction'
    };
    return AccountKeyLinkTransaction;
}());
var EmbeddedAccountKeyLinkTransaction = /** @class */ (function () {
    function EmbeddedAccountKeyLinkTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedAccountKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedAccountKeyLinkTransaction.TRANSACTION_TYPE;
        this._linkedPublicKey = new PublicKey();
        this._linkAction = LinkAction.UNLINK;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedAccountKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.linkedPublicKey.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedAccountKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var linkedPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new EmbeddedAccountKeyLinkTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._linkedPublicKey = linkedPublicKey;
        instance._linkAction = linkAction;
        return instance;
    };
    EmbeddedAccountKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    EmbeddedAccountKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedAccountKeyLinkTransaction.TRANSACTION_VERSION = 1;
    EmbeddedAccountKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_KEY_LINK;
    EmbeddedAccountKeyLinkTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        linkedPublicKey: 'pod:PublicKey',
        linkAction: 'enum:LinkAction'
    };
    return EmbeddedAccountKeyLinkTransaction;
}());
var NodeKeyLinkTransaction = /** @class */ (function () {
    function NodeKeyLinkTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = NodeKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = NodeKeyLinkTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._linkedPublicKey = new PublicKey();
        this._linkAction = LinkAction.UNLINK;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.linkedPublicKey.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NodeKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var linkedPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new NodeKeyLinkTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._linkedPublicKey = linkedPublicKey;
        instance._linkAction = linkAction;
        return instance;
    };
    NodeKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    NodeKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    NodeKeyLinkTransaction.TRANSACTION_VERSION = 1;
    NodeKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.NODE_KEY_LINK;
    NodeKeyLinkTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        linkedPublicKey: 'pod:PublicKey',
        linkAction: 'enum:LinkAction'
    };
    return NodeKeyLinkTransaction;
}());
var EmbeddedNodeKeyLinkTransaction = /** @class */ (function () {
    function EmbeddedNodeKeyLinkTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedNodeKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedNodeKeyLinkTransaction.TRANSACTION_TYPE;
        this._linkedPublicKey = new PublicKey();
        this._linkAction = LinkAction.UNLINK;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedNodeKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNodeKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNodeKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNodeKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNodeKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNodeKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNodeKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.linkedPublicKey.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedNodeKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var linkedPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new EmbeddedNodeKeyLinkTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._linkedPublicKey = linkedPublicKey;
        instance._linkAction = linkAction;
        return instance;
    };
    EmbeddedNodeKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    EmbeddedNodeKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedNodeKeyLinkTransaction.TRANSACTION_VERSION = 1;
    EmbeddedNodeKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.NODE_KEY_LINK;
    EmbeddedNodeKeyLinkTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        linkedPublicKey: 'pod:PublicKey',
        linkAction: 'enum:LinkAction'
    };
    return EmbeddedNodeKeyLinkTransaction;
}());
var Cosignature = /** @class */ (function () {
    function Cosignature() {
        this._version = 0n;
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
    }
    Object.defineProperty(Cosignature.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Cosignature.prototype, "size", {
        get: function () {
            var size = 0;
            size += 8;
            size += this.signerPublicKey.size;
            size += this.signature.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    Cosignature.deserialize = function (payload) {
        var view = new BufferView(payload);
        var version = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var instance = new Cosignature();
        instance._version = version;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        return instance;
    };
    Cosignature.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this._version, 8, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._signature.serialize());
        return buffer.storage;
    };
    Cosignature.prototype.toString = function () {
        var result = '(';
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += ')';
        return result;
    };
    Cosignature.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature'
    };
    return Cosignature;
}());
var DetachedCosignature = /** @class */ (function () {
    function DetachedCosignature() {
        this._version = 0n;
        this._signerPublicKey = new PublicKey();
        this._signature = new Signature();
        this._parentHash = new Hash256();
    }
    Object.defineProperty(DetachedCosignature.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DetachedCosignature.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DetachedCosignature.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DetachedCosignature.prototype, "parentHash", {
        get: function () {
            return this._parentHash;
        },
        set: function (value) {
            this._parentHash = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DetachedCosignature.prototype, "size", {
        get: function () {
            var size = 0;
            size += 8;
            size += this.signerPublicKey.size;
            size += this.signature.size;
            size += this.parentHash.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    DetachedCosignature.deserialize = function (payload) {
        var view = new BufferView(payload);
        var version = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var parentHash = Hash256.deserialize(view.buffer);
        view.shiftRight(parentHash.size);
        var instance = new DetachedCosignature();
        instance._version = version;
        instance._signerPublicKey = signerPublicKey;
        instance._signature = signature;
        instance._parentHash = parentHash;
        return instance;
    };
    DetachedCosignature.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this._version, 8, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(this._signature.serialize());
        buffer.write(this._parentHash.serialize());
        return buffer.storage;
    };
    DetachedCosignature.prototype.toString = function () {
        var result = '(';
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "parentHash: ".concat(this._parentHash.toString(), ", ");
        result += ')';
        return result;
    };
    DetachedCosignature.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        signature: 'pod:Signature',
        parentHash: 'pod:Hash256'
    };
    return DetachedCosignature;
}());
var AggregateCompleteTransaction = /** @class */ (function () {
    function AggregateCompleteTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AggregateCompleteTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AggregateCompleteTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._transactionsHash = new Hash256();
        this._transactions = [];
        this._cosignatures = [];
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._aggregateTransactionHeaderReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AggregateCompleteTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "transactionsHash", {
        get: function () {
            return this._transactionsHash;
        },
        set: function (value) {
            this._transactionsHash = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "transactions", {
        get: function () {
            return this._transactions;
        },
        set: function (value) {
            this._transactions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "cosignatures", {
        get: function () {
            return this._cosignatures;
        },
        set: function (value) {
            this._cosignatures = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateCompleteTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.transactionsHash.size;
            size += 4;
            size += 4;
            size += arrayHelpers.size(this.transactions, 8, false);
            size += arrayHelpers.size(this.cosignatures);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AggregateCompleteTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var transactionsHash = Hash256.deserialize(view.buffer);
        view.shiftRight(transactionsHash.size);
        var payloadSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var aggregateTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== aggregateTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(aggregateTransactionHeaderReserved_1, ")"));
        var transactions = arrayHelpers.readVariableSizeElements(view.window(payloadSize), EmbeddedTransactionFactory, 8, false);
        view.shiftRight(payloadSize);
        var cosignatures = arrayHelpers.readArray(view.buffer, Cosignature);
        view.shiftRight(arrayHelpers.size(cosignatures));
        var instance = new AggregateCompleteTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._transactionsHash = transactionsHash;
        instance._transactions = transactions;
        instance._cosignatures = cosignatures;
        return instance;
    };
    AggregateCompleteTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._transactionsHash.serialize());
        buffer.write(converter.intToBytes(arrayHelpers.size(this.transactions, 8, false), 4, false)); // bound: payload_size
        buffer.write(converter.intToBytes(this._aggregateTransactionHeaderReserved_1, 4, false));
        arrayHelpers.writeVariableSizeElements(buffer, this._transactions, 8, false);
        arrayHelpers.writeArray(buffer, this._cosignatures);
        return buffer.storage;
    };
    AggregateCompleteTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "transactionsHash: ".concat(this._transactionsHash.toString(), ", ");
        result += "transactions: [".concat(this._transactions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "cosignatures: [".concat(this._cosignatures.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    AggregateCompleteTransaction.TRANSACTION_VERSION = 1;
    AggregateCompleteTransaction.TRANSACTION_TYPE = TransactionType.AGGREGATE_COMPLETE;
    AggregateCompleteTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        transactionsHash: 'pod:Hash256',
        transactions: 'array[EmbeddedTransaction]',
        cosignatures: 'array[Cosignature]'
    };
    return AggregateCompleteTransaction;
}());
var AggregateBondedTransaction = /** @class */ (function () {
    function AggregateBondedTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AggregateBondedTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AggregateBondedTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._transactionsHash = new Hash256();
        this._transactions = [];
        this._cosignatures = [];
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._aggregateTransactionHeaderReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AggregateBondedTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "transactionsHash", {
        get: function () {
            return this._transactionsHash;
        },
        set: function (value) {
            this._transactionsHash = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "transactions", {
        get: function () {
            return this._transactions;
        },
        set: function (value) {
            this._transactions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "cosignatures", {
        get: function () {
            return this._cosignatures;
        },
        set: function (value) {
            this._cosignatures = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AggregateBondedTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.transactionsHash.size;
            size += 4;
            size += 4;
            size += arrayHelpers.size(this.transactions, 8, false);
            size += arrayHelpers.size(this.cosignatures);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AggregateBondedTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var transactionsHash = Hash256.deserialize(view.buffer);
        view.shiftRight(transactionsHash.size);
        var payloadSize = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        var aggregateTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== aggregateTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(aggregateTransactionHeaderReserved_1, ")"));
        var transactions = arrayHelpers.readVariableSizeElements(view.window(payloadSize), EmbeddedTransactionFactory, 8, false);
        view.shiftRight(payloadSize);
        var cosignatures = arrayHelpers.readArray(view.buffer, Cosignature);
        view.shiftRight(arrayHelpers.size(cosignatures));
        var instance = new AggregateBondedTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._transactionsHash = transactionsHash;
        instance._transactions = transactions;
        instance._cosignatures = cosignatures;
        return instance;
    };
    AggregateBondedTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._transactionsHash.serialize());
        buffer.write(converter.intToBytes(arrayHelpers.size(this.transactions, 8, false), 4, false)); // bound: payload_size
        buffer.write(converter.intToBytes(this._aggregateTransactionHeaderReserved_1, 4, false));
        arrayHelpers.writeVariableSizeElements(buffer, this._transactions, 8, false);
        arrayHelpers.writeArray(buffer, this._cosignatures);
        return buffer.storage;
    };
    AggregateBondedTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "transactionsHash: ".concat(this._transactionsHash.toString(), ", ");
        result += "transactions: [".concat(this._transactions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "cosignatures: [".concat(this._cosignatures.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    AggregateBondedTransaction.TRANSACTION_VERSION = 1;
    AggregateBondedTransaction.TRANSACTION_TYPE = TransactionType.AGGREGATE_BONDED;
    AggregateBondedTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        transactionsHash: 'pod:Hash256',
        transactions: 'array[EmbeddedTransaction]',
        cosignatures: 'array[Cosignature]'
    };
    return AggregateBondedTransaction;
}());
var VotingKeyLinkTransaction = /** @class */ (function () {
    function VotingKeyLinkTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = VotingKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = VotingKeyLinkTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._linkedPublicKey = new VotingPublicKey();
        this._startEpoch = new FinalizationEpoch();
        this._endEpoch = new FinalizationEpoch();
        this._linkAction = LinkAction.UNLINK;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "startEpoch", {
        get: function () {
            return this._startEpoch;
        },
        set: function (value) {
            this._startEpoch = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "endEpoch", {
        get: function () {
            return this._endEpoch;
        },
        set: function (value) {
            this._endEpoch = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VotingKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.linkedPublicKey.size;
            size += this.startEpoch.size;
            size += this.endEpoch.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    VotingKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var linkedPublicKey = VotingPublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var startEpoch = FinalizationEpoch.deserialize(view.buffer);
        view.shiftRight(startEpoch.size);
        var endEpoch = FinalizationEpoch.deserialize(view.buffer);
        view.shiftRight(endEpoch.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new VotingKeyLinkTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._linkedPublicKey = linkedPublicKey;
        instance._startEpoch = startEpoch;
        instance._endEpoch = endEpoch;
        instance._linkAction = linkAction;
        return instance;
    };
    VotingKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._startEpoch.serialize());
        buffer.write(this._endEpoch.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    VotingKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "startEpoch: ".concat(this._startEpoch.toString(), ", ");
        result += "endEpoch: ".concat(this._endEpoch.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    VotingKeyLinkTransaction.TRANSACTION_VERSION = 1;
    VotingKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.VOTING_KEY_LINK;
    VotingKeyLinkTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        linkedPublicKey: 'pod:VotingPublicKey',
        startEpoch: 'pod:FinalizationEpoch',
        endEpoch: 'pod:FinalizationEpoch',
        linkAction: 'enum:LinkAction'
    };
    return VotingKeyLinkTransaction;
}());
var EmbeddedVotingKeyLinkTransaction = /** @class */ (function () {
    function EmbeddedVotingKeyLinkTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedVotingKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedVotingKeyLinkTransaction.TRANSACTION_TYPE;
        this._linkedPublicKey = new VotingPublicKey();
        this._startEpoch = new FinalizationEpoch();
        this._endEpoch = new FinalizationEpoch();
        this._linkAction = LinkAction.UNLINK;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "startEpoch", {
        get: function () {
            return this._startEpoch;
        },
        set: function (value) {
            this._startEpoch = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "endEpoch", {
        get: function () {
            return this._endEpoch;
        },
        set: function (value) {
            this._endEpoch = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVotingKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.linkedPublicKey.size;
            size += this.startEpoch.size;
            size += this.endEpoch.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedVotingKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var linkedPublicKey = VotingPublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var startEpoch = FinalizationEpoch.deserialize(view.buffer);
        view.shiftRight(startEpoch.size);
        var endEpoch = FinalizationEpoch.deserialize(view.buffer);
        view.shiftRight(endEpoch.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new EmbeddedVotingKeyLinkTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._linkedPublicKey = linkedPublicKey;
        instance._startEpoch = startEpoch;
        instance._endEpoch = endEpoch;
        instance._linkAction = linkAction;
        return instance;
    };
    EmbeddedVotingKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._startEpoch.serialize());
        buffer.write(this._endEpoch.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    EmbeddedVotingKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "startEpoch: ".concat(this._startEpoch.toString(), ", ");
        result += "endEpoch: ".concat(this._endEpoch.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedVotingKeyLinkTransaction.TRANSACTION_VERSION = 1;
    EmbeddedVotingKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.VOTING_KEY_LINK;
    EmbeddedVotingKeyLinkTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        linkedPublicKey: 'pod:VotingPublicKey',
        startEpoch: 'pod:FinalizationEpoch',
        endEpoch: 'pod:FinalizationEpoch',
        linkAction: 'enum:LinkAction'
    };
    return EmbeddedVotingKeyLinkTransaction;
}());
var VrfKeyLinkTransaction = /** @class */ (function () {
    function VrfKeyLinkTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = VrfKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = VrfKeyLinkTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._linkedPublicKey = new PublicKey();
        this._linkAction = LinkAction.UNLINK;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VrfKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.linkedPublicKey.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    VrfKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var linkedPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new VrfKeyLinkTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._linkedPublicKey = linkedPublicKey;
        instance._linkAction = linkAction;
        return instance;
    };
    VrfKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    VrfKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    VrfKeyLinkTransaction.TRANSACTION_VERSION = 1;
    VrfKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.VRF_KEY_LINK;
    VrfKeyLinkTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        linkedPublicKey: 'pod:PublicKey',
        linkAction: 'enum:LinkAction'
    };
    return VrfKeyLinkTransaction;
}());
var EmbeddedVrfKeyLinkTransaction = /** @class */ (function () {
    function EmbeddedVrfKeyLinkTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedVrfKeyLinkTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedVrfKeyLinkTransaction.TRANSACTION_TYPE;
        this._linkedPublicKey = new PublicKey();
        this._linkAction = LinkAction.UNLINK;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedVrfKeyLinkTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVrfKeyLinkTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVrfKeyLinkTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVrfKeyLinkTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVrfKeyLinkTransaction.prototype, "linkedPublicKey", {
        get: function () {
            return this._linkedPublicKey;
        },
        set: function (value) {
            this._linkedPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVrfKeyLinkTransaction.prototype, "linkAction", {
        get: function () {
            return this._linkAction;
        },
        set: function (value) {
            this._linkAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedVrfKeyLinkTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.linkedPublicKey.size;
            size += this.linkAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedVrfKeyLinkTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var linkedPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(linkedPublicKey.size);
        var linkAction = LinkAction.deserialize(view.buffer);
        view.shiftRight(linkAction.size);
        var instance = new EmbeddedVrfKeyLinkTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._linkedPublicKey = linkedPublicKey;
        instance._linkAction = linkAction;
        return instance;
    };
    EmbeddedVrfKeyLinkTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._linkedPublicKey.serialize());
        buffer.write(this._linkAction.serialize());
        return buffer.storage;
    };
    EmbeddedVrfKeyLinkTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "linkedPublicKey: ".concat(this._linkedPublicKey.toString(), ", ");
        result += "linkAction: ".concat(this._linkAction.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedVrfKeyLinkTransaction.TRANSACTION_VERSION = 1;
    EmbeddedVrfKeyLinkTransaction.TRANSACTION_TYPE = TransactionType.VRF_KEY_LINK;
    EmbeddedVrfKeyLinkTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        linkedPublicKey: 'pod:PublicKey',
        linkAction: 'enum:LinkAction'
    };
    return EmbeddedVrfKeyLinkTransaction;
}());
var HashLockTransaction = /** @class */ (function () {
    function HashLockTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = HashLockTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = HashLockTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaic = new UnresolvedMosaic();
        this._duration = new BlockDuration();
        this._hash = new Hash256();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(HashLockTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "mosaic", {
        get: function () {
            return this._mosaic;
        },
        set: function (value) {
            this._mosaic = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "hash", {
        get: function () {
            return this._hash;
        },
        set: function (value) {
            this._hash = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HashLockTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.mosaic.size;
            size += this.duration.size;
            size += this.hash.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    HashLockTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaic = UnresolvedMosaic.deserialize(view.buffer);
        view.shiftRight(mosaic.size);
        var duration = BlockDuration.deserialize(view.buffer);
        view.shiftRight(duration.size);
        var hash = Hash256.deserialize(view.buffer);
        view.shiftRight(hash.size);
        var instance = new HashLockTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaic = mosaic;
        instance._duration = duration;
        instance._hash = hash;
        return instance;
    };
    HashLockTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._mosaic.serialize());
        buffer.write(this._duration.serialize());
        buffer.write(this._hash.serialize());
        return buffer.storage;
    };
    HashLockTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaic: ".concat(this._mosaic.toString(), ", ");
        result += "duration: ".concat(this._duration.toString(), ", ");
        result += "hash: ".concat(this._hash.toString(), ", ");
        result += ')';
        return result;
    };
    HashLockTransaction.TRANSACTION_VERSION = 1;
    HashLockTransaction.TRANSACTION_TYPE = TransactionType.HASH_LOCK;
    HashLockTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaic: 'struct:UnresolvedMosaic',
        duration: 'pod:BlockDuration',
        hash: 'pod:Hash256'
    };
    return HashLockTransaction;
}());
var EmbeddedHashLockTransaction = /** @class */ (function () {
    function EmbeddedHashLockTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedHashLockTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedHashLockTransaction.TRANSACTION_TYPE;
        this._mosaic = new UnresolvedMosaic();
        this._duration = new BlockDuration();
        this._hash = new Hash256();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "mosaic", {
        get: function () {
            return this._mosaic;
        },
        set: function (value) {
            this._mosaic = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "hash", {
        get: function () {
            return this._hash;
        },
        set: function (value) {
            this._hash = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedHashLockTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.mosaic.size;
            size += this.duration.size;
            size += this.hash.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedHashLockTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var mosaic = UnresolvedMosaic.deserialize(view.buffer);
        view.shiftRight(mosaic.size);
        var duration = BlockDuration.deserialize(view.buffer);
        view.shiftRight(duration.size);
        var hash = Hash256.deserialize(view.buffer);
        view.shiftRight(hash.size);
        var instance = new EmbeddedHashLockTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._mosaic = mosaic;
        instance._duration = duration;
        instance._hash = hash;
        return instance;
    };
    EmbeddedHashLockTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._mosaic.serialize());
        buffer.write(this._duration.serialize());
        buffer.write(this._hash.serialize());
        return buffer.storage;
    };
    EmbeddedHashLockTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "mosaic: ".concat(this._mosaic.toString(), ", ");
        result += "duration: ".concat(this._duration.toString(), ", ");
        result += "hash: ".concat(this._hash.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedHashLockTransaction.TRANSACTION_VERSION = 1;
    EmbeddedHashLockTransaction.TRANSACTION_TYPE = TransactionType.HASH_LOCK;
    EmbeddedHashLockTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        mosaic: 'struct:UnresolvedMosaic',
        duration: 'pod:BlockDuration',
        hash: 'pod:Hash256'
    };
    return EmbeddedHashLockTransaction;
}());
var LockHashAlgorithm = /** @class */ (function () {
    function LockHashAlgorithm(value) {
        this.value = value;
    }
    LockHashAlgorithm.valueToKey = function (value) {
        var values = [
            0, 1, 2
        ];
        var keys = [
            'SHA3_256', 'HASH_160', 'HASH_256'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    LockHashAlgorithm.fromValue = function (value) {
        return LockHashAlgorithm[this.valueToKey(value)];
    };
    Object.defineProperty(LockHashAlgorithm.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    LockHashAlgorithm.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    LockHashAlgorithm.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    LockHashAlgorithm.prototype.toString = function () {
        return "LockHashAlgorithm.".concat(LockHashAlgorithm.valueToKey(this.value));
    };
    LockHashAlgorithm.SHA3_256 = new LockHashAlgorithm(0);
    LockHashAlgorithm.HASH_160 = new LockHashAlgorithm(1);
    LockHashAlgorithm.HASH_256 = new LockHashAlgorithm(2);
    return LockHashAlgorithm;
}());
var SecretLockTransaction = /** @class */ (function () {
    function SecretLockTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = SecretLockTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = SecretLockTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._recipientAddress = new UnresolvedAddress();
        this._secret = new Hash256();
        this._mosaic = new UnresolvedMosaic();
        this._duration = new BlockDuration();
        this._hashAlgorithm = LockHashAlgorithm.SHA3_256;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(SecretLockTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "secret", {
        get: function () {
            return this._secret;
        },
        set: function (value) {
            this._secret = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "mosaic", {
        get: function () {
            return this._mosaic;
        },
        set: function (value) {
            this._mosaic = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "hashAlgorithm", {
        get: function () {
            return this._hashAlgorithm;
        },
        set: function (value) {
            this._hashAlgorithm = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretLockTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.recipientAddress.size;
            size += this.secret.size;
            size += this.mosaic.size;
            size += this.duration.size;
            size += this.hashAlgorithm.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    SecretLockTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var recipientAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var secret = Hash256.deserialize(view.buffer);
        view.shiftRight(secret.size);
        var mosaic = UnresolvedMosaic.deserialize(view.buffer);
        view.shiftRight(mosaic.size);
        var duration = BlockDuration.deserialize(view.buffer);
        view.shiftRight(duration.size);
        var hashAlgorithm = LockHashAlgorithm.deserialize(view.buffer);
        view.shiftRight(hashAlgorithm.size);
        var instance = new SecretLockTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._recipientAddress = recipientAddress;
        instance._secret = secret;
        instance._mosaic = mosaic;
        instance._duration = duration;
        instance._hashAlgorithm = hashAlgorithm;
        return instance;
    };
    SecretLockTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._secret.serialize());
        buffer.write(this._mosaic.serialize());
        buffer.write(this._duration.serialize());
        buffer.write(this._hashAlgorithm.serialize());
        return buffer.storage;
    };
    SecretLockTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "secret: ".concat(this._secret.toString(), ", ");
        result += "mosaic: ".concat(this._mosaic.toString(), ", ");
        result += "duration: ".concat(this._duration.toString(), ", ");
        result += "hashAlgorithm: ".concat(this._hashAlgorithm.toString(), ", ");
        result += ')';
        return result;
    };
    SecretLockTransaction.TRANSACTION_VERSION = 1;
    SecretLockTransaction.TRANSACTION_TYPE = TransactionType.SECRET_LOCK;
    SecretLockTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        recipientAddress: 'pod:UnresolvedAddress',
        secret: 'pod:Hash256',
        mosaic: 'struct:UnresolvedMosaic',
        duration: 'pod:BlockDuration',
        hashAlgorithm: 'enum:LockHashAlgorithm'
    };
    return SecretLockTransaction;
}());
var EmbeddedSecretLockTransaction = /** @class */ (function () {
    function EmbeddedSecretLockTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedSecretLockTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedSecretLockTransaction.TRANSACTION_TYPE;
        this._recipientAddress = new UnresolvedAddress();
        this._secret = new Hash256();
        this._mosaic = new UnresolvedMosaic();
        this._duration = new BlockDuration();
        this._hashAlgorithm = LockHashAlgorithm.SHA3_256;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "secret", {
        get: function () {
            return this._secret;
        },
        set: function (value) {
            this._secret = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "mosaic", {
        get: function () {
            return this._mosaic;
        },
        set: function (value) {
            this._mosaic = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "hashAlgorithm", {
        get: function () {
            return this._hashAlgorithm;
        },
        set: function (value) {
            this._hashAlgorithm = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretLockTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.recipientAddress.size;
            size += this.secret.size;
            size += this.mosaic.size;
            size += this.duration.size;
            size += this.hashAlgorithm.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedSecretLockTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var recipientAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var secret = Hash256.deserialize(view.buffer);
        view.shiftRight(secret.size);
        var mosaic = UnresolvedMosaic.deserialize(view.buffer);
        view.shiftRight(mosaic.size);
        var duration = BlockDuration.deserialize(view.buffer);
        view.shiftRight(duration.size);
        var hashAlgorithm = LockHashAlgorithm.deserialize(view.buffer);
        view.shiftRight(hashAlgorithm.size);
        var instance = new EmbeddedSecretLockTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._recipientAddress = recipientAddress;
        instance._secret = secret;
        instance._mosaic = mosaic;
        instance._duration = duration;
        instance._hashAlgorithm = hashAlgorithm;
        return instance;
    };
    EmbeddedSecretLockTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._secret.serialize());
        buffer.write(this._mosaic.serialize());
        buffer.write(this._duration.serialize());
        buffer.write(this._hashAlgorithm.serialize());
        return buffer.storage;
    };
    EmbeddedSecretLockTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "secret: ".concat(this._secret.toString(), ", ");
        result += "mosaic: ".concat(this._mosaic.toString(), ", ");
        result += "duration: ".concat(this._duration.toString(), ", ");
        result += "hashAlgorithm: ".concat(this._hashAlgorithm.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedSecretLockTransaction.TRANSACTION_VERSION = 1;
    EmbeddedSecretLockTransaction.TRANSACTION_TYPE = TransactionType.SECRET_LOCK;
    EmbeddedSecretLockTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        recipientAddress: 'pod:UnresolvedAddress',
        secret: 'pod:Hash256',
        mosaic: 'struct:UnresolvedMosaic',
        duration: 'pod:BlockDuration',
        hashAlgorithm: 'enum:LockHashAlgorithm'
    };
    return EmbeddedSecretLockTransaction;
}());
var SecretProofTransaction = /** @class */ (function () {
    function SecretProofTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = SecretProofTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = SecretProofTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._recipientAddress = new UnresolvedAddress();
        this._secret = new Hash256();
        this._hashAlgorithm = LockHashAlgorithm.SHA3_256;
        this._proof = new Uint8Array();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(SecretProofTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "secret", {
        get: function () {
            return this._secret;
        },
        set: function (value) {
            this._secret = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "hashAlgorithm", {
        get: function () {
            return this._hashAlgorithm;
        },
        set: function (value) {
            this._hashAlgorithm = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "proof", {
        get: function () {
            return this._proof;
        },
        set: function (value) {
            this._proof = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SecretProofTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.recipientAddress.size;
            size += this.secret.size;
            size += 2;
            size += this.hashAlgorithm.size;
            size += this._proof.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    SecretProofTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var recipientAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var secret = Hash256.deserialize(view.buffer);
        view.shiftRight(secret.size);
        var proofSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var hashAlgorithm = LockHashAlgorithm.deserialize(view.buffer);
        view.shiftRight(hashAlgorithm.size);
        var proof = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, proofSize);
        view.shiftRight(proofSize);
        var instance = new SecretProofTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._recipientAddress = recipientAddress;
        instance._secret = secret;
        instance._hashAlgorithm = hashAlgorithm;
        instance._proof = proof;
        return instance;
    };
    SecretProofTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._secret.serialize());
        buffer.write(converter.intToBytes(this._proof.length, 2, false)); // bound: proof_size
        buffer.write(this._hashAlgorithm.serialize());
        buffer.write(this._proof);
        return buffer.storage;
    };
    SecretProofTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "secret: ".concat(this._secret.toString(), ", ");
        result += "hashAlgorithm: ".concat(this._hashAlgorithm.toString(), ", ");
        result += "proof: hex(".concat(converter.uint8ToHex(this._proof), "), ");
        result += ')';
        return result;
    };
    SecretProofTransaction.TRANSACTION_VERSION = 1;
    SecretProofTransaction.TRANSACTION_TYPE = TransactionType.SECRET_PROOF;
    SecretProofTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        recipientAddress: 'pod:UnresolvedAddress',
        secret: 'pod:Hash256',
        hashAlgorithm: 'enum:LockHashAlgorithm',
        proof: 'bytes_array'
    };
    return SecretProofTransaction;
}());
var EmbeddedSecretProofTransaction = /** @class */ (function () {
    function EmbeddedSecretProofTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedSecretProofTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedSecretProofTransaction.TRANSACTION_TYPE;
        this._recipientAddress = new UnresolvedAddress();
        this._secret = new Hash256();
        this._hashAlgorithm = LockHashAlgorithm.SHA3_256;
        this._proof = new Uint8Array();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "secret", {
        get: function () {
            return this._secret;
        },
        set: function (value) {
            this._secret = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "hashAlgorithm", {
        get: function () {
            return this._hashAlgorithm;
        },
        set: function (value) {
            this._hashAlgorithm = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "proof", {
        get: function () {
            return this._proof;
        },
        set: function (value) {
            this._proof = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedSecretProofTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.recipientAddress.size;
            size += this.secret.size;
            size += 2;
            size += this.hashAlgorithm.size;
            size += this._proof.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedSecretProofTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var recipientAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var secret = Hash256.deserialize(view.buffer);
        view.shiftRight(secret.size);
        var proofSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var hashAlgorithm = LockHashAlgorithm.deserialize(view.buffer);
        view.shiftRight(hashAlgorithm.size);
        var proof = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, proofSize);
        view.shiftRight(proofSize);
        var instance = new EmbeddedSecretProofTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._recipientAddress = recipientAddress;
        instance._secret = secret;
        instance._hashAlgorithm = hashAlgorithm;
        instance._proof = proof;
        return instance;
    };
    EmbeddedSecretProofTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._recipientAddress.serialize());
        buffer.write(this._secret.serialize());
        buffer.write(converter.intToBytes(this._proof.length, 2, false)); // bound: proof_size
        buffer.write(this._hashAlgorithm.serialize());
        buffer.write(this._proof);
        return buffer.storage;
    };
    EmbeddedSecretProofTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "secret: ".concat(this._secret.toString(), ", ");
        result += "hashAlgorithm: ".concat(this._hashAlgorithm.toString(), ", ");
        result += "proof: hex(".concat(converter.uint8ToHex(this._proof), "), ");
        result += ')';
        return result;
    };
    EmbeddedSecretProofTransaction.TRANSACTION_VERSION = 1;
    EmbeddedSecretProofTransaction.TRANSACTION_TYPE = TransactionType.SECRET_PROOF;
    EmbeddedSecretProofTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        recipientAddress: 'pod:UnresolvedAddress',
        secret: 'pod:Hash256',
        hashAlgorithm: 'enum:LockHashAlgorithm',
        proof: 'bytes_array'
    };
    return EmbeddedSecretProofTransaction;
}());
var AccountMetadataTransaction = /** @class */ (function () {
    function AccountMetadataTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AccountMetadataTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AccountMetadataTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._targetAddress = new UnresolvedAddress();
        this._scopedMetadataKey = 0n;
        this._valueSizeDelta = 0;
        this._value = new Uint8Array();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AccountMetadataTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "scopedMetadataKey", {
        get: function () {
            return this._scopedMetadataKey;
        },
        set: function (value) {
            this._scopedMetadataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "valueSizeDelta", {
        get: function () {
            return this._valueSizeDelta;
        },
        set: function (value) {
            this._valueSizeDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMetadataTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.targetAddress.size;
            size += 8;
            size += 2;
            size += 2;
            size += this._value.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AccountMetadataTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var scopedMetadataKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var valueSizeDelta = converter.bytesToInt(view.buffer, 2, true);
        view.shiftRight(2);
        var valueSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var value = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, valueSize);
        view.shiftRight(valueSize);
        var instance = new AccountMetadataTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._targetAddress = targetAddress;
        instance._scopedMetadataKey = scopedMetadataKey;
        instance._valueSizeDelta = valueSizeDelta;
        instance._value = value;
        return instance;
    };
    AccountMetadataTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._targetAddress.serialize());
        buffer.write(converter.intToBytes(this._scopedMetadataKey, 8, false));
        buffer.write(converter.intToBytes(this._valueSizeDelta, 2, true));
        buffer.write(converter.intToBytes(this._value.length, 2, false)); // bound: value_size
        buffer.write(this._value);
        return buffer.storage;
    };
    AccountMetadataTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += "scopedMetadataKey: ".concat('0x'.concat(this._scopedMetadataKey.toString(16)), ", ");
        result += "valueSizeDelta: ".concat('0x'.concat(this._valueSizeDelta.toString(16)), ", ");
        result += "value: hex(".concat(converter.uint8ToHex(this._value), "), ");
        result += ')';
        return result;
    };
    AccountMetadataTransaction.TRANSACTION_VERSION = 1;
    AccountMetadataTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_METADATA;
    AccountMetadataTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        targetAddress: 'pod:UnresolvedAddress',
        value: 'bytes_array'
    };
    return AccountMetadataTransaction;
}());
var EmbeddedAccountMetadataTransaction = /** @class */ (function () {
    function EmbeddedAccountMetadataTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedAccountMetadataTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedAccountMetadataTransaction.TRANSACTION_TYPE;
        this._targetAddress = new UnresolvedAddress();
        this._scopedMetadataKey = 0n;
        this._valueSizeDelta = 0;
        this._value = new Uint8Array();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "scopedMetadataKey", {
        get: function () {
            return this._scopedMetadataKey;
        },
        set: function (value) {
            this._scopedMetadataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "valueSizeDelta", {
        get: function () {
            return this._valueSizeDelta;
        },
        set: function (value) {
            this._valueSizeDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMetadataTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.targetAddress.size;
            size += 8;
            size += 2;
            size += 2;
            size += this._value.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedAccountMetadataTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var scopedMetadataKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var valueSizeDelta = converter.bytesToInt(view.buffer, 2, true);
        view.shiftRight(2);
        var valueSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var value = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, valueSize);
        view.shiftRight(valueSize);
        var instance = new EmbeddedAccountMetadataTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._targetAddress = targetAddress;
        instance._scopedMetadataKey = scopedMetadataKey;
        instance._valueSizeDelta = valueSizeDelta;
        instance._value = value;
        return instance;
    };
    EmbeddedAccountMetadataTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._targetAddress.serialize());
        buffer.write(converter.intToBytes(this._scopedMetadataKey, 8, false));
        buffer.write(converter.intToBytes(this._valueSizeDelta, 2, true));
        buffer.write(converter.intToBytes(this._value.length, 2, false)); // bound: value_size
        buffer.write(this._value);
        return buffer.storage;
    };
    EmbeddedAccountMetadataTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += "scopedMetadataKey: ".concat('0x'.concat(this._scopedMetadataKey.toString(16)), ", ");
        result += "valueSizeDelta: ".concat('0x'.concat(this._valueSizeDelta.toString(16)), ", ");
        result += "value: hex(".concat(converter.uint8ToHex(this._value), "), ");
        result += ')';
        return result;
    };
    EmbeddedAccountMetadataTransaction.TRANSACTION_VERSION = 1;
    EmbeddedAccountMetadataTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_METADATA;
    EmbeddedAccountMetadataTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        targetAddress: 'pod:UnresolvedAddress',
        value: 'bytes_array'
    };
    return EmbeddedAccountMetadataTransaction;
}());
var MosaicMetadataTransaction = /** @class */ (function () {
    function MosaicMetadataTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MosaicMetadataTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MosaicMetadataTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._targetAddress = new UnresolvedAddress();
        this._scopedMetadataKey = 0n;
        this._targetMosaicId = new UnresolvedMosaicId();
        this._valueSizeDelta = 0;
        this._value = new Uint8Array();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MosaicMetadataTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "scopedMetadataKey", {
        get: function () {
            return this._scopedMetadataKey;
        },
        set: function (value) {
            this._scopedMetadataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "targetMosaicId", {
        get: function () {
            return this._targetMosaicId;
        },
        set: function (value) {
            this._targetMosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "valueSizeDelta", {
        get: function () {
            return this._valueSizeDelta;
        },
        set: function (value) {
            this._valueSizeDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicMetadataTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.targetAddress.size;
            size += 8;
            size += this.targetMosaicId.size;
            size += 2;
            size += 2;
            size += this._value.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicMetadataTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var scopedMetadataKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var targetMosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(targetMosaicId.size);
        var valueSizeDelta = converter.bytesToInt(view.buffer, 2, true);
        view.shiftRight(2);
        var valueSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var value = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, valueSize);
        view.shiftRight(valueSize);
        var instance = new MosaicMetadataTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._targetAddress = targetAddress;
        instance._scopedMetadataKey = scopedMetadataKey;
        instance._targetMosaicId = targetMosaicId;
        instance._valueSizeDelta = valueSizeDelta;
        instance._value = value;
        return instance;
    };
    MosaicMetadataTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._targetAddress.serialize());
        buffer.write(converter.intToBytes(this._scopedMetadataKey, 8, false));
        buffer.write(this._targetMosaicId.serialize());
        buffer.write(converter.intToBytes(this._valueSizeDelta, 2, true));
        buffer.write(converter.intToBytes(this._value.length, 2, false)); // bound: value_size
        buffer.write(this._value);
        return buffer.storage;
    };
    MosaicMetadataTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += "scopedMetadataKey: ".concat('0x'.concat(this._scopedMetadataKey.toString(16)), ", ");
        result += "targetMosaicId: ".concat(this._targetMosaicId.toString(), ", ");
        result += "valueSizeDelta: ".concat('0x'.concat(this._valueSizeDelta.toString(16)), ", ");
        result += "value: hex(".concat(converter.uint8ToHex(this._value), "), ");
        result += ')';
        return result;
    };
    MosaicMetadataTransaction.TRANSACTION_VERSION = 1;
    MosaicMetadataTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_METADATA;
    MosaicMetadataTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        targetAddress: 'pod:UnresolvedAddress',
        targetMosaicId: 'pod:UnresolvedMosaicId',
        value: 'bytes_array'
    };
    return MosaicMetadataTransaction;
}());
var EmbeddedMosaicMetadataTransaction = /** @class */ (function () {
    function EmbeddedMosaicMetadataTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMosaicMetadataTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMosaicMetadataTransaction.TRANSACTION_TYPE;
        this._targetAddress = new UnresolvedAddress();
        this._scopedMetadataKey = 0n;
        this._targetMosaicId = new UnresolvedMosaicId();
        this._valueSizeDelta = 0;
        this._value = new Uint8Array();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "scopedMetadataKey", {
        get: function () {
            return this._scopedMetadataKey;
        },
        set: function (value) {
            this._scopedMetadataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "targetMosaicId", {
        get: function () {
            return this._targetMosaicId;
        },
        set: function (value) {
            this._targetMosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "valueSizeDelta", {
        get: function () {
            return this._valueSizeDelta;
        },
        set: function (value) {
            this._valueSizeDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicMetadataTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.targetAddress.size;
            size += 8;
            size += this.targetMosaicId.size;
            size += 2;
            size += 2;
            size += this._value.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMosaicMetadataTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var scopedMetadataKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var targetMosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(targetMosaicId.size);
        var valueSizeDelta = converter.bytesToInt(view.buffer, 2, true);
        view.shiftRight(2);
        var valueSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var value = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, valueSize);
        view.shiftRight(valueSize);
        var instance = new EmbeddedMosaicMetadataTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._targetAddress = targetAddress;
        instance._scopedMetadataKey = scopedMetadataKey;
        instance._targetMosaicId = targetMosaicId;
        instance._valueSizeDelta = valueSizeDelta;
        instance._value = value;
        return instance;
    };
    EmbeddedMosaicMetadataTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._targetAddress.serialize());
        buffer.write(converter.intToBytes(this._scopedMetadataKey, 8, false));
        buffer.write(this._targetMosaicId.serialize());
        buffer.write(converter.intToBytes(this._valueSizeDelta, 2, true));
        buffer.write(converter.intToBytes(this._value.length, 2, false)); // bound: value_size
        buffer.write(this._value);
        return buffer.storage;
    };
    EmbeddedMosaicMetadataTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += "scopedMetadataKey: ".concat('0x'.concat(this._scopedMetadataKey.toString(16)), ", ");
        result += "targetMosaicId: ".concat(this._targetMosaicId.toString(), ", ");
        result += "valueSizeDelta: ".concat('0x'.concat(this._valueSizeDelta.toString(16)), ", ");
        result += "value: hex(".concat(converter.uint8ToHex(this._value), "), ");
        result += ')';
        return result;
    };
    EmbeddedMosaicMetadataTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMosaicMetadataTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_METADATA;
    EmbeddedMosaicMetadataTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        targetAddress: 'pod:UnresolvedAddress',
        targetMosaicId: 'pod:UnresolvedMosaicId',
        value: 'bytes_array'
    };
    return EmbeddedMosaicMetadataTransaction;
}());
var NamespaceId = /** @class */ (function (_super) {
    __extends(NamespaceId, _super);
    function NamespaceId(namespaceId) {
        if (namespaceId === void 0) { namespaceId = 0n; }
        return _super.call(this, NamespaceId.SIZE, namespaceId) || this;
    }
    NamespaceId.deserialize = function (payload) {
        var byteArray = payload;
        return new NamespaceId(converter.bytesToInt(byteArray, 8, false));
    };
    NamespaceId.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    NamespaceId.SIZE = 8;
    return NamespaceId;
}(BaseValue));
var NamespaceRegistrationType = /** @class */ (function () {
    function NamespaceRegistrationType(value) {
        this.value = value;
    }
    NamespaceRegistrationType.valueToKey = function (value) {
        var values = [
            0, 1
        ];
        var keys = [
            'ROOT', 'CHILD'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    NamespaceRegistrationType.fromValue = function (value) {
        return NamespaceRegistrationType[this.valueToKey(value)];
    };
    Object.defineProperty(NamespaceRegistrationType.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceRegistrationType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    NamespaceRegistrationType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    NamespaceRegistrationType.prototype.toString = function () {
        return "NamespaceRegistrationType.".concat(NamespaceRegistrationType.valueToKey(this.value));
    };
    NamespaceRegistrationType.ROOT = new NamespaceRegistrationType(0);
    NamespaceRegistrationType.CHILD = new NamespaceRegistrationType(1);
    return NamespaceRegistrationType;
}());
var AliasAction = /** @class */ (function () {
    function AliasAction(value) {
        this.value = value;
    }
    AliasAction.valueToKey = function (value) {
        var values = [
            0, 1
        ];
        var keys = [
            'UNLINK', 'LINK'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    AliasAction.fromValue = function (value) {
        return AliasAction[this.valueToKey(value)];
    };
    Object.defineProperty(AliasAction.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    AliasAction.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    AliasAction.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    AliasAction.prototype.toString = function () {
        return "AliasAction.".concat(AliasAction.valueToKey(this.value));
    };
    AliasAction.UNLINK = new AliasAction(0);
    AliasAction.LINK = new AliasAction(1);
    return AliasAction;
}());
var NamespaceMetadataTransaction = /** @class */ (function () {
    function NamespaceMetadataTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = NamespaceMetadataTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = NamespaceMetadataTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._targetAddress = new UnresolvedAddress();
        this._scopedMetadataKey = 0n;
        this._targetNamespaceId = new NamespaceId();
        this._valueSizeDelta = 0;
        this._value = new Uint8Array();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "scopedMetadataKey", {
        get: function () {
            return this._scopedMetadataKey;
        },
        set: function (value) {
            this._scopedMetadataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "targetNamespaceId", {
        get: function () {
            return this._targetNamespaceId;
        },
        set: function (value) {
            this._targetNamespaceId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "valueSizeDelta", {
        get: function () {
            return this._valueSizeDelta;
        },
        set: function (value) {
            this._valueSizeDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceMetadataTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.targetAddress.size;
            size += 8;
            size += this.targetNamespaceId.size;
            size += 2;
            size += 2;
            size += this._value.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceMetadataTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var scopedMetadataKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var targetNamespaceId = NamespaceId.deserialize(view.buffer);
        view.shiftRight(targetNamespaceId.size);
        var valueSizeDelta = converter.bytesToInt(view.buffer, 2, true);
        view.shiftRight(2);
        var valueSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var value = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, valueSize);
        view.shiftRight(valueSize);
        var instance = new NamespaceMetadataTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._targetAddress = targetAddress;
        instance._scopedMetadataKey = scopedMetadataKey;
        instance._targetNamespaceId = targetNamespaceId;
        instance._valueSizeDelta = valueSizeDelta;
        instance._value = value;
        return instance;
    };
    NamespaceMetadataTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._targetAddress.serialize());
        buffer.write(converter.intToBytes(this._scopedMetadataKey, 8, false));
        buffer.write(this._targetNamespaceId.serialize());
        buffer.write(converter.intToBytes(this._valueSizeDelta, 2, true));
        buffer.write(converter.intToBytes(this._value.length, 2, false)); // bound: value_size
        buffer.write(this._value);
        return buffer.storage;
    };
    NamespaceMetadataTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += "scopedMetadataKey: ".concat('0x'.concat(this._scopedMetadataKey.toString(16)), ", ");
        result += "targetNamespaceId: ".concat(this._targetNamespaceId.toString(), ", ");
        result += "valueSizeDelta: ".concat('0x'.concat(this._valueSizeDelta.toString(16)), ", ");
        result += "value: hex(".concat(converter.uint8ToHex(this._value), "), ");
        result += ')';
        return result;
    };
    NamespaceMetadataTransaction.TRANSACTION_VERSION = 1;
    NamespaceMetadataTransaction.TRANSACTION_TYPE = TransactionType.NAMESPACE_METADATA;
    NamespaceMetadataTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        targetAddress: 'pod:UnresolvedAddress',
        targetNamespaceId: 'pod:NamespaceId',
        value: 'bytes_array'
    };
    return NamespaceMetadataTransaction;
}());
var EmbeddedNamespaceMetadataTransaction = /** @class */ (function () {
    function EmbeddedNamespaceMetadataTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedNamespaceMetadataTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedNamespaceMetadataTransaction.TRANSACTION_TYPE;
        this._targetAddress = new UnresolvedAddress();
        this._scopedMetadataKey = 0n;
        this._targetNamespaceId = new NamespaceId();
        this._valueSizeDelta = 0;
        this._value = new Uint8Array();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "scopedMetadataKey", {
        get: function () {
            return this._scopedMetadataKey;
        },
        set: function (value) {
            this._scopedMetadataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "targetNamespaceId", {
        get: function () {
            return this._targetNamespaceId;
        },
        set: function (value) {
            this._targetNamespaceId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "valueSizeDelta", {
        get: function () {
            return this._valueSizeDelta;
        },
        set: function (value) {
            this._valueSizeDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceMetadataTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.targetAddress.size;
            size += 8;
            size += this.targetNamespaceId.size;
            size += 2;
            size += 2;
            size += this._value.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedNamespaceMetadataTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var scopedMetadataKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var targetNamespaceId = NamespaceId.deserialize(view.buffer);
        view.shiftRight(targetNamespaceId.size);
        var valueSizeDelta = converter.bytesToInt(view.buffer, 2, true);
        view.shiftRight(2);
        var valueSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var value = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, valueSize);
        view.shiftRight(valueSize);
        var instance = new EmbeddedNamespaceMetadataTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._targetAddress = targetAddress;
        instance._scopedMetadataKey = scopedMetadataKey;
        instance._targetNamespaceId = targetNamespaceId;
        instance._valueSizeDelta = valueSizeDelta;
        instance._value = value;
        return instance;
    };
    EmbeddedNamespaceMetadataTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._targetAddress.serialize());
        buffer.write(converter.intToBytes(this._scopedMetadataKey, 8, false));
        buffer.write(this._targetNamespaceId.serialize());
        buffer.write(converter.intToBytes(this._valueSizeDelta, 2, true));
        buffer.write(converter.intToBytes(this._value.length, 2, false)); // bound: value_size
        buffer.write(this._value);
        return buffer.storage;
    };
    EmbeddedNamespaceMetadataTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += "scopedMetadataKey: ".concat('0x'.concat(this._scopedMetadataKey.toString(16)), ", ");
        result += "targetNamespaceId: ".concat(this._targetNamespaceId.toString(), ", ");
        result += "valueSizeDelta: ".concat('0x'.concat(this._valueSizeDelta.toString(16)), ", ");
        result += "value: hex(".concat(converter.uint8ToHex(this._value), "), ");
        result += ')';
        return result;
    };
    EmbeddedNamespaceMetadataTransaction.TRANSACTION_VERSION = 1;
    EmbeddedNamespaceMetadataTransaction.TRANSACTION_TYPE = TransactionType.NAMESPACE_METADATA;
    EmbeddedNamespaceMetadataTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        targetAddress: 'pod:UnresolvedAddress',
        targetNamespaceId: 'pod:NamespaceId',
        value: 'bytes_array'
    };
    return EmbeddedNamespaceMetadataTransaction;
}());
var MosaicNonce = /** @class */ (function (_super) {
    __extends(MosaicNonce, _super);
    function MosaicNonce(mosaicNonce) {
        if (mosaicNonce === void 0) { mosaicNonce = 0; }
        return _super.call(this, MosaicNonce.SIZE, mosaicNonce) || this;
    }
    MosaicNonce.deserialize = function (payload) {
        var byteArray = payload;
        return new MosaicNonce(converter.bytesToInt(byteArray, 4, false));
    };
    MosaicNonce.prototype.serialize = function () {
        return converter.intToBytes(this.value, 4, false);
    };
    MosaicNonce.SIZE = 4;
    return MosaicNonce;
}(BaseValue));
var MosaicFlags = /** @class */ (function () {
    function MosaicFlags(value) {
        this.value = value;
    }
    MosaicFlags.prototype.has = function (flag) {
        return 0 !== (this.value & flag);
    };
    Object.defineProperty(MosaicFlags.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    MosaicFlags.deserialize = function (payload) {
        var byteArray = payload;
        return new MosaicFlags(converter.bytesToInt(byteArray, 1, false));
    };
    MosaicFlags.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    MosaicFlags.prototype.toString = function () {
        var _this = this;
        var values = [
            0, 1, 2, 4, 8
        ];
        var keys = [
            'NONE', 'SUPPLY_MUTABLE', 'TRANSFERABLE', 'RESTRICTABLE', 'REVOKABLE'
        ];
        if (0 === this.value) {
            var index = values.indexOf(this.value);
            return "MosaicFlags.".concat(keys[index]);
        }
        var positions = values.map(function (flag) { return (_this.value & flag); }).filter(function (n) { return n; }).map(function (n) { return values.indexOf(n); });
        return positions.map(function (n) { return "MosaicFlags.".concat(keys[n]); }).join('|');
    };
    MosaicFlags.NONE = new MosaicFlags(0);
    MosaicFlags.SUPPLY_MUTABLE = new MosaicFlags(1);
    MosaicFlags.TRANSFERABLE = new MosaicFlags(2);
    MosaicFlags.RESTRICTABLE = new MosaicFlags(4);
    MosaicFlags.REVOKABLE = new MosaicFlags(8);
    return MosaicFlags;
}());
var MosaicSupplyChangeAction = /** @class */ (function () {
    function MosaicSupplyChangeAction(value) {
        this.value = value;
    }
    MosaicSupplyChangeAction.valueToKey = function (value) {
        var values = [
            0, 1
        ];
        var keys = [
            'DECREASE', 'INCREASE'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    MosaicSupplyChangeAction.fromValue = function (value) {
        return MosaicSupplyChangeAction[this.valueToKey(value)];
    };
    Object.defineProperty(MosaicSupplyChangeAction.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    MosaicSupplyChangeAction.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    MosaicSupplyChangeAction.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    MosaicSupplyChangeAction.prototype.toString = function () {
        return "MosaicSupplyChangeAction.".concat(MosaicSupplyChangeAction.valueToKey(this.value));
    };
    MosaicSupplyChangeAction.DECREASE = new MosaicSupplyChangeAction(0);
    MosaicSupplyChangeAction.INCREASE = new MosaicSupplyChangeAction(1);
    return MosaicSupplyChangeAction;
}());
var MosaicDefinitionTransaction = /** @class */ (function () {
    function MosaicDefinitionTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MosaicDefinitionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MosaicDefinitionTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._id = new MosaicId();
        this._duration = new BlockDuration();
        this._nonce = new MosaicNonce();
        this._flags = MosaicFlags.NONE;
        this._divisibility = 0;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "nonce", {
        get: function () {
            return this._nonce;
        },
        set: function (value) {
            this._nonce = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        set: function (value) {
            this._flags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "divisibility", {
        get: function () {
            return this._divisibility;
        },
        set: function (value) {
            this._divisibility = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicDefinitionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.id.size;
            size += this.duration.size;
            size += this.nonce.size;
            size += this.flags.size;
            size += 1;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicDefinitionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var id = MosaicId.deserialize(view.buffer);
        view.shiftRight(id.size);
        var duration = BlockDuration.deserialize(view.buffer);
        view.shiftRight(duration.size);
        var nonce = MosaicNonce.deserialize(view.buffer);
        view.shiftRight(nonce.size);
        var flags = MosaicFlags.deserialize(view.buffer);
        view.shiftRight(flags.size);
        var divisibility = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var instance = new MosaicDefinitionTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._id = id;
        instance._duration = duration;
        instance._nonce = nonce;
        instance._flags = flags;
        instance._divisibility = divisibility;
        return instance;
    };
    MosaicDefinitionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._id.serialize());
        buffer.write(this._duration.serialize());
        buffer.write(this._nonce.serialize());
        buffer.write(this._flags.serialize());
        buffer.write(converter.intToBytes(this._divisibility, 1, false));
        return buffer.storage;
    };
    MosaicDefinitionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "id: ".concat(this._id.toString(), ", ");
        result += "duration: ".concat(this._duration.toString(), ", ");
        result += "nonce: ".concat(this._nonce.toString(), ", ");
        result += "flags: ".concat(this._flags.toString(), ", ");
        result += "divisibility: ".concat('0x'.concat(this._divisibility.toString(16)), ", ");
        result += ')';
        return result;
    };
    MosaicDefinitionTransaction.TRANSACTION_VERSION = 1;
    MosaicDefinitionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_DEFINITION;
    MosaicDefinitionTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        id: 'pod:MosaicId',
        duration: 'pod:BlockDuration',
        nonce: 'pod:MosaicNonce',
        flags: 'enum:MosaicFlags'
    };
    return MosaicDefinitionTransaction;
}());
var EmbeddedMosaicDefinitionTransaction = /** @class */ (function () {
    function EmbeddedMosaicDefinitionTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMosaicDefinitionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMosaicDefinitionTransaction.TRANSACTION_TYPE;
        this._id = new MosaicId();
        this._duration = new BlockDuration();
        this._nonce = new MosaicNonce();
        this._flags = MosaicFlags.NONE;
        this._divisibility = 0;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "nonce", {
        get: function () {
            return this._nonce;
        },
        set: function (value) {
            this._nonce = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        set: function (value) {
            this._flags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "divisibility", {
        get: function () {
            return this._divisibility;
        },
        set: function (value) {
            this._divisibility = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicDefinitionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.id.size;
            size += this.duration.size;
            size += this.nonce.size;
            size += this.flags.size;
            size += 1;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMosaicDefinitionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var id = MosaicId.deserialize(view.buffer);
        view.shiftRight(id.size);
        var duration = BlockDuration.deserialize(view.buffer);
        view.shiftRight(duration.size);
        var nonce = MosaicNonce.deserialize(view.buffer);
        view.shiftRight(nonce.size);
        var flags = MosaicFlags.deserialize(view.buffer);
        view.shiftRight(flags.size);
        var divisibility = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var instance = new EmbeddedMosaicDefinitionTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._id = id;
        instance._duration = duration;
        instance._nonce = nonce;
        instance._flags = flags;
        instance._divisibility = divisibility;
        return instance;
    };
    EmbeddedMosaicDefinitionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._id.serialize());
        buffer.write(this._duration.serialize());
        buffer.write(this._nonce.serialize());
        buffer.write(this._flags.serialize());
        buffer.write(converter.intToBytes(this._divisibility, 1, false));
        return buffer.storage;
    };
    EmbeddedMosaicDefinitionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "id: ".concat(this._id.toString(), ", ");
        result += "duration: ".concat(this._duration.toString(), ", ");
        result += "nonce: ".concat(this._nonce.toString(), ", ");
        result += "flags: ".concat(this._flags.toString(), ", ");
        result += "divisibility: ".concat('0x'.concat(this._divisibility.toString(16)), ", ");
        result += ')';
        return result;
    };
    EmbeddedMosaicDefinitionTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMosaicDefinitionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_DEFINITION;
    EmbeddedMosaicDefinitionTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        id: 'pod:MosaicId',
        duration: 'pod:BlockDuration',
        nonce: 'pod:MosaicNonce',
        flags: 'enum:MosaicFlags'
    };
    return EmbeddedMosaicDefinitionTransaction;
}());
var MosaicSupplyChangeTransaction = /** @class */ (function () {
    function MosaicSupplyChangeTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MosaicSupplyChangeTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MosaicSupplyChangeTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaicId = new UnresolvedMosaicId();
        this._delta = new Amount();
        this._action = MosaicSupplyChangeAction.DECREASE;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "delta", {
        get: function () {
            return this._delta;
        },
        set: function (value) {
            this._delta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "action", {
        get: function () {
            return this._action;
        },
        set: function (value) {
            this._action = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyChangeTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.mosaicId.size;
            size += this.delta.size;
            size += this.action.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicSupplyChangeTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var delta = Amount.deserialize(view.buffer);
        view.shiftRight(delta.size);
        var action = MosaicSupplyChangeAction.deserialize(view.buffer);
        view.shiftRight(action.size);
        var instance = new MosaicSupplyChangeTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaicId = mosaicId;
        instance._delta = delta;
        instance._action = action;
        return instance;
    };
    MosaicSupplyChangeTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._delta.serialize());
        buffer.write(this._action.serialize());
        return buffer.storage;
    };
    MosaicSupplyChangeTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "delta: ".concat(this._delta.toString(), ", ");
        result += "action: ".concat(this._action.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicSupplyChangeTransaction.TRANSACTION_VERSION = 1;
    MosaicSupplyChangeTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_SUPPLY_CHANGE;
    MosaicSupplyChangeTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaicId: 'pod:UnresolvedMosaicId',
        delta: 'pod:Amount',
        action: 'enum:MosaicSupplyChangeAction'
    };
    return MosaicSupplyChangeTransaction;
}());
var EmbeddedMosaicSupplyChangeTransaction = /** @class */ (function () {
    function EmbeddedMosaicSupplyChangeTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMosaicSupplyChangeTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMosaicSupplyChangeTransaction.TRANSACTION_TYPE;
        this._mosaicId = new UnresolvedMosaicId();
        this._delta = new Amount();
        this._action = MosaicSupplyChangeAction.DECREASE;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "delta", {
        get: function () {
            return this._delta;
        },
        set: function (value) {
            this._delta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "action", {
        get: function () {
            return this._action;
        },
        set: function (value) {
            this._action = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyChangeTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.mosaicId.size;
            size += this.delta.size;
            size += this.action.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMosaicSupplyChangeTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var mosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var delta = Amount.deserialize(view.buffer);
        view.shiftRight(delta.size);
        var action = MosaicSupplyChangeAction.deserialize(view.buffer);
        view.shiftRight(action.size);
        var instance = new EmbeddedMosaicSupplyChangeTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._mosaicId = mosaicId;
        instance._delta = delta;
        instance._action = action;
        return instance;
    };
    EmbeddedMosaicSupplyChangeTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._delta.serialize());
        buffer.write(this._action.serialize());
        return buffer.storage;
    };
    EmbeddedMosaicSupplyChangeTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "delta: ".concat(this._delta.toString(), ", ");
        result += "action: ".concat(this._action.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedMosaicSupplyChangeTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMosaicSupplyChangeTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_SUPPLY_CHANGE;
    EmbeddedMosaicSupplyChangeTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        mosaicId: 'pod:UnresolvedMosaicId',
        delta: 'pod:Amount',
        action: 'enum:MosaicSupplyChangeAction'
    };
    return EmbeddedMosaicSupplyChangeTransaction;
}());
var MosaicSupplyRevocationTransaction = /** @class */ (function () {
    function MosaicSupplyRevocationTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MosaicSupplyRevocationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MosaicSupplyRevocationTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._sourceAddress = new UnresolvedAddress();
        this._mosaic = new UnresolvedMosaic();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "sourceAddress", {
        get: function () {
            return this._sourceAddress;
        },
        set: function (value) {
            this._sourceAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "mosaic", {
        get: function () {
            return this._mosaic;
        },
        set: function (value) {
            this._mosaic = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicSupplyRevocationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.sourceAddress.size;
            size += this.mosaic.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicSupplyRevocationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var sourceAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(sourceAddress.size);
        var mosaic = UnresolvedMosaic.deserialize(view.buffer);
        view.shiftRight(mosaic.size);
        var instance = new MosaicSupplyRevocationTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._sourceAddress = sourceAddress;
        instance._mosaic = mosaic;
        return instance;
    };
    MosaicSupplyRevocationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._sourceAddress.serialize());
        buffer.write(this._mosaic.serialize());
        return buffer.storage;
    };
    MosaicSupplyRevocationTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "sourceAddress: ".concat(this._sourceAddress.toString(), ", ");
        result += "mosaic: ".concat(this._mosaic.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicSupplyRevocationTransaction.TRANSACTION_VERSION = 1;
    MosaicSupplyRevocationTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_SUPPLY_REVOCATION;
    MosaicSupplyRevocationTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        sourceAddress: 'pod:UnresolvedAddress',
        mosaic: 'struct:UnresolvedMosaic'
    };
    return MosaicSupplyRevocationTransaction;
}());
var EmbeddedMosaicSupplyRevocationTransaction = /** @class */ (function () {
    function EmbeddedMosaicSupplyRevocationTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMosaicSupplyRevocationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMosaicSupplyRevocationTransaction.TRANSACTION_TYPE;
        this._sourceAddress = new UnresolvedAddress();
        this._mosaic = new UnresolvedMosaic();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMosaicSupplyRevocationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyRevocationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyRevocationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyRevocationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyRevocationTransaction.prototype, "sourceAddress", {
        get: function () {
            return this._sourceAddress;
        },
        set: function (value) {
            this._sourceAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyRevocationTransaction.prototype, "mosaic", {
        get: function () {
            return this._mosaic;
        },
        set: function (value) {
            this._mosaic = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicSupplyRevocationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.sourceAddress.size;
            size += this.mosaic.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMosaicSupplyRevocationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var sourceAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(sourceAddress.size);
        var mosaic = UnresolvedMosaic.deserialize(view.buffer);
        view.shiftRight(mosaic.size);
        var instance = new EmbeddedMosaicSupplyRevocationTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._sourceAddress = sourceAddress;
        instance._mosaic = mosaic;
        return instance;
    };
    EmbeddedMosaicSupplyRevocationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._sourceAddress.serialize());
        buffer.write(this._mosaic.serialize());
        return buffer.storage;
    };
    EmbeddedMosaicSupplyRevocationTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "sourceAddress: ".concat(this._sourceAddress.toString(), ", ");
        result += "mosaic: ".concat(this._mosaic.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedMosaicSupplyRevocationTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMosaicSupplyRevocationTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_SUPPLY_REVOCATION;
    EmbeddedMosaicSupplyRevocationTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        sourceAddress: 'pod:UnresolvedAddress',
        mosaic: 'struct:UnresolvedMosaic'
    };
    return EmbeddedMosaicSupplyRevocationTransaction;
}());
var MultisigAccountModificationTransaction = /** @class */ (function () {
    function MultisigAccountModificationTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MultisigAccountModificationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MultisigAccountModificationTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._minRemovalDelta = 0;
        this._minApprovalDelta = 0;
        this._addressAdditions = [];
        this._addressDeletions = [];
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._multisigAccountModificationTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "minRemovalDelta", {
        get: function () {
            return this._minRemovalDelta;
        },
        set: function (value) {
            this._minRemovalDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "minApprovalDelta", {
        get: function () {
            return this._minApprovalDelta;
        },
        set: function (value) {
            this._minApprovalDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "addressAdditions", {
        get: function () {
            return this._addressAdditions;
        },
        set: function (value) {
            this._addressAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "addressDeletions", {
        get: function () {
            return this._addressDeletions;
        },
        set: function (value) {
            this._addressDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultisigAccountModificationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += 1;
            size += 1;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.addressAdditions);
            size += arrayHelpers.size(this.addressDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MultisigAccountModificationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var minRemovalDelta = converter.bytesToInt(view.buffer, 1, true);
        view.shiftRight(1);
        var minApprovalDelta = converter.bytesToInt(view.buffer, 1, true);
        view.shiftRight(1);
        var addressAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var addressDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var multisigAccountModificationTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== multisigAccountModificationTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(multisigAccountModificationTransactionBodyReserved_1, ")"));
        var addressAdditions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, addressAdditionsCount);
        view.shiftRight(arrayHelpers.size(addressAdditions));
        var addressDeletions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, addressDeletionsCount);
        view.shiftRight(arrayHelpers.size(addressDeletions));
        var instance = new MultisigAccountModificationTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._minRemovalDelta = minRemovalDelta;
        instance._minApprovalDelta = minApprovalDelta;
        instance._addressAdditions = addressAdditions;
        instance._addressDeletions = addressDeletions;
        return instance;
    };
    MultisigAccountModificationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(converter.intToBytes(this._minRemovalDelta, 1, true));
        buffer.write(converter.intToBytes(this._minApprovalDelta, 1, true));
        buffer.write(converter.intToBytes(this._addressAdditions.length, 1, false)); // bound: address_additions_count
        buffer.write(converter.intToBytes(this._addressDeletions.length, 1, false)); // bound: address_deletions_count
        buffer.write(converter.intToBytes(this._multisigAccountModificationTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._addressAdditions);
        arrayHelpers.writeArray(buffer, this._addressDeletions);
        return buffer.storage;
    };
    MultisigAccountModificationTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "minRemovalDelta: ".concat('0x'.concat(this._minRemovalDelta.toString(16)), ", ");
        result += "minApprovalDelta: ".concat('0x'.concat(this._minApprovalDelta.toString(16)), ", ");
        result += "addressAdditions: [".concat(this._addressAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "addressDeletions: [".concat(this._addressDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    MultisigAccountModificationTransaction.TRANSACTION_VERSION = 1;
    MultisigAccountModificationTransaction.TRANSACTION_TYPE = TransactionType.MULTISIG_ACCOUNT_MODIFICATION;
    MultisigAccountModificationTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        addressAdditions: 'array[UnresolvedAddress]',
        addressDeletions: 'array[UnresolvedAddress]'
    };
    return MultisigAccountModificationTransaction;
}());
var EmbeddedMultisigAccountModificationTransaction = /** @class */ (function () {
    function EmbeddedMultisigAccountModificationTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMultisigAccountModificationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMultisigAccountModificationTransaction.TRANSACTION_TYPE;
        this._minRemovalDelta = 0;
        this._minApprovalDelta = 0;
        this._addressAdditions = [];
        this._addressDeletions = [];
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._multisigAccountModificationTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "minRemovalDelta", {
        get: function () {
            return this._minRemovalDelta;
        },
        set: function (value) {
            this._minRemovalDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "minApprovalDelta", {
        get: function () {
            return this._minApprovalDelta;
        },
        set: function (value) {
            this._minApprovalDelta = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "addressAdditions", {
        get: function () {
            return this._addressAdditions;
        },
        set: function (value) {
            this._addressAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "addressDeletions", {
        get: function () {
            return this._addressDeletions;
        },
        set: function (value) {
            this._addressDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMultisigAccountModificationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += 1;
            size += 1;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.addressAdditions);
            size += arrayHelpers.size(this.addressDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMultisigAccountModificationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var minRemovalDelta = converter.bytesToInt(view.buffer, 1, true);
        view.shiftRight(1);
        var minApprovalDelta = converter.bytesToInt(view.buffer, 1, true);
        view.shiftRight(1);
        var addressAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var addressDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var multisigAccountModificationTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== multisigAccountModificationTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(multisigAccountModificationTransactionBodyReserved_1, ")"));
        var addressAdditions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, addressAdditionsCount);
        view.shiftRight(arrayHelpers.size(addressAdditions));
        var addressDeletions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, addressDeletionsCount);
        view.shiftRight(arrayHelpers.size(addressDeletions));
        var instance = new EmbeddedMultisigAccountModificationTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._minRemovalDelta = minRemovalDelta;
        instance._minApprovalDelta = minApprovalDelta;
        instance._addressAdditions = addressAdditions;
        instance._addressDeletions = addressDeletions;
        return instance;
    };
    EmbeddedMultisigAccountModificationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(converter.intToBytes(this._minRemovalDelta, 1, true));
        buffer.write(converter.intToBytes(this._minApprovalDelta, 1, true));
        buffer.write(converter.intToBytes(this._addressAdditions.length, 1, false)); // bound: address_additions_count
        buffer.write(converter.intToBytes(this._addressDeletions.length, 1, false)); // bound: address_deletions_count
        buffer.write(converter.intToBytes(this._multisigAccountModificationTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._addressAdditions);
        arrayHelpers.writeArray(buffer, this._addressDeletions);
        return buffer.storage;
    };
    EmbeddedMultisigAccountModificationTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "minRemovalDelta: ".concat('0x'.concat(this._minRemovalDelta.toString(16)), ", ");
        result += "minApprovalDelta: ".concat('0x'.concat(this._minApprovalDelta.toString(16)), ", ");
        result += "addressAdditions: [".concat(this._addressAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "addressDeletions: [".concat(this._addressDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    EmbeddedMultisigAccountModificationTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMultisigAccountModificationTransaction.TRANSACTION_TYPE = TransactionType.MULTISIG_ACCOUNT_MODIFICATION;
    EmbeddedMultisigAccountModificationTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        addressAdditions: 'array[UnresolvedAddress]',
        addressDeletions: 'array[UnresolvedAddress]'
    };
    return EmbeddedMultisigAccountModificationTransaction;
}());
var AddressAliasTransaction = /** @class */ (function () {
    function AddressAliasTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AddressAliasTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AddressAliasTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._namespaceId = new NamespaceId();
        this._address = new Address();
        this._aliasAction = AliasAction.UNLINK;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AddressAliasTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "namespaceId", {
        get: function () {
            return this._namespaceId;
        },
        set: function (value) {
            this._namespaceId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "address", {
        get: function () {
            return this._address;
        },
        set: function (value) {
            this._address = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "aliasAction", {
        get: function () {
            return this._aliasAction;
        },
        set: function (value) {
            this._aliasAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AddressAliasTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.namespaceId.size;
            size += this.address.size;
            size += this.aliasAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AddressAliasTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var namespaceId = NamespaceId.deserialize(view.buffer);
        view.shiftRight(namespaceId.size);
        var address = Address.deserialize(view.buffer);
        view.shiftRight(address.size);
        var aliasAction = AliasAction.deserialize(view.buffer);
        view.shiftRight(aliasAction.size);
        var instance = new AddressAliasTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._namespaceId = namespaceId;
        instance._address = address;
        instance._aliasAction = aliasAction;
        return instance;
    };
    AddressAliasTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._namespaceId.serialize());
        buffer.write(this._address.serialize());
        buffer.write(this._aliasAction.serialize());
        return buffer.storage;
    };
    AddressAliasTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "namespaceId: ".concat(this._namespaceId.toString(), ", ");
        result += "address: ".concat(this._address.toString(), ", ");
        result += "aliasAction: ".concat(this._aliasAction.toString(), ", ");
        result += ')';
        return result;
    };
    AddressAliasTransaction.TRANSACTION_VERSION = 1;
    AddressAliasTransaction.TRANSACTION_TYPE = TransactionType.ADDRESS_ALIAS;
    AddressAliasTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        namespaceId: 'pod:NamespaceId',
        address: 'pod:Address',
        aliasAction: 'enum:AliasAction'
    };
    return AddressAliasTransaction;
}());
var EmbeddedAddressAliasTransaction = /** @class */ (function () {
    function EmbeddedAddressAliasTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedAddressAliasTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedAddressAliasTransaction.TRANSACTION_TYPE;
        this._namespaceId = new NamespaceId();
        this._address = new Address();
        this._aliasAction = AliasAction.UNLINK;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "namespaceId", {
        get: function () {
            return this._namespaceId;
        },
        set: function (value) {
            this._namespaceId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "address", {
        get: function () {
            return this._address;
        },
        set: function (value) {
            this._address = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "aliasAction", {
        get: function () {
            return this._aliasAction;
        },
        set: function (value) {
            this._aliasAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAddressAliasTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.namespaceId.size;
            size += this.address.size;
            size += this.aliasAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedAddressAliasTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var namespaceId = NamespaceId.deserialize(view.buffer);
        view.shiftRight(namespaceId.size);
        var address = Address.deserialize(view.buffer);
        view.shiftRight(address.size);
        var aliasAction = AliasAction.deserialize(view.buffer);
        view.shiftRight(aliasAction.size);
        var instance = new EmbeddedAddressAliasTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._namespaceId = namespaceId;
        instance._address = address;
        instance._aliasAction = aliasAction;
        return instance;
    };
    EmbeddedAddressAliasTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._namespaceId.serialize());
        buffer.write(this._address.serialize());
        buffer.write(this._aliasAction.serialize());
        return buffer.storage;
    };
    EmbeddedAddressAliasTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "namespaceId: ".concat(this._namespaceId.toString(), ", ");
        result += "address: ".concat(this._address.toString(), ", ");
        result += "aliasAction: ".concat(this._aliasAction.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedAddressAliasTransaction.TRANSACTION_VERSION = 1;
    EmbeddedAddressAliasTransaction.TRANSACTION_TYPE = TransactionType.ADDRESS_ALIAS;
    EmbeddedAddressAliasTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        namespaceId: 'pod:NamespaceId',
        address: 'pod:Address',
        aliasAction: 'enum:AliasAction'
    };
    return EmbeddedAddressAliasTransaction;
}());
var MosaicAliasTransaction = /** @class */ (function () {
    function MosaicAliasTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MosaicAliasTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MosaicAliasTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._namespaceId = new NamespaceId();
        this._mosaicId = new MosaicId();
        this._aliasAction = AliasAction.UNLINK;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MosaicAliasTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "namespaceId", {
        get: function () {
            return this._namespaceId;
        },
        set: function (value) {
            this._namespaceId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "aliasAction", {
        get: function () {
            return this._aliasAction;
        },
        set: function (value) {
            this._aliasAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAliasTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.namespaceId.size;
            size += this.mosaicId.size;
            size += this.aliasAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicAliasTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var namespaceId = NamespaceId.deserialize(view.buffer);
        view.shiftRight(namespaceId.size);
        var mosaicId = MosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var aliasAction = AliasAction.deserialize(view.buffer);
        view.shiftRight(aliasAction.size);
        var instance = new MosaicAliasTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._namespaceId = namespaceId;
        instance._mosaicId = mosaicId;
        instance._aliasAction = aliasAction;
        return instance;
    };
    MosaicAliasTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._namespaceId.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._aliasAction.serialize());
        return buffer.storage;
    };
    MosaicAliasTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "namespaceId: ".concat(this._namespaceId.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "aliasAction: ".concat(this._aliasAction.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicAliasTransaction.TRANSACTION_VERSION = 1;
    MosaicAliasTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_ALIAS;
    MosaicAliasTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        namespaceId: 'pod:NamespaceId',
        mosaicId: 'pod:MosaicId',
        aliasAction: 'enum:AliasAction'
    };
    return MosaicAliasTransaction;
}());
var EmbeddedMosaicAliasTransaction = /** @class */ (function () {
    function EmbeddedMosaicAliasTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMosaicAliasTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMosaicAliasTransaction.TRANSACTION_TYPE;
        this._namespaceId = new NamespaceId();
        this._mosaicId = new MosaicId();
        this._aliasAction = AliasAction.UNLINK;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "namespaceId", {
        get: function () {
            return this._namespaceId;
        },
        set: function (value) {
            this._namespaceId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "aliasAction", {
        get: function () {
            return this._aliasAction;
        },
        set: function (value) {
            this._aliasAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAliasTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.namespaceId.size;
            size += this.mosaicId.size;
            size += this.aliasAction.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMosaicAliasTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var namespaceId = NamespaceId.deserialize(view.buffer);
        view.shiftRight(namespaceId.size);
        var mosaicId = MosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var aliasAction = AliasAction.deserialize(view.buffer);
        view.shiftRight(aliasAction.size);
        var instance = new EmbeddedMosaicAliasTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._namespaceId = namespaceId;
        instance._mosaicId = mosaicId;
        instance._aliasAction = aliasAction;
        return instance;
    };
    EmbeddedMosaicAliasTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._namespaceId.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._aliasAction.serialize());
        return buffer.storage;
    };
    EmbeddedMosaicAliasTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "namespaceId: ".concat(this._namespaceId.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "aliasAction: ".concat(this._aliasAction.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedMosaicAliasTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMosaicAliasTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_ALIAS;
    EmbeddedMosaicAliasTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        namespaceId: 'pod:NamespaceId',
        mosaicId: 'pod:MosaicId',
        aliasAction: 'enum:AliasAction'
    };
    return EmbeddedMosaicAliasTransaction;
}());
var NamespaceRegistrationTransaction = /** @class */ (function () {
    function NamespaceRegistrationTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = NamespaceRegistrationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = NamespaceRegistrationTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._duration = new BlockDuration();
        this._parentId = new NamespaceId();
        this._id = new NamespaceId();
        this._registrationType = NamespaceRegistrationType.ROOT;
        this._name = new Uint8Array();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "parentId", {
        get: function () {
            return this._parentId;
        },
        set: function (value) {
            this._parentId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "registrationType", {
        get: function () {
            return this._registrationType;
        },
        set: function (value) {
            this._registrationType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceRegistrationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            if (NamespaceRegistrationType.ROOT === this.registrationType)
                size += this.duration.size;
            if (NamespaceRegistrationType.CHILD === this.registrationType)
                size += this.parentId.size;
            size += this.id.size;
            size += this.registrationType.size;
            size += 1;
            size += this._name.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceRegistrationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        // deserialize to temporary buffer for further processing
        var durationTemporary = BlockDuration.deserialize(view.buffer);
        var registration_type_condition = view.window(durationTemporary.size);
        view.shiftRight(durationTemporary.size); // skip temporary
        var id = NamespaceId.deserialize(view.buffer);
        view.shiftRight(id.size);
        var registrationType = NamespaceRegistrationType.deserialize(view.buffer);
        view.shiftRight(registrationType.size);
        var duration;
        if (NamespaceRegistrationType.ROOT === registrationType)
            duration = BlockDuration.deserialize(registration_type_condition);
        var parentId;
        if (NamespaceRegistrationType.CHILD === registrationType)
            parentId = NamespaceId.deserialize(registration_type_condition);
        var nameSize = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var name = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, nameSize);
        view.shiftRight(nameSize);
        var instance = new NamespaceRegistrationTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._duration = duration;
        instance._parentId = parentId;
        instance._id = id;
        instance._registrationType = registrationType;
        instance._name = name;
        return instance;
    };
    NamespaceRegistrationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        if (NamespaceRegistrationType.ROOT === this.registrationType)
            buffer.write(this._duration.serialize());
        if (NamespaceRegistrationType.CHILD === this.registrationType)
            buffer.write(this._parentId.serialize());
        buffer.write(this._id.serialize());
        buffer.write(this._registrationType.serialize());
        buffer.write(converter.intToBytes(this._name.length, 1, false)); // bound: name_size
        buffer.write(this._name);
        return buffer.storage;
    };
    NamespaceRegistrationTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        if (NamespaceRegistrationType.ROOT === this.registrationType)
            result += "duration: ".concat(this._duration.toString(), ", ");
        if (NamespaceRegistrationType.CHILD === this.registrationType)
            result += "parentId: ".concat(this._parentId.toString(), ", ");
        result += "id: ".concat(this._id.toString(), ", ");
        result += "registrationType: ".concat(this._registrationType.toString(), ", ");
        result += "name: hex(".concat(converter.uint8ToHex(this._name), "), ");
        result += ')';
        return result;
    };
    NamespaceRegistrationTransaction.TRANSACTION_VERSION = 1;
    NamespaceRegistrationTransaction.TRANSACTION_TYPE = TransactionType.NAMESPACE_REGISTRATION;
    NamespaceRegistrationTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        duration: 'pod:BlockDuration',
        parentId: 'pod:NamespaceId',
        id: 'pod:NamespaceId',
        registrationType: 'enum:NamespaceRegistrationType',
        name: 'bytes_array'
    };
    return NamespaceRegistrationTransaction;
}());
var EmbeddedNamespaceRegistrationTransaction = /** @class */ (function () {
    function EmbeddedNamespaceRegistrationTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedNamespaceRegistrationTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedNamespaceRegistrationTransaction.TRANSACTION_TYPE;
        this._duration = new BlockDuration();
        this._parentId = new NamespaceId();
        this._id = new NamespaceId();
        this._registrationType = NamespaceRegistrationType.ROOT;
        this._name = new Uint8Array();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            this._duration = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "parentId", {
        get: function () {
            return this._parentId;
        },
        set: function (value) {
            this._parentId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "registrationType", {
        get: function () {
            return this._registrationType;
        },
        set: function (value) {
            this._registrationType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedNamespaceRegistrationTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            if (NamespaceRegistrationType.ROOT === this.registrationType)
                size += this.duration.size;
            if (NamespaceRegistrationType.CHILD === this.registrationType)
                size += this.parentId.size;
            size += this.id.size;
            size += this.registrationType.size;
            size += 1;
            size += this._name.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedNamespaceRegistrationTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        // deserialize to temporary buffer for further processing
        var durationTemporary = BlockDuration.deserialize(view.buffer);
        var registration_type_condition = view.window(durationTemporary.size);
        view.shiftRight(durationTemporary.size); // skip temporary
        var id = NamespaceId.deserialize(view.buffer);
        view.shiftRight(id.size);
        var registrationType = NamespaceRegistrationType.deserialize(view.buffer);
        view.shiftRight(registrationType.size);
        var duration;
        if (NamespaceRegistrationType.ROOT === registrationType)
            duration = BlockDuration.deserialize(registration_type_condition);
        var parentId;
        if (NamespaceRegistrationType.CHILD === registrationType)
            parentId = NamespaceId.deserialize(registration_type_condition);
        var nameSize = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var name = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, nameSize);
        view.shiftRight(nameSize);
        var instance = new EmbeddedNamespaceRegistrationTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._duration = duration;
        instance._parentId = parentId;
        instance._id = id;
        instance._registrationType = registrationType;
        instance._name = name;
        return instance;
    };
    EmbeddedNamespaceRegistrationTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        if (NamespaceRegistrationType.ROOT === this.registrationType)
            buffer.write(this._duration.serialize());
        if (NamespaceRegistrationType.CHILD === this.registrationType)
            buffer.write(this._parentId.serialize());
        buffer.write(this._id.serialize());
        buffer.write(this._registrationType.serialize());
        buffer.write(converter.intToBytes(this._name.length, 1, false)); // bound: name_size
        buffer.write(this._name);
        return buffer.storage;
    };
    EmbeddedNamespaceRegistrationTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        if (NamespaceRegistrationType.ROOT === this.registrationType)
            result += "duration: ".concat(this._duration.toString(), ", ");
        if (NamespaceRegistrationType.CHILD === this.registrationType)
            result += "parentId: ".concat(this._parentId.toString(), ", ");
        result += "id: ".concat(this._id.toString(), ", ");
        result += "registrationType: ".concat(this._registrationType.toString(), ", ");
        result += "name: hex(".concat(converter.uint8ToHex(this._name), "), ");
        result += ')';
        return result;
    };
    EmbeddedNamespaceRegistrationTransaction.TRANSACTION_VERSION = 1;
    EmbeddedNamespaceRegistrationTransaction.TRANSACTION_TYPE = TransactionType.NAMESPACE_REGISTRATION;
    EmbeddedNamespaceRegistrationTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        duration: 'pod:BlockDuration',
        parentId: 'pod:NamespaceId',
        id: 'pod:NamespaceId',
        registrationType: 'enum:NamespaceRegistrationType',
        name: 'bytes_array'
    };
    return EmbeddedNamespaceRegistrationTransaction;
}());
var AccountRestrictionFlags = /** @class */ (function () {
    function AccountRestrictionFlags(value) {
        this.value = value;
    }
    AccountRestrictionFlags.prototype.has = function (flag) {
        return 0 !== (this.value & flag);
    };
    Object.defineProperty(AccountRestrictionFlags.prototype, "size", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    AccountRestrictionFlags.deserialize = function (payload) {
        var byteArray = payload;
        return new AccountRestrictionFlags(converter.bytesToInt(byteArray, 2, false));
    };
    AccountRestrictionFlags.prototype.serialize = function () {
        return converter.intToBytes(this.value, 2, false);
    };
    AccountRestrictionFlags.prototype.toString = function () {
        var _this = this;
        var values = [
            1, 2, 4, 16384, 32768
        ];
        var keys = [
            'ADDRESS', 'MOSAIC_ID', 'TRANSACTION_TYPE', 'OUTGOING', 'BLOCK'
        ];
        if (0 === this.value) {
            var index = values.indexOf(this.value);
            return "AccountRestrictionFlags.".concat(keys[index]);
        }
        var positions = values.map(function (flag) { return (_this.value & flag); }).filter(function (n) { return n; }).map(function (n) { return values.indexOf(n); });
        return positions.map(function (n) { return "AccountRestrictionFlags.".concat(keys[n]); }).join('|');
    };
    AccountRestrictionFlags.ADDRESS = new AccountRestrictionFlags(1);
    AccountRestrictionFlags.MOSAIC_ID = new AccountRestrictionFlags(2);
    AccountRestrictionFlags.TRANSACTION_TYPE = new AccountRestrictionFlags(4);
    AccountRestrictionFlags.OUTGOING = new AccountRestrictionFlags(16384);
    AccountRestrictionFlags.BLOCK = new AccountRestrictionFlags(32768);
    return AccountRestrictionFlags;
}());
var AccountAddressRestrictionTransaction = /** @class */ (function () {
    function AccountAddressRestrictionTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AccountAddressRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AccountAddressRestrictionTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._restrictionFlags = AccountRestrictionFlags.ADDRESS;
        this._restrictionAdditions = [];
        this._restrictionDeletions = [];
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._accountRestrictionTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "restrictionFlags", {
        get: function () {
            return this._restrictionFlags;
        },
        set: function (value) {
            this._restrictionFlags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "restrictionAdditions", {
        get: function () {
            return this._restrictionAdditions;
        },
        set: function (value) {
            this._restrictionAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "restrictionDeletions", {
        get: function () {
            return this._restrictionDeletions;
        },
        set: function (value) {
            this._restrictionDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountAddressRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.restrictionFlags.size;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.restrictionAdditions);
            size += arrayHelpers.size(this.restrictionDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AccountAddressRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var restrictionFlags = AccountRestrictionFlags.deserialize(view.buffer);
        view.shiftRight(restrictionFlags.size);
        var restrictionAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var restrictionDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var accountRestrictionTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== accountRestrictionTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(accountRestrictionTransactionBodyReserved_1, ")"));
        var restrictionAdditions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, restrictionAdditionsCount);
        view.shiftRight(arrayHelpers.size(restrictionAdditions));
        var restrictionDeletions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, restrictionDeletionsCount);
        view.shiftRight(arrayHelpers.size(restrictionDeletions));
        var instance = new AccountAddressRestrictionTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._restrictionFlags = restrictionFlags;
        instance._restrictionAdditions = restrictionAdditions;
        instance._restrictionDeletions = restrictionDeletions;
        return instance;
    };
    AccountAddressRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._restrictionFlags.serialize());
        buffer.write(converter.intToBytes(this._restrictionAdditions.length, 1, false)); // bound: restriction_additions_count
        buffer.write(converter.intToBytes(this._restrictionDeletions.length, 1, false)); // bound: restriction_deletions_count
        buffer.write(converter.intToBytes(this._accountRestrictionTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._restrictionAdditions);
        arrayHelpers.writeArray(buffer, this._restrictionDeletions);
        return buffer.storage;
    };
    AccountAddressRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "restrictionFlags: ".concat(this._restrictionFlags.toString(), ", ");
        result += "restrictionAdditions: [".concat(this._restrictionAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "restrictionDeletions: [".concat(this._restrictionDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    AccountAddressRestrictionTransaction.TRANSACTION_VERSION = 1;
    AccountAddressRestrictionTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_ADDRESS_RESTRICTION;
    AccountAddressRestrictionTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        restrictionFlags: 'enum:AccountRestrictionFlags',
        restrictionAdditions: 'array[UnresolvedAddress]',
        restrictionDeletions: 'array[UnresolvedAddress]'
    };
    return AccountAddressRestrictionTransaction;
}());
var EmbeddedAccountAddressRestrictionTransaction = /** @class */ (function () {
    function EmbeddedAccountAddressRestrictionTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedAccountAddressRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedAccountAddressRestrictionTransaction.TRANSACTION_TYPE;
        this._restrictionFlags = AccountRestrictionFlags.ADDRESS;
        this._restrictionAdditions = [];
        this._restrictionDeletions = [];
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._accountRestrictionTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "restrictionFlags", {
        get: function () {
            return this._restrictionFlags;
        },
        set: function (value) {
            this._restrictionFlags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "restrictionAdditions", {
        get: function () {
            return this._restrictionAdditions;
        },
        set: function (value) {
            this._restrictionAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "restrictionDeletions", {
        get: function () {
            return this._restrictionDeletions;
        },
        set: function (value) {
            this._restrictionDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountAddressRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.restrictionFlags.size;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.restrictionAdditions);
            size += arrayHelpers.size(this.restrictionDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedAccountAddressRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var restrictionFlags = AccountRestrictionFlags.deserialize(view.buffer);
        view.shiftRight(restrictionFlags.size);
        var restrictionAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var restrictionDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var accountRestrictionTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== accountRestrictionTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(accountRestrictionTransactionBodyReserved_1, ")"));
        var restrictionAdditions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, restrictionAdditionsCount);
        view.shiftRight(arrayHelpers.size(restrictionAdditions));
        var restrictionDeletions = arrayHelpers.readArrayCount(view.buffer, UnresolvedAddress, restrictionDeletionsCount);
        view.shiftRight(arrayHelpers.size(restrictionDeletions));
        var instance = new EmbeddedAccountAddressRestrictionTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._restrictionFlags = restrictionFlags;
        instance._restrictionAdditions = restrictionAdditions;
        instance._restrictionDeletions = restrictionDeletions;
        return instance;
    };
    EmbeddedAccountAddressRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._restrictionFlags.serialize());
        buffer.write(converter.intToBytes(this._restrictionAdditions.length, 1, false)); // bound: restriction_additions_count
        buffer.write(converter.intToBytes(this._restrictionDeletions.length, 1, false)); // bound: restriction_deletions_count
        buffer.write(converter.intToBytes(this._accountRestrictionTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._restrictionAdditions);
        arrayHelpers.writeArray(buffer, this._restrictionDeletions);
        return buffer.storage;
    };
    EmbeddedAccountAddressRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "restrictionFlags: ".concat(this._restrictionFlags.toString(), ", ");
        result += "restrictionAdditions: [".concat(this._restrictionAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "restrictionDeletions: [".concat(this._restrictionDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    EmbeddedAccountAddressRestrictionTransaction.TRANSACTION_VERSION = 1;
    EmbeddedAccountAddressRestrictionTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_ADDRESS_RESTRICTION;
    EmbeddedAccountAddressRestrictionTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        restrictionFlags: 'enum:AccountRestrictionFlags',
        restrictionAdditions: 'array[UnresolvedAddress]',
        restrictionDeletions: 'array[UnresolvedAddress]'
    };
    return EmbeddedAccountAddressRestrictionTransaction;
}());
var AccountMosaicRestrictionTransaction = /** @class */ (function () {
    function AccountMosaicRestrictionTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AccountMosaicRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AccountMosaicRestrictionTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._restrictionFlags = AccountRestrictionFlags.ADDRESS;
        this._restrictionAdditions = [];
        this._restrictionDeletions = [];
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._accountRestrictionTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "restrictionFlags", {
        get: function () {
            return this._restrictionFlags;
        },
        set: function (value) {
            this._restrictionFlags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "restrictionAdditions", {
        get: function () {
            return this._restrictionAdditions;
        },
        set: function (value) {
            this._restrictionAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "restrictionDeletions", {
        get: function () {
            return this._restrictionDeletions;
        },
        set: function (value) {
            this._restrictionDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountMosaicRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.restrictionFlags.size;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.restrictionAdditions);
            size += arrayHelpers.size(this.restrictionDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AccountMosaicRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var restrictionFlags = AccountRestrictionFlags.deserialize(view.buffer);
        view.shiftRight(restrictionFlags.size);
        var restrictionAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var restrictionDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var accountRestrictionTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== accountRestrictionTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(accountRestrictionTransactionBodyReserved_1, ")"));
        var restrictionAdditions = arrayHelpers.readArrayCount(view.buffer, UnresolvedMosaicId, restrictionAdditionsCount);
        view.shiftRight(arrayHelpers.size(restrictionAdditions));
        var restrictionDeletions = arrayHelpers.readArrayCount(view.buffer, UnresolvedMosaicId, restrictionDeletionsCount);
        view.shiftRight(arrayHelpers.size(restrictionDeletions));
        var instance = new AccountMosaicRestrictionTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._restrictionFlags = restrictionFlags;
        instance._restrictionAdditions = restrictionAdditions;
        instance._restrictionDeletions = restrictionDeletions;
        return instance;
    };
    AccountMosaicRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._restrictionFlags.serialize());
        buffer.write(converter.intToBytes(this._restrictionAdditions.length, 1, false)); // bound: restriction_additions_count
        buffer.write(converter.intToBytes(this._restrictionDeletions.length, 1, false)); // bound: restriction_deletions_count
        buffer.write(converter.intToBytes(this._accountRestrictionTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._restrictionAdditions);
        arrayHelpers.writeArray(buffer, this._restrictionDeletions);
        return buffer.storage;
    };
    AccountMosaicRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "restrictionFlags: ".concat(this._restrictionFlags.toString(), ", ");
        result += "restrictionAdditions: [".concat(this._restrictionAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "restrictionDeletions: [".concat(this._restrictionDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    AccountMosaicRestrictionTransaction.TRANSACTION_VERSION = 1;
    AccountMosaicRestrictionTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_MOSAIC_RESTRICTION;
    AccountMosaicRestrictionTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        restrictionFlags: 'enum:AccountRestrictionFlags',
        restrictionAdditions: 'array[UnresolvedMosaicId]',
        restrictionDeletions: 'array[UnresolvedMosaicId]'
    };
    return AccountMosaicRestrictionTransaction;
}());
var EmbeddedAccountMosaicRestrictionTransaction = /** @class */ (function () {
    function EmbeddedAccountMosaicRestrictionTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedAccountMosaicRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedAccountMosaicRestrictionTransaction.TRANSACTION_TYPE;
        this._restrictionFlags = AccountRestrictionFlags.ADDRESS;
        this._restrictionAdditions = [];
        this._restrictionDeletions = [];
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._accountRestrictionTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "restrictionFlags", {
        get: function () {
            return this._restrictionFlags;
        },
        set: function (value) {
            this._restrictionFlags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "restrictionAdditions", {
        get: function () {
            return this._restrictionAdditions;
        },
        set: function (value) {
            this._restrictionAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "restrictionDeletions", {
        get: function () {
            return this._restrictionDeletions;
        },
        set: function (value) {
            this._restrictionDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountMosaicRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.restrictionFlags.size;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.restrictionAdditions);
            size += arrayHelpers.size(this.restrictionDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedAccountMosaicRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var restrictionFlags = AccountRestrictionFlags.deserialize(view.buffer);
        view.shiftRight(restrictionFlags.size);
        var restrictionAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var restrictionDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var accountRestrictionTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== accountRestrictionTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(accountRestrictionTransactionBodyReserved_1, ")"));
        var restrictionAdditions = arrayHelpers.readArrayCount(view.buffer, UnresolvedMosaicId, restrictionAdditionsCount);
        view.shiftRight(arrayHelpers.size(restrictionAdditions));
        var restrictionDeletions = arrayHelpers.readArrayCount(view.buffer, UnresolvedMosaicId, restrictionDeletionsCount);
        view.shiftRight(arrayHelpers.size(restrictionDeletions));
        var instance = new EmbeddedAccountMosaicRestrictionTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._restrictionFlags = restrictionFlags;
        instance._restrictionAdditions = restrictionAdditions;
        instance._restrictionDeletions = restrictionDeletions;
        return instance;
    };
    EmbeddedAccountMosaicRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._restrictionFlags.serialize());
        buffer.write(converter.intToBytes(this._restrictionAdditions.length, 1, false)); // bound: restriction_additions_count
        buffer.write(converter.intToBytes(this._restrictionDeletions.length, 1, false)); // bound: restriction_deletions_count
        buffer.write(converter.intToBytes(this._accountRestrictionTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._restrictionAdditions);
        arrayHelpers.writeArray(buffer, this._restrictionDeletions);
        return buffer.storage;
    };
    EmbeddedAccountMosaicRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "restrictionFlags: ".concat(this._restrictionFlags.toString(), ", ");
        result += "restrictionAdditions: [".concat(this._restrictionAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "restrictionDeletions: [".concat(this._restrictionDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    EmbeddedAccountMosaicRestrictionTransaction.TRANSACTION_VERSION = 1;
    EmbeddedAccountMosaicRestrictionTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_MOSAIC_RESTRICTION;
    EmbeddedAccountMosaicRestrictionTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        restrictionFlags: 'enum:AccountRestrictionFlags',
        restrictionAdditions: 'array[UnresolvedMosaicId]',
        restrictionDeletions: 'array[UnresolvedMosaicId]'
    };
    return EmbeddedAccountMosaicRestrictionTransaction;
}());
var AccountOperationRestrictionTransaction = /** @class */ (function () {
    function AccountOperationRestrictionTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = AccountOperationRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = AccountOperationRestrictionTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._restrictionFlags = AccountRestrictionFlags.ADDRESS;
        this._restrictionAdditions = [];
        this._restrictionDeletions = [];
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._accountRestrictionTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "restrictionFlags", {
        get: function () {
            return this._restrictionFlags;
        },
        set: function (value) {
            this._restrictionFlags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "restrictionAdditions", {
        get: function () {
            return this._restrictionAdditions;
        },
        set: function (value) {
            this._restrictionAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "restrictionDeletions", {
        get: function () {
            return this._restrictionDeletions;
        },
        set: function (value) {
            this._restrictionDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountOperationRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.restrictionFlags.size;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.restrictionAdditions);
            size += arrayHelpers.size(this.restrictionDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    AccountOperationRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var restrictionFlags = AccountRestrictionFlags.deserialize(view.buffer);
        view.shiftRight(restrictionFlags.size);
        var restrictionAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var restrictionDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var accountRestrictionTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== accountRestrictionTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(accountRestrictionTransactionBodyReserved_1, ")"));
        var restrictionAdditions = arrayHelpers.readArrayCount(view.buffer, TransactionType, restrictionAdditionsCount);
        view.shiftRight(arrayHelpers.size(restrictionAdditions));
        var restrictionDeletions = arrayHelpers.readArrayCount(view.buffer, TransactionType, restrictionDeletionsCount);
        view.shiftRight(arrayHelpers.size(restrictionDeletions));
        var instance = new AccountOperationRestrictionTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._restrictionFlags = restrictionFlags;
        instance._restrictionAdditions = restrictionAdditions;
        instance._restrictionDeletions = restrictionDeletions;
        return instance;
    };
    AccountOperationRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._restrictionFlags.serialize());
        buffer.write(converter.intToBytes(this._restrictionAdditions.length, 1, false)); // bound: restriction_additions_count
        buffer.write(converter.intToBytes(this._restrictionDeletions.length, 1, false)); // bound: restriction_deletions_count
        buffer.write(converter.intToBytes(this._accountRestrictionTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._restrictionAdditions);
        arrayHelpers.writeArray(buffer, this._restrictionDeletions);
        return buffer.storage;
    };
    AccountOperationRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "restrictionFlags: ".concat(this._restrictionFlags.toString(), ", ");
        result += "restrictionAdditions: [".concat(this._restrictionAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "restrictionDeletions: [".concat(this._restrictionDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    AccountOperationRestrictionTransaction.TRANSACTION_VERSION = 1;
    AccountOperationRestrictionTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_OPERATION_RESTRICTION;
    AccountOperationRestrictionTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        restrictionFlags: 'enum:AccountRestrictionFlags',
        restrictionAdditions: 'array[TransactionType]',
        restrictionDeletions: 'array[TransactionType]'
    };
    return AccountOperationRestrictionTransaction;
}());
var EmbeddedAccountOperationRestrictionTransaction = /** @class */ (function () {
    function EmbeddedAccountOperationRestrictionTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedAccountOperationRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedAccountOperationRestrictionTransaction.TRANSACTION_TYPE;
        this._restrictionFlags = AccountRestrictionFlags.ADDRESS;
        this._restrictionAdditions = [];
        this._restrictionDeletions = [];
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._accountRestrictionTransactionBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "restrictionFlags", {
        get: function () {
            return this._restrictionFlags;
        },
        set: function (value) {
            this._restrictionFlags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "restrictionAdditions", {
        get: function () {
            return this._restrictionAdditions;
        },
        set: function (value) {
            this._restrictionAdditions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "restrictionDeletions", {
        get: function () {
            return this._restrictionDeletions;
        },
        set: function (value) {
            this._restrictionDeletions = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedAccountOperationRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.restrictionFlags.size;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.restrictionAdditions);
            size += arrayHelpers.size(this.restrictionDeletions);
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedAccountOperationRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var restrictionFlags = AccountRestrictionFlags.deserialize(view.buffer);
        view.shiftRight(restrictionFlags.size);
        var restrictionAdditionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var restrictionDeletionsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var accountRestrictionTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== accountRestrictionTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(accountRestrictionTransactionBodyReserved_1, ")"));
        var restrictionAdditions = arrayHelpers.readArrayCount(view.buffer, TransactionType, restrictionAdditionsCount);
        view.shiftRight(arrayHelpers.size(restrictionAdditions));
        var restrictionDeletions = arrayHelpers.readArrayCount(view.buffer, TransactionType, restrictionDeletionsCount);
        view.shiftRight(arrayHelpers.size(restrictionDeletions));
        var instance = new EmbeddedAccountOperationRestrictionTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._restrictionFlags = restrictionFlags;
        instance._restrictionAdditions = restrictionAdditions;
        instance._restrictionDeletions = restrictionDeletions;
        return instance;
    };
    EmbeddedAccountOperationRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._restrictionFlags.serialize());
        buffer.write(converter.intToBytes(this._restrictionAdditions.length, 1, false)); // bound: restriction_additions_count
        buffer.write(converter.intToBytes(this._restrictionDeletions.length, 1, false)); // bound: restriction_deletions_count
        buffer.write(converter.intToBytes(this._accountRestrictionTransactionBodyReserved_1, 4, false));
        arrayHelpers.writeArray(buffer, this._restrictionAdditions);
        arrayHelpers.writeArray(buffer, this._restrictionDeletions);
        return buffer.storage;
    };
    EmbeddedAccountOperationRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "restrictionFlags: ".concat(this._restrictionFlags.toString(), ", ");
        result += "restrictionAdditions: [".concat(this._restrictionAdditions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "restrictionDeletions: [".concat(this._restrictionDeletions.map(function (e) { return e.toString(); }).join(','), "], ");
        result += ')';
        return result;
    };
    EmbeddedAccountOperationRestrictionTransaction.TRANSACTION_VERSION = 1;
    EmbeddedAccountOperationRestrictionTransaction.TRANSACTION_TYPE = TransactionType.ACCOUNT_OPERATION_RESTRICTION;
    EmbeddedAccountOperationRestrictionTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        restrictionFlags: 'enum:AccountRestrictionFlags',
        restrictionAdditions: 'array[TransactionType]',
        restrictionDeletions: 'array[TransactionType]'
    };
    return EmbeddedAccountOperationRestrictionTransaction;
}());
var MosaicAddressRestrictionTransaction = /** @class */ (function () {
    function MosaicAddressRestrictionTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MosaicAddressRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MosaicAddressRestrictionTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaicId = new UnresolvedMosaicId();
        this._restrictionKey = 0n;
        this._previousRestrictionValue = 0n;
        this._newRestrictionValue = 0n;
        this._targetAddress = new UnresolvedAddress();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "restrictionKey", {
        get: function () {
            return this._restrictionKey;
        },
        set: function (value) {
            this._restrictionKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "previousRestrictionValue", {
        get: function () {
            return this._previousRestrictionValue;
        },
        set: function (value) {
            this._previousRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "newRestrictionValue", {
        get: function () {
            return this._newRestrictionValue;
        },
        set: function (value) {
            this._newRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicAddressRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.mosaicId.size;
            size += 8;
            size += 8;
            size += 8;
            size += this.targetAddress.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicAddressRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var restrictionKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var previousRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var newRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var instance = new MosaicAddressRestrictionTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaicId = mosaicId;
        instance._restrictionKey = restrictionKey;
        instance._previousRestrictionValue = previousRestrictionValue;
        instance._newRestrictionValue = newRestrictionValue;
        instance._targetAddress = targetAddress;
        return instance;
    };
    MosaicAddressRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(converter.intToBytes(this._restrictionKey, 8, false));
        buffer.write(converter.intToBytes(this._previousRestrictionValue, 8, false));
        buffer.write(converter.intToBytes(this._newRestrictionValue, 8, false));
        buffer.write(this._targetAddress.serialize());
        return buffer.storage;
    };
    MosaicAddressRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "restrictionKey: ".concat('0x'.concat(this._restrictionKey.toString(16)), ", ");
        result += "previousRestrictionValue: ".concat('0x'.concat(this._previousRestrictionValue.toString(16)), ", ");
        result += "newRestrictionValue: ".concat('0x'.concat(this._newRestrictionValue.toString(16)), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicAddressRestrictionTransaction.TRANSACTION_VERSION = 1;
    MosaicAddressRestrictionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_ADDRESS_RESTRICTION;
    MosaicAddressRestrictionTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaicId: 'pod:UnresolvedMosaicId',
        targetAddress: 'pod:UnresolvedAddress'
    };
    return MosaicAddressRestrictionTransaction;
}());
var EmbeddedMosaicAddressRestrictionTransaction = /** @class */ (function () {
    function EmbeddedMosaicAddressRestrictionTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMosaicAddressRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMosaicAddressRestrictionTransaction.TRANSACTION_TYPE;
        this._mosaicId = new UnresolvedMosaicId();
        this._restrictionKey = 0n;
        this._previousRestrictionValue = 0n;
        this._newRestrictionValue = 0n;
        this._targetAddress = new UnresolvedAddress();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "restrictionKey", {
        get: function () {
            return this._restrictionKey;
        },
        set: function (value) {
            this._restrictionKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "previousRestrictionValue", {
        get: function () {
            return this._previousRestrictionValue;
        },
        set: function (value) {
            this._previousRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "newRestrictionValue", {
        get: function () {
            return this._newRestrictionValue;
        },
        set: function (value) {
            this._newRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "targetAddress", {
        get: function () {
            return this._targetAddress;
        },
        set: function (value) {
            this._targetAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicAddressRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.mosaicId.size;
            size += 8;
            size += 8;
            size += 8;
            size += this.targetAddress.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMosaicAddressRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var mosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var restrictionKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var previousRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var newRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var targetAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(targetAddress.size);
        var instance = new EmbeddedMosaicAddressRestrictionTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._mosaicId = mosaicId;
        instance._restrictionKey = restrictionKey;
        instance._previousRestrictionValue = previousRestrictionValue;
        instance._newRestrictionValue = newRestrictionValue;
        instance._targetAddress = targetAddress;
        return instance;
    };
    EmbeddedMosaicAddressRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(converter.intToBytes(this._restrictionKey, 8, false));
        buffer.write(converter.intToBytes(this._previousRestrictionValue, 8, false));
        buffer.write(converter.intToBytes(this._newRestrictionValue, 8, false));
        buffer.write(this._targetAddress.serialize());
        return buffer.storage;
    };
    EmbeddedMosaicAddressRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "restrictionKey: ".concat('0x'.concat(this._restrictionKey.toString(16)), ", ");
        result += "previousRestrictionValue: ".concat('0x'.concat(this._previousRestrictionValue.toString(16)), ", ");
        result += "newRestrictionValue: ".concat('0x'.concat(this._newRestrictionValue.toString(16)), ", ");
        result += "targetAddress: ".concat(this._targetAddress.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedMosaicAddressRestrictionTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMosaicAddressRestrictionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_ADDRESS_RESTRICTION;
    EmbeddedMosaicAddressRestrictionTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        mosaicId: 'pod:UnresolvedMosaicId',
        targetAddress: 'pod:UnresolvedAddress'
    };
    return EmbeddedMosaicAddressRestrictionTransaction;
}());
var MosaicRestrictionKey = /** @class */ (function (_super) {
    __extends(MosaicRestrictionKey, _super);
    function MosaicRestrictionKey(mosaicRestrictionKey) {
        if (mosaicRestrictionKey === void 0) { mosaicRestrictionKey = 0n; }
        return _super.call(this, MosaicRestrictionKey.SIZE, mosaicRestrictionKey) || this;
    }
    MosaicRestrictionKey.deserialize = function (payload) {
        var byteArray = payload;
        return new MosaicRestrictionKey(converter.bytesToInt(byteArray, 8, false));
    };
    MosaicRestrictionKey.prototype.serialize = function () {
        return converter.intToBytes(this.value, 8, false);
    };
    MosaicRestrictionKey.SIZE = 8;
    return MosaicRestrictionKey;
}(BaseValue));
var MosaicRestrictionType = /** @class */ (function () {
    function MosaicRestrictionType(value) {
        this.value = value;
    }
    MosaicRestrictionType.valueToKey = function (value) {
        var values = [
            0, 1, 2, 3, 4, 5, 6
        ];
        var keys = [
            'NONE', 'EQ', 'NE', 'LT', 'LE', 'GT', 'GE'
        ];
        var index = values.indexOf(value);
        if (-1 === index)
            throw RangeError("invalid enum value ".concat(value));
        return keys[index];
    };
    MosaicRestrictionType.fromValue = function (value) {
        return MosaicRestrictionType[this.valueToKey(value)];
    };
    Object.defineProperty(MosaicRestrictionType.prototype, "size", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    MosaicRestrictionType.deserialize = function (payload) {
        var byteArray = payload;
        return this.fromValue(converter.bytesToInt(byteArray, 1, false));
    };
    MosaicRestrictionType.prototype.serialize = function () {
        return converter.intToBytes(this.value, 1, false);
    };
    MosaicRestrictionType.prototype.toString = function () {
        return "MosaicRestrictionType.".concat(MosaicRestrictionType.valueToKey(this.value));
    };
    MosaicRestrictionType.NONE = new MosaicRestrictionType(0);
    MosaicRestrictionType.EQ = new MosaicRestrictionType(1);
    MosaicRestrictionType.NE = new MosaicRestrictionType(2);
    MosaicRestrictionType.LT = new MosaicRestrictionType(3);
    MosaicRestrictionType.LE = new MosaicRestrictionType(4);
    MosaicRestrictionType.GT = new MosaicRestrictionType(5);
    MosaicRestrictionType.GE = new MosaicRestrictionType(6);
    return MosaicRestrictionType;
}());
var MosaicGlobalRestrictionTransaction = /** @class */ (function () {
    function MosaicGlobalRestrictionTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = MosaicGlobalRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = MosaicGlobalRestrictionTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._mosaicId = new UnresolvedMosaicId();
        this._referenceMosaicId = new UnresolvedMosaicId();
        this._restrictionKey = 0n;
        this._previousRestrictionValue = 0n;
        this._newRestrictionValue = 0n;
        this._previousRestrictionType = MosaicRestrictionType.NONE;
        this._newRestrictionType = MosaicRestrictionType.NONE;
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "referenceMosaicId", {
        get: function () {
            return this._referenceMosaicId;
        },
        set: function (value) {
            this._referenceMosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "restrictionKey", {
        get: function () {
            return this._restrictionKey;
        },
        set: function (value) {
            this._restrictionKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "previousRestrictionValue", {
        get: function () {
            return this._previousRestrictionValue;
        },
        set: function (value) {
            this._previousRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "newRestrictionValue", {
        get: function () {
            return this._newRestrictionValue;
        },
        set: function (value) {
            this._newRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "previousRestrictionType", {
        get: function () {
            return this._previousRestrictionType;
        },
        set: function (value) {
            this._previousRestrictionType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "newRestrictionType", {
        get: function () {
            return this._newRestrictionType;
        },
        set: function (value) {
            this._newRestrictionType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MosaicGlobalRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.mosaicId.size;
            size += this.referenceMosaicId.size;
            size += 8;
            size += 8;
            size += 8;
            size += this.previousRestrictionType.size;
            size += this.newRestrictionType.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    MosaicGlobalRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var mosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var referenceMosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(referenceMosaicId.size);
        var restrictionKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var previousRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var newRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var previousRestrictionType = MosaicRestrictionType.deserialize(view.buffer);
        view.shiftRight(previousRestrictionType.size);
        var newRestrictionType = MosaicRestrictionType.deserialize(view.buffer);
        view.shiftRight(newRestrictionType.size);
        var instance = new MosaicGlobalRestrictionTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._mosaicId = mosaicId;
        instance._referenceMosaicId = referenceMosaicId;
        instance._restrictionKey = restrictionKey;
        instance._previousRestrictionValue = previousRestrictionValue;
        instance._newRestrictionValue = newRestrictionValue;
        instance._previousRestrictionType = previousRestrictionType;
        instance._newRestrictionType = newRestrictionType;
        return instance;
    };
    MosaicGlobalRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._referenceMosaicId.serialize());
        buffer.write(converter.intToBytes(this._restrictionKey, 8, false));
        buffer.write(converter.intToBytes(this._previousRestrictionValue, 8, false));
        buffer.write(converter.intToBytes(this._newRestrictionValue, 8, false));
        buffer.write(this._previousRestrictionType.serialize());
        buffer.write(this._newRestrictionType.serialize());
        return buffer.storage;
    };
    MosaicGlobalRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "referenceMosaicId: ".concat(this._referenceMosaicId.toString(), ", ");
        result += "restrictionKey: ".concat('0x'.concat(this._restrictionKey.toString(16)), ", ");
        result += "previousRestrictionValue: ".concat('0x'.concat(this._previousRestrictionValue.toString(16)), ", ");
        result += "newRestrictionValue: ".concat('0x'.concat(this._newRestrictionValue.toString(16)), ", ");
        result += "previousRestrictionType: ".concat(this._previousRestrictionType.toString(), ", ");
        result += "newRestrictionType: ".concat(this._newRestrictionType.toString(), ", ");
        result += ')';
        return result;
    };
    MosaicGlobalRestrictionTransaction.TRANSACTION_VERSION = 1;
    MosaicGlobalRestrictionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_GLOBAL_RESTRICTION;
    MosaicGlobalRestrictionTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        mosaicId: 'pod:UnresolvedMosaicId',
        referenceMosaicId: 'pod:UnresolvedMosaicId',
        previousRestrictionType: 'enum:MosaicRestrictionType',
        newRestrictionType: 'enum:MosaicRestrictionType'
    };
    return MosaicGlobalRestrictionTransaction;
}());
var EmbeddedMosaicGlobalRestrictionTransaction = /** @class */ (function () {
    function EmbeddedMosaicGlobalRestrictionTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedMosaicGlobalRestrictionTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedMosaicGlobalRestrictionTransaction.TRANSACTION_TYPE;
        this._mosaicId = new UnresolvedMosaicId();
        this._referenceMosaicId = new UnresolvedMosaicId();
        this._restrictionKey = 0n;
        this._previousRestrictionValue = 0n;
        this._newRestrictionValue = 0n;
        this._previousRestrictionType = MosaicRestrictionType.NONE;
        this._newRestrictionType = MosaicRestrictionType.NONE;
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "mosaicId", {
        get: function () {
            return this._mosaicId;
        },
        set: function (value) {
            this._mosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "referenceMosaicId", {
        get: function () {
            return this._referenceMosaicId;
        },
        set: function (value) {
            this._referenceMosaicId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "restrictionKey", {
        get: function () {
            return this._restrictionKey;
        },
        set: function (value) {
            this._restrictionKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "previousRestrictionValue", {
        get: function () {
            return this._previousRestrictionValue;
        },
        set: function (value) {
            this._previousRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "newRestrictionValue", {
        get: function () {
            return this._newRestrictionValue;
        },
        set: function (value) {
            this._newRestrictionValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "previousRestrictionType", {
        get: function () {
            return this._previousRestrictionType;
        },
        set: function (value) {
            this._previousRestrictionType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "newRestrictionType", {
        get: function () {
            return this._newRestrictionType;
        },
        set: function (value) {
            this._newRestrictionType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedMosaicGlobalRestrictionTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.mosaicId.size;
            size += this.referenceMosaicId.size;
            size += 8;
            size += 8;
            size += 8;
            size += this.previousRestrictionType.size;
            size += this.newRestrictionType.size;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedMosaicGlobalRestrictionTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var mosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(mosaicId.size);
        var referenceMosaicId = UnresolvedMosaicId.deserialize(view.buffer);
        view.shiftRight(referenceMosaicId.size);
        var restrictionKey = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var previousRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var newRestrictionValue = converter.bytesToInt(view.buffer, 8, false);
        view.shiftRight(8);
        var previousRestrictionType = MosaicRestrictionType.deserialize(view.buffer);
        view.shiftRight(previousRestrictionType.size);
        var newRestrictionType = MosaicRestrictionType.deserialize(view.buffer);
        view.shiftRight(newRestrictionType.size);
        var instance = new EmbeddedMosaicGlobalRestrictionTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._mosaicId = mosaicId;
        instance._referenceMosaicId = referenceMosaicId;
        instance._restrictionKey = restrictionKey;
        instance._previousRestrictionValue = previousRestrictionValue;
        instance._newRestrictionValue = newRestrictionValue;
        instance._previousRestrictionType = previousRestrictionType;
        instance._newRestrictionType = newRestrictionType;
        return instance;
    };
    EmbeddedMosaicGlobalRestrictionTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._mosaicId.serialize());
        buffer.write(this._referenceMosaicId.serialize());
        buffer.write(converter.intToBytes(this._restrictionKey, 8, false));
        buffer.write(converter.intToBytes(this._previousRestrictionValue, 8, false));
        buffer.write(converter.intToBytes(this._newRestrictionValue, 8, false));
        buffer.write(this._previousRestrictionType.serialize());
        buffer.write(this._newRestrictionType.serialize());
        return buffer.storage;
    };
    EmbeddedMosaicGlobalRestrictionTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "mosaicId: ".concat(this._mosaicId.toString(), ", ");
        result += "referenceMosaicId: ".concat(this._referenceMosaicId.toString(), ", ");
        result += "restrictionKey: ".concat('0x'.concat(this._restrictionKey.toString(16)), ", ");
        result += "previousRestrictionValue: ".concat('0x'.concat(this._previousRestrictionValue.toString(16)), ", ");
        result += "newRestrictionValue: ".concat('0x'.concat(this._newRestrictionValue.toString(16)), ", ");
        result += "previousRestrictionType: ".concat(this._previousRestrictionType.toString(), ", ");
        result += "newRestrictionType: ".concat(this._newRestrictionType.toString(), ", ");
        result += ')';
        return result;
    };
    EmbeddedMosaicGlobalRestrictionTransaction.TRANSACTION_VERSION = 1;
    EmbeddedMosaicGlobalRestrictionTransaction.TRANSACTION_TYPE = TransactionType.MOSAIC_GLOBAL_RESTRICTION;
    EmbeddedMosaicGlobalRestrictionTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        mosaicId: 'pod:UnresolvedMosaicId',
        referenceMosaicId: 'pod:UnresolvedMosaicId',
        previousRestrictionType: 'enum:MosaicRestrictionType',
        newRestrictionType: 'enum:MosaicRestrictionType'
    };
    return EmbeddedMosaicGlobalRestrictionTransaction;
}());
var TransferTransaction = /** @class */ (function () {
    function TransferTransaction() {
        this._signature = new Signature();
        this._signerPublicKey = new PublicKey();
        this._version = TransferTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = TransferTransaction.TRANSACTION_TYPE;
        this._fee = new Amount();
        this._deadline = new Timestamp();
        this._recipientAddress = new UnresolvedAddress();
        this._mosaics = [];
        this._message = new Uint8Array();
        this._verifiableEntityHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._transferTransactionBodyReserved_1 = 0; // reserved field
        this._transferTransactionBodyReserved_2 = 0; // reserved field
    }
    Object.defineProperty(TransferTransaction.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        set: function (value) {
            this._signature = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "fee", {
        get: function () {
            return this._fee;
        },
        set: function (value) {
            this._fee = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "deadline", {
        get: function () {
            return this._deadline;
        },
        set: function (value) {
            this._deadline = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "mosaics", {
        get: function () {
            return this._mosaics;
        },
        set: function (value) {
            this._mosaics = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransferTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signature.size;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.fee.size;
            size += this.deadline.size;
            size += this.recipientAddress.size;
            size += 2;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.mosaics);
            size += this._message.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    TransferTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var verifiableEntityHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== verifiableEntityHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(verifiableEntityHeaderReserved_1, ")"));
        var signature = Signature.deserialize(view.buffer);
        view.shiftRight(signature.size);
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var fee = Amount.deserialize(view.buffer);
        view.shiftRight(fee.size);
        var deadline = Timestamp.deserialize(view.buffer);
        view.shiftRight(deadline.size);
        var recipientAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var messageSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var mosaicsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var transferTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        if (0 !== transferTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(transferTransactionBodyReserved_1, ")"));
        var transferTransactionBodyReserved_2 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== transferTransactionBodyReserved_2)
            throw RangeError("Invalid value of reserved field (".concat(transferTransactionBodyReserved_2, ")"));
        var mosaics = arrayHelpers.readArrayCount(view.buffer, UnresolvedMosaic, mosaicsCount, function (e) { return e.mosaicId.value; });
        view.shiftRight(arrayHelpers.size(mosaics));
        var message = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, messageSize);
        view.shiftRight(messageSize);
        var instance = new TransferTransaction();
        instance._signature = signature;
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._fee = fee;
        instance._deadline = deadline;
        instance._recipientAddress = recipientAddress;
        instance._mosaics = mosaics;
        instance._message = message;
        return instance;
    };
    TransferTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._verifiableEntityHeaderReserved_1, 4, false));
        buffer.write(this._signature.serialize());
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._fee.serialize());
        buffer.write(this._deadline.serialize());
        buffer.write(this._recipientAddress.serialize());
        buffer.write(converter.intToBytes(this._message.length, 2, false)); // bound: message_size
        buffer.write(converter.intToBytes(this._mosaics.length, 1, false)); // bound: mosaics_count
        buffer.write(converter.intToBytes(this._transferTransactionBodyReserved_1, 1, false));
        buffer.write(converter.intToBytes(this._transferTransactionBodyReserved_2, 4, false));
        arrayHelpers.writeArray(buffer, this._mosaics, function (e) { return e.mosaicId.value; });
        buffer.write(this._message);
        return buffer.storage;
    };
    TransferTransaction.prototype.toString = function () {
        var result = '(';
        result += "signature: ".concat(this._signature.toString(), ", ");
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "fee: ".concat(this._fee.toString(), ", ");
        result += "deadline: ".concat(this._deadline.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "mosaics: [".concat(this._mosaics.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "message: hex(".concat(converter.uint8ToHex(this._message), "), ");
        result += ')';
        return result;
    };
    TransferTransaction.TRANSACTION_VERSION = 1;
    TransferTransaction.TRANSACTION_TYPE = TransactionType.TRANSFER;
    TransferTransaction.TYPE_HINTS = {
        signature: 'pod:Signature',
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        fee: 'pod:Amount',
        deadline: 'pod:Timestamp',
        recipientAddress: 'pod:UnresolvedAddress',
        mosaics: 'array[UnresolvedMosaic]',
        message: 'bytes_array'
    };
    return TransferTransaction;
}());
var EmbeddedTransferTransaction = /** @class */ (function () {
    function EmbeddedTransferTransaction() {
        this._signerPublicKey = new PublicKey();
        this._version = EmbeddedTransferTransaction.TRANSACTION_VERSION;
        this._network = NetworkType.MAINNET;
        this._type = EmbeddedTransferTransaction.TRANSACTION_TYPE;
        this._recipientAddress = new UnresolvedAddress();
        this._mosaics = [];
        this._message = new Uint8Array();
        this._embeddedTransactionHeaderReserved_1 = 0; // reserved field
        this._entityBodyReserved_1 = 0; // reserved field
        this._transferTransactionBodyReserved_1 = 0; // reserved field
        this._transferTransactionBodyReserved_2 = 0; // reserved field
    }
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "signerPublicKey", {
        get: function () {
            return this._signerPublicKey;
        },
        set: function (value) {
            this._signerPublicKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "version", {
        get: function () {
            return this._version;
        },
        set: function (value) {
            this._version = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "network", {
        get: function () {
            return this._network;
        },
        set: function (value) {
            this._network = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "recipientAddress", {
        get: function () {
            return this._recipientAddress;
        },
        set: function (value) {
            this._recipientAddress = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "mosaics", {
        get: function () {
            return this._mosaics;
        },
        set: function (value) {
            this._mosaics = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmbeddedTransferTransaction.prototype, "size", {
        get: function () {
            var size = 0;
            size += 4;
            size += 4;
            size += this.signerPublicKey.size;
            size += 4;
            size += 1;
            size += this.network.size;
            size += this.type.size;
            size += this.recipientAddress.size;
            size += 2;
            size += 1;
            size += 1;
            size += 4;
            size += arrayHelpers.size(this.mosaics);
            size += this._message.length;
            return size;
        },
        enumerable: false,
        configurable: true
    });
    EmbeddedTransferTransaction.deserialize = function (payload) {
        var view = new BufferView(payload);
        var size = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        view.shrink(size - 4);
        var embeddedTransactionHeaderReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== embeddedTransactionHeaderReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(embeddedTransactionHeaderReserved_1, ")"));
        var signerPublicKey = PublicKey.deserialize(view.buffer);
        view.shiftRight(signerPublicKey.size);
        var entityBodyReserved_1 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== entityBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(entityBodyReserved_1, ")"));
        var version = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var network = NetworkType.deserialize(view.buffer);
        view.shiftRight(network.size);
        var type = TransactionType.deserialize(view.buffer);
        view.shiftRight(type.size);
        var recipientAddress = UnresolvedAddress.deserialize(view.buffer);
        view.shiftRight(recipientAddress.size);
        var messageSize = converter.bytesToInt(view.buffer, 2, false);
        view.shiftRight(2);
        var mosaicsCount = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        var transferTransactionBodyReserved_1 = converter.bytesToInt(view.buffer, 1, false);
        view.shiftRight(1);
        if (0 !== transferTransactionBodyReserved_1)
            throw RangeError("Invalid value of reserved field (".concat(transferTransactionBodyReserved_1, ")"));
        var transferTransactionBodyReserved_2 = converter.bytesToInt(view.buffer, 4, false);
        view.shiftRight(4);
        if (0 !== transferTransactionBodyReserved_2)
            throw RangeError("Invalid value of reserved field (".concat(transferTransactionBodyReserved_2, ")"));
        var mosaics = arrayHelpers.readArrayCount(view.buffer, UnresolvedMosaic, mosaicsCount, function (e) { return e.mosaicId.value; });
        view.shiftRight(arrayHelpers.size(mosaics));
        var message = new Uint8Array(view.buffer.buffer, view.buffer.byteOffset, messageSize);
        view.shiftRight(messageSize);
        var instance = new EmbeddedTransferTransaction();
        instance._signerPublicKey = signerPublicKey;
        instance._version = version;
        instance._network = network;
        instance._type = type;
        instance._recipientAddress = recipientAddress;
        instance._mosaics = mosaics;
        instance._message = message;
        return instance;
    };
    EmbeddedTransferTransaction.prototype.serialize = function () {
        var buffer = new Writer(this.size);
        buffer.write(converter.intToBytes(this.size, 4, false));
        buffer.write(converter.intToBytes(this._embeddedTransactionHeaderReserved_1, 4, false));
        buffer.write(this._signerPublicKey.serialize());
        buffer.write(converter.intToBytes(this._entityBodyReserved_1, 4, false));
        buffer.write(converter.intToBytes(this._version, 1, false));
        buffer.write(this._network.serialize());
        buffer.write(this._type.serialize());
        buffer.write(this._recipientAddress.serialize());
        buffer.write(converter.intToBytes(this._message.length, 2, false)); // bound: message_size
        buffer.write(converter.intToBytes(this._mosaics.length, 1, false)); // bound: mosaics_count
        buffer.write(converter.intToBytes(this._transferTransactionBodyReserved_1, 1, false));
        buffer.write(converter.intToBytes(this._transferTransactionBodyReserved_2, 4, false));
        arrayHelpers.writeArray(buffer, this._mosaics, function (e) { return e.mosaicId.value; });
        buffer.write(this._message);
        return buffer.storage;
    };
    EmbeddedTransferTransaction.prototype.toString = function () {
        var result = '(';
        result += "signerPublicKey: ".concat(this._signerPublicKey.toString(), ", ");
        result += "version: ".concat('0x'.concat(this._version.toString(16)), ", ");
        result += "network: ".concat(this._network.toString(), ", ");
        result += "type: ".concat(this._type.toString(), ", ");
        result += "recipientAddress: ".concat(this._recipientAddress.toString(), ", ");
        result += "mosaics: [".concat(this._mosaics.map(function (e) { return e.toString(); }).join(','), "], ");
        result += "message: hex(".concat(converter.uint8ToHex(this._message), "), ");
        result += ')';
        return result;
    };
    EmbeddedTransferTransaction.TRANSACTION_VERSION = 1;
    EmbeddedTransferTransaction.TRANSACTION_TYPE = TransactionType.TRANSFER;
    EmbeddedTransferTransaction.TYPE_HINTS = {
        signerPublicKey: 'pod:PublicKey',
        network: 'enum:NetworkType',
        type: 'enum:TransactionType',
        recipientAddress: 'pod:UnresolvedAddress',
        mosaics: 'array[UnresolvedMosaic]',
        message: 'bytes_array'
    };
    return EmbeddedTransferTransaction;
}());
var TransactionFactory = /** @class */ (function () {
    function TransactionFactory() {
    }
    TransactionFactory.toKey = function (values) {
        if (1 === values.length)
            return values[0];
        // assume each key is at most 32bits
        return values.map(function (n) { return BigInt(n); }).reduce(function (accumulator, value) { return (accumulator << 32n) + value; });
    };
    TransactionFactory.deserialize = function (payload) {
        var view = new BufferView(payload);
        var parent = Transaction.deserialize(view.buffer);
        var mapping = new Map([
            [TransactionFactory.toKey([AccountKeyLinkTransaction.TRANSACTION_TYPE.value]), AccountKeyLinkTransaction],
            [TransactionFactory.toKey([NodeKeyLinkTransaction.TRANSACTION_TYPE.value]), NodeKeyLinkTransaction],
            [TransactionFactory.toKey([AggregateCompleteTransaction.TRANSACTION_TYPE.value]), AggregateCompleteTransaction],
            [TransactionFactory.toKey([AggregateBondedTransaction.TRANSACTION_TYPE.value]), AggregateBondedTransaction],
            [TransactionFactory.toKey([VotingKeyLinkTransaction.TRANSACTION_TYPE.value]), VotingKeyLinkTransaction],
            [TransactionFactory.toKey([VrfKeyLinkTransaction.TRANSACTION_TYPE.value]), VrfKeyLinkTransaction],
            [TransactionFactory.toKey([HashLockTransaction.TRANSACTION_TYPE.value]), HashLockTransaction],
            [TransactionFactory.toKey([SecretLockTransaction.TRANSACTION_TYPE.value]), SecretLockTransaction],
            [TransactionFactory.toKey([SecretProofTransaction.TRANSACTION_TYPE.value]), SecretProofTransaction],
            [TransactionFactory.toKey([AccountMetadataTransaction.TRANSACTION_TYPE.value]), AccountMetadataTransaction],
            [TransactionFactory.toKey([MosaicMetadataTransaction.TRANSACTION_TYPE.value]), MosaicMetadataTransaction],
            [TransactionFactory.toKey([NamespaceMetadataTransaction.TRANSACTION_TYPE.value]), NamespaceMetadataTransaction],
            [TransactionFactory.toKey([MosaicDefinitionTransaction.TRANSACTION_TYPE.value]), MosaicDefinitionTransaction],
            [TransactionFactory.toKey([MosaicSupplyChangeTransaction.TRANSACTION_TYPE.value]), MosaicSupplyChangeTransaction],
            [TransactionFactory.toKey([MosaicSupplyRevocationTransaction.TRANSACTION_TYPE.value]), MosaicSupplyRevocationTransaction],
            [TransactionFactory.toKey([MultisigAccountModificationTransaction.TRANSACTION_TYPE.value]), MultisigAccountModificationTransaction],
            [TransactionFactory.toKey([AddressAliasTransaction.TRANSACTION_TYPE.value]), AddressAliasTransaction],
            [TransactionFactory.toKey([MosaicAliasTransaction.TRANSACTION_TYPE.value]), MosaicAliasTransaction],
            [TransactionFactory.toKey([NamespaceRegistrationTransaction.TRANSACTION_TYPE.value]), NamespaceRegistrationTransaction],
            [TransactionFactory.toKey([AccountAddressRestrictionTransaction.TRANSACTION_TYPE.value]), AccountAddressRestrictionTransaction],
            [TransactionFactory.toKey([AccountMosaicRestrictionTransaction.TRANSACTION_TYPE.value]), AccountMosaicRestrictionTransaction],
            [TransactionFactory.toKey([AccountOperationRestrictionTransaction.TRANSACTION_TYPE.value]), AccountOperationRestrictionTransaction],
            [TransactionFactory.toKey([MosaicAddressRestrictionTransaction.TRANSACTION_TYPE.value]), MosaicAddressRestrictionTransaction],
            [TransactionFactory.toKey([MosaicGlobalRestrictionTransaction.TRANSACTION_TYPE.value]), MosaicGlobalRestrictionTransaction],
            [TransactionFactory.toKey([TransferTransaction.TRANSACTION_TYPE.value]), TransferTransaction]
        ]);
        var discriminator = TransactionFactory.toKey([parent.type.value]);
        var factory_class = mapping.get(discriminator);
        return factory_class.deserialize(view.buffer);
    };
    TransactionFactory.createByName = function (entityName) {
        var mapping = {
            account_key_link_transaction: AccountKeyLinkTransaction,
            node_key_link_transaction: NodeKeyLinkTransaction,
            aggregate_complete_transaction: AggregateCompleteTransaction,
            aggregate_bonded_transaction: AggregateBondedTransaction,
            voting_key_link_transaction: VotingKeyLinkTransaction,
            vrf_key_link_transaction: VrfKeyLinkTransaction,
            hash_lock_transaction: HashLockTransaction,
            secret_lock_transaction: SecretLockTransaction,
            secret_proof_transaction: SecretProofTransaction,
            account_metadata_transaction: AccountMetadataTransaction,
            mosaic_metadata_transaction: MosaicMetadataTransaction,
            namespace_metadata_transaction: NamespaceMetadataTransaction,
            mosaic_definition_transaction: MosaicDefinitionTransaction,
            mosaic_supply_change_transaction: MosaicSupplyChangeTransaction,
            mosaic_supply_revocation_transaction: MosaicSupplyRevocationTransaction,
            multisig_account_modification_transaction: MultisigAccountModificationTransaction,
            address_alias_transaction: AddressAliasTransaction,
            mosaic_alias_transaction: MosaicAliasTransaction,
            namespace_registration_transaction: NamespaceRegistrationTransaction,
            account_address_restriction_transaction: AccountAddressRestrictionTransaction,
            account_mosaic_restriction_transaction: AccountMosaicRestrictionTransaction,
            account_operation_restriction_transaction: AccountOperationRestrictionTransaction,
            mosaic_address_restriction_transaction: MosaicAddressRestrictionTransaction,
            mosaic_global_restriction_transaction: MosaicGlobalRestrictionTransaction,
            transfer_transaction: TransferTransaction
        };
        if (!Object.prototype.hasOwnProperty.call(mapping, entityName))
            throw RangeError('unknown Transaction type');
        return new mapping[entityName]();
    };
    return TransactionFactory;
}());
var EmbeddedTransactionFactory = /** @class */ (function () {
    function EmbeddedTransactionFactory() {
    }
    EmbeddedTransactionFactory.toKey = function (values) {
        if (1 === values.length)
            return values[0];
        // assume each key is at most 32bits
        return values.map(function (n) { return BigInt(n); }).reduce(function (accumulator, value) { return (accumulator << 32n) + value; });
    };
    EmbeddedTransactionFactory.deserialize = function (payload) {
        var view = new BufferView(payload);
        var parent = EmbeddedTransaction.deserialize(view.buffer);
        var mapping = new Map([
            [EmbeddedTransactionFactory.toKey([EmbeddedAccountKeyLinkTransaction.TRANSACTION_TYPE.value]), EmbeddedAccountKeyLinkTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedNodeKeyLinkTransaction.TRANSACTION_TYPE.value]), EmbeddedNodeKeyLinkTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedVotingKeyLinkTransaction.TRANSACTION_TYPE.value]), EmbeddedVotingKeyLinkTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedVrfKeyLinkTransaction.TRANSACTION_TYPE.value]), EmbeddedVrfKeyLinkTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedHashLockTransaction.TRANSACTION_TYPE.value]), EmbeddedHashLockTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedSecretLockTransaction.TRANSACTION_TYPE.value]), EmbeddedSecretLockTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedSecretProofTransaction.TRANSACTION_TYPE.value]), EmbeddedSecretProofTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedAccountMetadataTransaction.TRANSACTION_TYPE.value]), EmbeddedAccountMetadataTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMosaicMetadataTransaction.TRANSACTION_TYPE.value]), EmbeddedMosaicMetadataTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedNamespaceMetadataTransaction.TRANSACTION_TYPE.value]), EmbeddedNamespaceMetadataTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMosaicDefinitionTransaction.TRANSACTION_TYPE.value]), EmbeddedMosaicDefinitionTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMosaicSupplyChangeTransaction.TRANSACTION_TYPE.value]), EmbeddedMosaicSupplyChangeTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMosaicSupplyRevocationTransaction.TRANSACTION_TYPE.value]), EmbeddedMosaicSupplyRevocationTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMultisigAccountModificationTransaction.TRANSACTION_TYPE.value]), EmbeddedMultisigAccountModificationTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedAddressAliasTransaction.TRANSACTION_TYPE.value]), EmbeddedAddressAliasTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMosaicAliasTransaction.TRANSACTION_TYPE.value]), EmbeddedMosaicAliasTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedNamespaceRegistrationTransaction.TRANSACTION_TYPE.value]), EmbeddedNamespaceRegistrationTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedAccountAddressRestrictionTransaction.TRANSACTION_TYPE.value]), EmbeddedAccountAddressRestrictionTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedAccountMosaicRestrictionTransaction.TRANSACTION_TYPE.value]), EmbeddedAccountMosaicRestrictionTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedAccountOperationRestrictionTransaction.TRANSACTION_TYPE.value]), EmbeddedAccountOperationRestrictionTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMosaicAddressRestrictionTransaction.TRANSACTION_TYPE.value]), EmbeddedMosaicAddressRestrictionTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedMosaicGlobalRestrictionTransaction.TRANSACTION_TYPE.value]), EmbeddedMosaicGlobalRestrictionTransaction],
            [EmbeddedTransactionFactory.toKey([EmbeddedTransferTransaction.TRANSACTION_TYPE.value]), EmbeddedTransferTransaction]
        ]);
        var discriminator = EmbeddedTransactionFactory.toKey([parent.type.value]);
        var factory_class = mapping.get(discriminator);
        return factory_class.deserialize(view.buffer);
    };
    EmbeddedTransactionFactory.createByName = function (entityName) {
        var mapping = {
            account_key_link_transaction: EmbeddedAccountKeyLinkTransaction,
            node_key_link_transaction: EmbeddedNodeKeyLinkTransaction,
            voting_key_link_transaction: EmbeddedVotingKeyLinkTransaction,
            vrf_key_link_transaction: EmbeddedVrfKeyLinkTransaction,
            hash_lock_transaction: EmbeddedHashLockTransaction,
            secret_lock_transaction: EmbeddedSecretLockTransaction,
            secret_proof_transaction: EmbeddedSecretProofTransaction,
            account_metadata_transaction: EmbeddedAccountMetadataTransaction,
            mosaic_metadata_transaction: EmbeddedMosaicMetadataTransaction,
            namespace_metadata_transaction: EmbeddedNamespaceMetadataTransaction,
            mosaic_definition_transaction: EmbeddedMosaicDefinitionTransaction,
            mosaic_supply_change_transaction: EmbeddedMosaicSupplyChangeTransaction,
            mosaic_supply_revocation_transaction: EmbeddedMosaicSupplyRevocationTransaction,
            multisig_account_modification_transaction: EmbeddedMultisigAccountModificationTransaction,
            address_alias_transaction: EmbeddedAddressAliasTransaction,
            mosaic_alias_transaction: EmbeddedMosaicAliasTransaction,
            namespace_registration_transaction: EmbeddedNamespaceRegistrationTransaction,
            account_address_restriction_transaction: EmbeddedAccountAddressRestrictionTransaction,
            account_mosaic_restriction_transaction: EmbeddedAccountMosaicRestrictionTransaction,
            account_operation_restriction_transaction: EmbeddedAccountOperationRestrictionTransaction,
            mosaic_address_restriction_transaction: EmbeddedMosaicAddressRestrictionTransaction,
            mosaic_global_restriction_transaction: EmbeddedMosaicGlobalRestrictionTransaction,
            transfer_transaction: EmbeddedTransferTransaction
        };
        if (!Object.prototype.hasOwnProperty.call(mapping, entityName))
            throw RangeError('unknown EmbeddedTransaction type');
        return new mapping[entityName]();
    };
    return EmbeddedTransactionFactory;
}());
module.exports = {
    Amount: Amount,
    BlockDuration: BlockDuration,
    BlockFeeMultiplier: BlockFeeMultiplier,
    Difficulty: Difficulty,
    FinalizationEpoch: FinalizationEpoch,
    FinalizationPoint: FinalizationPoint,
    Height: Height,
    Importance: Importance,
    ImportanceHeight: ImportanceHeight,
    UnresolvedMosaicId: UnresolvedMosaicId,
    MosaicId: MosaicId,
    Timestamp: Timestamp,
    UnresolvedAddress: UnresolvedAddress,
    Address: Address,
    Hash256: Hash256,
    Hash512: Hash512,
    PublicKey: PublicKey,
    VotingPublicKey: VotingPublicKey,
    Signature: Signature,
    Mosaic: Mosaic,
    UnresolvedMosaic: UnresolvedMosaic,
    LinkAction: LinkAction,
    NetworkType: NetworkType,
    TransactionType: TransactionType,
    Transaction: Transaction,
    EmbeddedTransaction: EmbeddedTransaction,
    AccountKeyLinkTransaction: AccountKeyLinkTransaction,
    EmbeddedAccountKeyLinkTransaction: EmbeddedAccountKeyLinkTransaction,
    NodeKeyLinkTransaction: NodeKeyLinkTransaction,
    EmbeddedNodeKeyLinkTransaction: EmbeddedNodeKeyLinkTransaction,
    Cosignature: Cosignature,
    DetachedCosignature: DetachedCosignature,
    AggregateCompleteTransaction: AggregateCompleteTransaction,
    AggregateBondedTransaction: AggregateBondedTransaction,
    VotingKeyLinkTransaction: VotingKeyLinkTransaction,
    EmbeddedVotingKeyLinkTransaction: EmbeddedVotingKeyLinkTransaction,
    VrfKeyLinkTransaction: VrfKeyLinkTransaction,
    EmbeddedVrfKeyLinkTransaction: EmbeddedVrfKeyLinkTransaction,
    HashLockTransaction: HashLockTransaction,
    EmbeddedHashLockTransaction: EmbeddedHashLockTransaction,
    LockHashAlgorithm: LockHashAlgorithm,
    SecretLockTransaction: SecretLockTransaction,
    EmbeddedSecretLockTransaction: EmbeddedSecretLockTransaction,
    SecretProofTransaction: SecretProofTransaction,
    EmbeddedSecretProofTransaction: EmbeddedSecretProofTransaction,
    AccountMetadataTransaction: AccountMetadataTransaction,
    EmbeddedAccountMetadataTransaction: EmbeddedAccountMetadataTransaction,
    MosaicMetadataTransaction: MosaicMetadataTransaction,
    EmbeddedMosaicMetadataTransaction: EmbeddedMosaicMetadataTransaction,
    NamespaceId: NamespaceId,
    NamespaceRegistrationType: NamespaceRegistrationType,
    AliasAction: AliasAction,
    NamespaceMetadataTransaction: NamespaceMetadataTransaction,
    EmbeddedNamespaceMetadataTransaction: EmbeddedNamespaceMetadataTransaction,
    MosaicNonce: MosaicNonce,
    MosaicFlags: MosaicFlags,
    MosaicSupplyChangeAction: MosaicSupplyChangeAction,
    MosaicDefinitionTransaction: MosaicDefinitionTransaction,
    EmbeddedMosaicDefinitionTransaction: EmbeddedMosaicDefinitionTransaction,
    MosaicSupplyChangeTransaction: MosaicSupplyChangeTransaction,
    EmbeddedMosaicSupplyChangeTransaction: EmbeddedMosaicSupplyChangeTransaction,
    MosaicSupplyRevocationTransaction: MosaicSupplyRevocationTransaction,
    EmbeddedMosaicSupplyRevocationTransaction: EmbeddedMosaicSupplyRevocationTransaction,
    MultisigAccountModificationTransaction: MultisigAccountModificationTransaction,
    EmbeddedMultisigAccountModificationTransaction: EmbeddedMultisigAccountModificationTransaction,
    AddressAliasTransaction: AddressAliasTransaction,
    EmbeddedAddressAliasTransaction: EmbeddedAddressAliasTransaction,
    MosaicAliasTransaction: MosaicAliasTransaction,
    EmbeddedMosaicAliasTransaction: EmbeddedMosaicAliasTransaction,
    NamespaceRegistrationTransaction: NamespaceRegistrationTransaction,
    EmbeddedNamespaceRegistrationTransaction: EmbeddedNamespaceRegistrationTransaction,
    AccountRestrictionFlags: AccountRestrictionFlags,
    AccountAddressRestrictionTransaction: AccountAddressRestrictionTransaction,
    EmbeddedAccountAddressRestrictionTransaction: EmbeddedAccountAddressRestrictionTransaction,
    AccountMosaicRestrictionTransaction: AccountMosaicRestrictionTransaction,
    EmbeddedAccountMosaicRestrictionTransaction: EmbeddedAccountMosaicRestrictionTransaction,
    AccountOperationRestrictionTransaction: AccountOperationRestrictionTransaction,
    EmbeddedAccountOperationRestrictionTransaction: EmbeddedAccountOperationRestrictionTransaction,
    MosaicAddressRestrictionTransaction: MosaicAddressRestrictionTransaction,
    EmbeddedMosaicAddressRestrictionTransaction: EmbeddedMosaicAddressRestrictionTransaction,
    MosaicRestrictionKey: MosaicRestrictionKey,
    MosaicRestrictionType: MosaicRestrictionType,
    MosaicGlobalRestrictionTransaction: MosaicGlobalRestrictionTransaction,
    EmbeddedMosaicGlobalRestrictionTransaction: EmbeddedMosaicGlobalRestrictionTransaction,
    TransferTransaction: TransferTransaction,
    EmbeddedTransferTransaction: EmbeddedTransferTransaction,
    TransactionFactory: TransactionFactory,
    EmbeddedTransactionFactory: EmbeddedTransactionFactory
};
