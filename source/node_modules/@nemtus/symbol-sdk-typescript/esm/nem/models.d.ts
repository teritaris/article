export class Amount extends BaseValue {
    static SIZE: number;
    static deserialize(payload: any): Amount;
    constructor(amount?: bigint);
    serialize(): Uint8Array;
}
export class Height extends BaseValue {
    static SIZE: number;
    static deserialize(payload: any): Height;
    constructor(height?: bigint);
    serialize(): Uint8Array;
}
export class Timestamp extends BaseValue {
    static SIZE: number;
    static deserialize(payload: any): Timestamp;
    constructor(timestamp?: number);
    serialize(): Uint8Array;
}
export class Address extends ByteArray {
    static SIZE: number;
    static deserialize(payload: any): Address;
    constructor(address?: Uint8Array);
    get size(): number;
    serialize(): Uint8Array;
}
export class Hash256 extends ByteArray {
    static SIZE: number;
    static deserialize(payload: any): Hash256;
    constructor(hash256?: Uint8Array);
    get size(): number;
    serialize(): Uint8Array;
}
export class PublicKey extends ByteArray {
    static SIZE: number;
    static deserialize(payload: any): PublicKey;
    constructor(publicKey?: Uint8Array);
    get size(): number;
    serialize(): Uint8Array;
}
export class Signature extends ByteArray {
    static SIZE: number;
    static deserialize(payload: any): Signature;
    constructor(signature?: Uint8Array);
    get size(): number;
    serialize(): Uint8Array;
}
export class NetworkType {
    static MAINNET: NetworkType;
    static TESTNET: NetworkType;
    static valueToKey(value: any): string;
    static fromValue(value: any): any;
    static deserialize(payload: any): any;
    constructor(value: any);
    value: any;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class TransactionType {
    static TRANSFER: TransactionType;
    static ACCOUNT_KEY_LINK: TransactionType;
    static MULTISIG_ACCOUNT_MODIFICATION: TransactionType;
    static MULTISIG_COSIGNATURE: TransactionType;
    static MULTISIG_TRANSACTION: TransactionType;
    static NAMESPACE_REGISTRATION: TransactionType;
    static MOSAIC_DEFINITION: TransactionType;
    static MOSAIC_SUPPLY_CHANGE: TransactionType;
    static valueToKey(value: any): string;
    static fromValue(value: any): any;
    static deserialize(payload: any): any;
    constructor(value: any);
    value: any;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class Transaction {
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
    };
    static deserialize(payload: any): Transaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableTransaction {
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
    };
    static deserialize(payload: any): NonVerifiableTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class LinkAction {
    static LINK: LinkAction;
    static UNLINK: LinkAction;
    static valueToKey(value: any): string;
    static fromValue(value: any): any;
    static deserialize(payload: any): any;
    constructor(value: any);
    value: any;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class AccountKeyLinkTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        linkAction: string;
        remotePublicKey: string;
    };
    static deserialize(payload: any): AccountKeyLinkTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _linkAction: LinkAction;
    _remotePublicKey: PublicKey;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    _remotePublicKeySize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set linkAction(arg: LinkAction);
    get linkAction(): LinkAction;
    set remotePublicKey(arg: PublicKey);
    get remotePublicKey(): PublicKey;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableAccountKeyLinkTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        linkAction: string;
        remotePublicKey: string;
    };
    static deserialize(payload: any): NonVerifiableAccountKeyLinkTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _linkAction: LinkAction;
    _remotePublicKey: PublicKey;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _remotePublicKeySize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set linkAction(arg: LinkAction);
    get linkAction(): LinkAction;
    set remotePublicKey(arg: PublicKey);
    get remotePublicKey(): PublicKey;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NamespaceId {
    static TYPE_HINTS: {
        name: string;
    };
    static deserialize(payload: any): NamespaceId;
    _name: Uint8Array;
    set name(arg: Uint8Array);
    get name(): Uint8Array;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicId {
    static TYPE_HINTS: {
        namespaceId: string;
        name: string;
    };
    static deserialize(payload: any): MosaicId;
    _namespaceId: NamespaceId;
    _name: Uint8Array;
    set namespaceId(arg: NamespaceId);
    get namespaceId(): NamespaceId;
    set name(arg: Uint8Array);
    get name(): Uint8Array;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class Mosaic {
    static TYPE_HINTS: {
        mosaicId: string;
        amount: string;
    };
    static deserialize(payload: any): Mosaic;
    _mosaicId: MosaicId;
    _amount: Amount;
    set mosaicId(arg: MosaicId);
    get mosaicId(): MosaicId;
    set amount(arg: Amount);
    get amount(): Amount;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class SizePrefixedMosaic {
    static TYPE_HINTS: {
        mosaic: string;
    };
    static deserialize(payload: any): SizePrefixedMosaic;
    _mosaic: Mosaic;
    set mosaic(arg: Mosaic);
    get mosaic(): Mosaic;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicTransferFeeType {
    static ABSOLUTE: MosaicTransferFeeType;
    static PERCENTILE: MosaicTransferFeeType;
    static valueToKey(value: any): string;
    static fromValue(value: any): any;
    static deserialize(payload: any): any;
    constructor(value: any);
    value: any;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicLevy {
    static TYPE_HINTS: {
        transferFeeType: string;
        recipientAddress: string;
        mosaicId: string;
        fee: string;
    };
    static deserialize(payload: any): MosaicLevy;
    _transferFeeType: MosaicTransferFeeType;
    _recipientAddress: Address;
    _mosaicId: MosaicId;
    _fee: Amount;
    _recipientAddressSize: number;
    set transferFeeType(arg: MosaicTransferFeeType);
    get transferFeeType(): MosaicTransferFeeType;
    set recipientAddress(arg: Address);
    get recipientAddress(): Address;
    set mosaicId(arg: MosaicId);
    get mosaicId(): MosaicId;
    set fee(arg: Amount);
    get fee(): Amount;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicProperty {
    static TYPE_HINTS: {
        name: string;
        value: string;
    };
    static deserialize(payload: any): MosaicProperty;
    _name: Uint8Array;
    _value: Uint8Array;
    set name(arg: Uint8Array);
    get name(): Uint8Array;
    set value(arg: Uint8Array);
    get value(): Uint8Array;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class SizePrefixedMosaicProperty {
    static TYPE_HINTS: {
        property: string;
    };
    static deserialize(payload: any): SizePrefixedMosaicProperty;
    _property: MosaicProperty;
    set property(arg: MosaicProperty);
    get property(): MosaicProperty;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicDefinition {
    static TYPE_HINTS: {
        ownerPublicKey: string;
        id: string;
        description: string;
        properties: string;
        levy: string;
    };
    static deserialize(payload: any): MosaicDefinition;
    _ownerPublicKey: PublicKey;
    _id: MosaicId;
    _description: Uint8Array;
    _properties: any[];
    _levySize: number;
    _levy: MosaicLevy;
    _ownerPublicKeySize: number;
    set ownerPublicKey(arg: PublicKey);
    get ownerPublicKey(): PublicKey;
    set id(arg: MosaicId);
    get id(): MosaicId;
    set description(arg: Uint8Array);
    get description(): Uint8Array;
    set properties(arg: any[]);
    get properties(): any[];
    set levySize(arg: number);
    get levySize(): number;
    set levy(arg: MosaicLevy);
    get levy(): MosaicLevy;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicDefinitionTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        mosaicDefinition: string;
        rentalFeeSink: string;
        rentalFee: string;
    };
    static deserialize(payload: any): MosaicDefinitionTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _mosaicDefinition: MosaicDefinition;
    _rentalFeeSink: Address;
    _rentalFee: Amount;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    _rentalFeeSinkSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set mosaicDefinition(arg: MosaicDefinition);
    get mosaicDefinition(): MosaicDefinition;
    set rentalFeeSink(arg: Address);
    get rentalFeeSink(): Address;
    set rentalFee(arg: Amount);
    get rentalFee(): Amount;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableMosaicDefinitionTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        mosaicDefinition: string;
        rentalFeeSink: string;
        rentalFee: string;
    };
    static deserialize(payload: any): NonVerifiableMosaicDefinitionTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _mosaicDefinition: MosaicDefinition;
    _rentalFeeSink: Address;
    _rentalFee: Amount;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _rentalFeeSinkSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set mosaicDefinition(arg: MosaicDefinition);
    get mosaicDefinition(): MosaicDefinition;
    set rentalFeeSink(arg: Address);
    get rentalFeeSink(): Address;
    set rentalFee(arg: Amount);
    get rentalFee(): Amount;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicSupplyChangeAction {
    static INCREASE: MosaicSupplyChangeAction;
    static DECREASE: MosaicSupplyChangeAction;
    static valueToKey(value: any): string;
    static fromValue(value: any): any;
    static deserialize(payload: any): any;
    constructor(value: any);
    value: any;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MosaicSupplyChangeTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        mosaicId: string;
        action: string;
        delta: string;
    };
    static deserialize(payload: any): MosaicSupplyChangeTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _mosaicId: MosaicId;
    _action: MosaicSupplyChangeAction;
    _delta: Amount;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set mosaicId(arg: MosaicId);
    get mosaicId(): MosaicId;
    set action(arg: MosaicSupplyChangeAction);
    get action(): MosaicSupplyChangeAction;
    set delta(arg: Amount);
    get delta(): Amount;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableMosaicSupplyChangeTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        mosaicId: string;
        action: string;
        delta: string;
    };
    static deserialize(payload: any): NonVerifiableMosaicSupplyChangeTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _mosaicId: MosaicId;
    _action: MosaicSupplyChangeAction;
    _delta: Amount;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set mosaicId(arg: MosaicId);
    get mosaicId(): MosaicId;
    set action(arg: MosaicSupplyChangeAction);
    get action(): MosaicSupplyChangeAction;
    set delta(arg: Amount);
    get delta(): Amount;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MultisigAccountModificationType {
    static ADD_COSIGNATORY: MultisigAccountModificationType;
    static DELETE_COSIGNATORY: MultisigAccountModificationType;
    static valueToKey(value: any): string;
    static fromValue(value: any): any;
    static deserialize(payload: any): any;
    constructor(value: any);
    value: any;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MultisigAccountModification {
    static TYPE_HINTS: {
        modificationType: string;
        cosignatoryPublicKey: string;
    };
    static deserialize(payload: any): MultisigAccountModification;
    _modificationType: MultisigAccountModificationType;
    _cosignatoryPublicKey: PublicKey;
    _cosignatoryPublicKeySize: number;
    set modificationType(arg: MultisigAccountModificationType);
    get modificationType(): MultisigAccountModificationType;
    set cosignatoryPublicKey(arg: PublicKey);
    get cosignatoryPublicKey(): PublicKey;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class SizePrefixedMultisigAccountModification {
    static TYPE_HINTS: {
        modification: string;
    };
    static deserialize(payload: any): SizePrefixedMultisigAccountModification;
    _modification: MultisigAccountModification;
    set modification(arg: MultisigAccountModification);
    get modification(): MultisigAccountModification;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MultisigAccountModificationTransactionV1 {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        modifications: string;
    };
    static deserialize(payload: any): MultisigAccountModificationTransactionV1;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _modifications: any[];
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set modifications(arg: any[]);
    get modifications(): any[];
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableMultisigAccountModificationTransactionV1 {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        modifications: string;
    };
    static deserialize(payload: any): NonVerifiableMultisigAccountModificationTransactionV1;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _modifications: any[];
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set modifications(arg: any[]);
    get modifications(): any[];
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MultisigAccountModificationTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        modifications: string;
    };
    static deserialize(payload: any): MultisigAccountModificationTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _modifications: any[];
    _minApprovalDelta: number;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    _minApprovalDeltaSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set modifications(arg: any[]);
    get modifications(): any[];
    set minApprovalDelta(arg: number);
    get minApprovalDelta(): number;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableMultisigAccountModificationTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        modifications: string;
    };
    static deserialize(payload: any): NonVerifiableMultisigAccountModificationTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _modifications: any[];
    _minApprovalDelta: number;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _minApprovalDeltaSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set modifications(arg: any[]);
    get modifications(): any[];
    set minApprovalDelta(arg: number);
    get minApprovalDelta(): number;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class Cosignature {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        multisigTransactionHash: string;
        multisigAccountAddress: string;
    };
    static deserialize(payload: any): Cosignature;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _multisigTransactionHash: Hash256;
    _multisigAccountAddress: Address;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    _multisigTransactionHashOuterSize: number;
    _multisigTransactionHashSize: number;
    _multisigAccountAddressSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set multisigTransactionHash(arg: Hash256);
    get multisigTransactionHash(): Hash256;
    set multisigAccountAddress(arg: Address);
    get multisigAccountAddress(): Address;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class SizePrefixedCosignature {
    static TYPE_HINTS: {
        cosignature: string;
    };
    static deserialize(payload: any): SizePrefixedCosignature;
    _cosignature: Cosignature;
    set cosignature(arg: Cosignature);
    get cosignature(): Cosignature;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MultisigTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        innerTransaction: string;
        cosignatures: string;
    };
    static deserialize(payload: any): MultisigTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _innerTransaction: NonVerifiableTransaction;
    _cosignatures: any[];
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set innerTransaction(arg: NonVerifiableTransaction);
    get innerTransaction(): NonVerifiableTransaction;
    set cosignatures(arg: any[]);
    get cosignatures(): any[];
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NamespaceRegistrationTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        rentalFeeSink: string;
        rentalFee: string;
        name: string;
        parentName: string;
    };
    static deserialize(payload: any): NamespaceRegistrationTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _rentalFeeSink: Address;
    _rentalFee: Amount;
    _name: Uint8Array;
    _parentName: Uint8Array;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    _rentalFeeSinkSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set rentalFeeSink(arg: Address);
    get rentalFeeSink(): Address;
    set rentalFee(arg: Amount);
    get rentalFee(): Amount;
    set name(arg: Uint8Array);
    get name(): Uint8Array;
    set parentName(arg: Uint8Array);
    get parentName(): Uint8Array;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableNamespaceRegistrationTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        rentalFeeSink: string;
        rentalFee: string;
        name: string;
        parentName: string;
    };
    static deserialize(payload: any): NonVerifiableNamespaceRegistrationTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _rentalFeeSink: Address;
    _rentalFee: Amount;
    _name: Uint8Array;
    _parentName: Uint8Array;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _rentalFeeSinkSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set rentalFeeSink(arg: Address);
    get rentalFeeSink(): Address;
    set rentalFee(arg: Amount);
    get rentalFee(): Amount;
    set name(arg: Uint8Array);
    get name(): Uint8Array;
    set parentName(arg: Uint8Array);
    get parentName(): Uint8Array;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class MessageType {
    static PLAIN: MessageType;
    static ENCRYPTED: MessageType;
    static valueToKey(value: any): string;
    static fromValue(value: any): any;
    static deserialize(payload: any): any;
    constructor(value: any);
    value: any;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class Message {
    static TYPE_HINTS: {
        messageType: string;
        message: string;
    };
    static deserialize(payload: any): Message;
    _messageType: MessageType;
    _message: Uint8Array;
    set messageType(arg: MessageType);
    get messageType(): MessageType;
    set message(arg: Uint8Array);
    get message(): Uint8Array;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class TransferTransactionV1 {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        recipientAddress: string;
        amount: string;
        message: string;
    };
    static deserialize(payload: any): TransferTransactionV1;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _recipientAddress: Address;
    _amount: Amount;
    _messageEnvelopeSize: number;
    _message: Message;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    _recipientAddressSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set recipientAddress(arg: Address);
    get recipientAddress(): Address;
    set amount(arg: Amount);
    get amount(): Amount;
    set messageEnvelopeSize(arg: number);
    get messageEnvelopeSize(): number;
    set message(arg: Message);
    get message(): Message;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableTransferTransactionV1 {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        recipientAddress: string;
        amount: string;
        message: string;
    };
    static deserialize(payload: any): NonVerifiableTransferTransactionV1;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _recipientAddress: Address;
    _amount: Amount;
    _messageEnvelopeSize: number;
    _message: Message;
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _recipientAddressSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set recipientAddress(arg: Address);
    get recipientAddress(): Address;
    set amount(arg: Amount);
    get amount(): Amount;
    set messageEnvelopeSize(arg: number);
    get messageEnvelopeSize(): number;
    set message(arg: Message);
    get message(): Message;
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class TransferTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        signature: string;
        fee: string;
        deadline: string;
        recipientAddress: string;
        amount: string;
        message: string;
        mosaics: string;
    };
    static deserialize(payload: any): TransferTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _signature: Signature;
    _fee: Amount;
    _deadline: Timestamp;
    _recipientAddress: Address;
    _amount: Amount;
    _messageEnvelopeSize: number;
    _message: Message;
    _mosaics: any[];
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _signatureSize: number;
    _recipientAddressSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set signature(arg: Signature);
    get signature(): Signature;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set recipientAddress(arg: Address);
    get recipientAddress(): Address;
    set amount(arg: Amount);
    get amount(): Amount;
    set messageEnvelopeSize(arg: number);
    get messageEnvelopeSize(): number;
    set message(arg: Message);
    get message(): Message;
    set mosaics(arg: any[]);
    get mosaics(): any[];
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class NonVerifiableTransferTransaction {
    static TRANSACTION_VERSION: number;
    static TRANSACTION_TYPE: TransactionType;
    static TYPE_HINTS: {
        type: string;
        network: string;
        timestamp: string;
        signerPublicKey: string;
        fee: string;
        deadline: string;
        recipientAddress: string;
        amount: string;
        message: string;
        mosaics: string;
    };
    static deserialize(payload: any): NonVerifiableTransferTransaction;
    _type: TransactionType;
    _version: number;
    _network: NetworkType;
    _timestamp: Timestamp;
    _signerPublicKey: PublicKey;
    _fee: Amount;
    _deadline: Timestamp;
    _recipientAddress: Address;
    _amount: Amount;
    _messageEnvelopeSize: number;
    _message: Message;
    _mosaics: any[];
    _entityBodyReserved_1: number;
    _signerPublicKeySize: number;
    _recipientAddressSize: number;
    set type(arg: TransactionType);
    get type(): TransactionType;
    set version(arg: number);
    get version(): number;
    set network(arg: NetworkType);
    get network(): NetworkType;
    set timestamp(arg: Timestamp);
    get timestamp(): Timestamp;
    set signerPublicKey(arg: PublicKey);
    get signerPublicKey(): PublicKey;
    set fee(arg: Amount);
    get fee(): Amount;
    set deadline(arg: Timestamp);
    get deadline(): Timestamp;
    set recipientAddress(arg: Address);
    get recipientAddress(): Address;
    set amount(arg: Amount);
    get amount(): Amount;
    set messageEnvelopeSize(arg: number);
    get messageEnvelopeSize(): number;
    set message(arg: Message);
    get message(): Message;
    set mosaics(arg: any[]);
    get mosaics(): any[];
    get size(): number;
    serialize(): Uint8Array;
    toString(): string;
}
export class TransactionFactory {
    static toKey(values: any): any;
    static deserialize(payload: any): AccountKeyLinkTransaction;
    static createByName(entityName: any): any;
}
export class NonVerifiableTransactionFactory {
    static toKey(values: any): any;
    static deserialize(payload: any): NonVerifiableAccountKeyLinkTransaction;
    static createByName(entityName: any): any;
}
import { BaseValue } from "../BaseValue";
import { ByteArray } from "../ByteArray";
